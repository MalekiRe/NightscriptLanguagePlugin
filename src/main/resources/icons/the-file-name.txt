GenericsFactory.makeWildcard(GenericsFactory, FieldTypeSignature[], FieldTypeSignature[])
DragSource.readObject(DragSource, ObjectInputStream)
Rectangle.intersection(Rectangle, Rectangle)
Window.isActive(Window)
ChannelFuture.channel(ChannelFuture)
FontRenderer.getUnicodeFlag(FontRenderer)
ImmutableMap.getOrDefault(ImmutableMap, Object, Object)
IntStream.spliterator(IntStream | IntStream)
AttributeValues.isNonDefault(AttributeValues, EAttribute)
MemberName.isCallerSensitive(MemberName)
Constructor.getRawAnnotations(Constructor)
Period.toTotalMonths(Period)
EntityDataManager.isDirty(EntityDataManager)
AccessibleTable.setAccessibleRowDescription(AccessibleTable, int, Accessible)
PlayerChunkMap.isPlayerWatchingChunk(PlayerChunkMap, EntityPlayerMP, int, int)
Window.toBack_NoClientCode(Window)
World.getWorldInfo(World)
Entity.getRidingEntity(Entity)
Excluder.withModifiers(Excluder, int[])
PlayerAdvancements.registerListeners(PlayerAdvancements | PlayerAdvancements, Advancement)
FramePeer.setTitle(FramePeer, String)
MemberName.isMethod(MemberName)
DoubleBuffer.wrap(double[] | double[], int, int)
Integer.doubleValue(Integer)
Class.getModifiers(Class)
MethodTypeSignature.getReturnType(MethodTypeSignature)
Stack.empty(Stack)
String.codePointCount(String, int, int)
Long.getLong(String, Long | String | String, long)
FontRenderContext.hashCode(FontRenderContext)
ChannelConfig.isAutoClose(ChannelConfig)
MinecraftServer.canUseCommand(MinecraftServer, int, String)
ZoneOffsetTransition.equals(ZoneOffsetTransition, Object)
JsonElement.isJsonObject(JsonElement)
Vec3d.subtract(Vec3d, Vec3d | Vec3d, double, double, double)
Name.toString(Name)
EnumCreatureAttribute.valueOf(String)
GuiToast.getMinecraft(GuiToast)
RenderItem.renderQuads(RenderItem, BufferBuilder, List, int, ItemStack)
Calendar.setWeekCountData(Calendar, Locale)
Sound.cloneEntry(Sound | Sound)
StateImplementation.isFullCube(StateImplementation)
Toolkit.getDesktopProperty(Toolkit, String)
ServerResourceMode.valueOf(String)
MessageFactory.newMessage(MessageFactory, Object | MessageFactory, String | MessageFactory, String, Object[])
IntSummaryStatistics.accept(IntSummaryStatistics, int)
EntityPlayer.displayVillagerTradeGui(EntityPlayer, IMerchant)
EntityMinecart.setPosition(EntityMinecart, double, double, double)
Period.ofDays(int)
Component.lostFocus(Component, Event, Object)
ImmutableTable.containsRow(ImmutableTable, Object)
ChunkProviderServer.queueUnloadAll(ChunkProviderServer)
MethodType.listToArray(List)
JsonArray.getAsString(JsonArray)
LocalDateTime.with(LocalDateTime, TemporalAdjuster | LocalDateTime, TemporalField, long | LocalDateTime, TemporalField, long | LocalDateTime, LocalDate, LocalTime | LocalDateTime, TemporalField, long | LocalDateTime, TemporalAdjuster | LocalDateTime, TemporalAdjuster)
Minecraft.isUnicode(Minecraft)
Render.renderShadow(Render, Entity, double, double, double, float, float)
EntityPlayer.getEyeHeight(EntityPlayer)
AttributeValues.toMap(AttributeValues, Map)
PropertyChangeSupport.readObject(PropertyChangeSupport, ObjectInputStream)
DropTargetContextPeer.getTargetActions(DropTargetContextPeer)
Toolkit.addAWTEventListener(Toolkit, AWTEventListener, long)
ClassLoader.findLoadedClass0(ClassLoader, String)
StringBuilder.codePointAt(StringBuilder, int)
BigInteger.nextProbablePrime(BigInteger)
CompositeByteBuf.writerIndex(CompositeByteBuf, int | CompositeByteBuf, int)
ISaveFormat.canLoadWorld(ISaveFormat, String)
NumericShaper.getShaper(Range | int)
Condition.await(Condition | Condition, long, TimeUnit)
ChronoLocalDate.getEra(ChronoLocalDate)
IBlockState.withProperty(IBlockState, IProperty, Comparable)
LocalDate.now( | Clock | ZoneId)
ThreadGroup.uncaughtException(ThreadGroup, Thread, Throwable)
ConstantPool.getDoubleAt0(ConstantPool, Object, int)
ImmutableList.writeReplace(ImmutableList)
OffsetDateTime.plusMinutes(OffsetDateTime, long)
EntityPlayerMP.takeStat(EntityPlayerMP, StatBase)
Biome.isHighHumidity(Biome)
GuiScreen.updateScreen(GuiScreen)
ChunkCache.isSideSolid(ChunkCache, BlockPos, EnumFacing, boolean)
ByteBuf.readLong(ByteBuf)
Stream.empty()
CompositeByteBuf.toComponentIndex(CompositeByteBuf, int)
ImmutableTable.cellIterator(ImmutableTable | ImmutableTable)
Field.getFactory(Field)
LocalDateTime.ofEpochSecond(long, int, ZoneOffset)
ZoneOffsetTransition.of(LocalDateTime, ZoneOffset, ZoneOffset)
Float.isEmpty(Float)
BaseLocale.getRegion(BaseLocale)
Wrapper.boolValue(byte)
EntityTracker.sendToTracking(EntityTracker, Entity, Packet)
Component.removeKeyListener(Component, KeyListener)
Enum.toString(Enum)
CombatEntry.getFallSuffix(CombatEntry)
MinecraftServer.getServerStatusResponse(MinecraftServer)
TextureManager.deleteTexture(TextureManager, ResourceLocation)
Font.createFont0(int, InputStream, CreatedFontTracker)
EnumFacing.getFacingFromVector(float, float, float)
PathNavigate.pathFollow(PathNavigate)
MappedByteBuffer.isLoaded0(MappedByteBuffer, long, long, int)
TextAreaPeer.getPreferredSize(TextAreaPeer, int, int)
ICapabilityProvider.hasCapability(ICapabilityProvider, Capability, EnumFacing)
Block.getStateById(int)
BigDecimal.createAndStripZerosToMatchScale(BigInteger, int, long | long, int, long)
TimeZone.getDefaultRef()
AWTEvent.initIDs()
Invokers.cachedInvoker(Invokers, int)
URL.isBuiltinStreamHandler(URL, URLStreamHandler | URL, String)
DragSourceContext.getSourceActions(DragSourceContext)
EntityItemFrame.dropItemOrSelf(EntityItemFrame, Entity, boolean)
Block.neighborChanged(Block, IBlockState, World, BlockPos, Block, BlockPos)
Annotation.equals(Annotation, Object)
Class.getAnnotationType(Class)
ZonedDateTime.minusYears(ZonedDateTime, long)
OffsetDateTime.minusWeeks(OffsetDateTime, long)
OffsetDateTime.getOffset(OffsetDateTime)
Date.getCalendarSystem(int | Date | long)
Rectangle.getBounds2D(Rectangle)
Double.sum(double, double)
PathNavigate.getPathToPos(PathNavigate, BlockPos)
AffineTransform.hashCode(AffineTransform)
Period.writeExternal(Period, DataOutput)
ShaderGroup.initUniform(ShaderGroup, JsonElement)
ChunkProviderServer.queueUnload(ChunkProviderServer, Chunk)
Calendar.checkDisplayNameParams(Calendar, int, int, int, int, Locale, int)
ImmutableSetMultimap.lambda$toImmutableSetMultimap$0(Function, Function, Builder, Object)
Container.add(Container, Component, Object | Container, Component | Container, Component, Object, int | Container, String, Component | Container, Component, int)
URLClassPath.getURLs(URLClassPath)
Calendar.computeTime(Calendar)
GuiScreen.setFocused(GuiScreen, boolean)
Entity.deserializeNBT(Entity, NBTBase | Entity, NBTTagCompound)
BigInteger.getInt(BigInteger, int)
ImmutableCollection.contains(ImmutableCollection, Object)
Instant.plus(Instant, long, long | Instant, TemporalAmount | Instant, TemporalAmount | Instant, long, TemporalUnit | Instant, long, TemporalUnit)
EntityEquipmentSlot.fromString(String)
BufferCapabilities.getFlipContents(BufferCapabilities)
Minecraft.processKeyF3(Minecraft, int)
CompositeByteBuf.setByte(CompositeByteBuf, int, int | CompositeByteBuf, int, int)
GraphicsConfiguration.getDevice(GraphicsConfiguration)
EntityPlayer.preparePlayerToSpawn(EntityPlayer)
DayOfWeek.getLong(DayOfWeek, TemporalField)
Vector.load(Vector, FloatBuffer)
MemberName.getMethodOrFieldType(MemberName)
JsonWriter.flush(JsonWriter)
ImmutableList.sort(ImmutableList, Comparator)
World.getSeed(World)
FoodStats.addExhaustion(FoodStats, float)
Instant.writeReplace(Instant)
DataBuffer.getElemFloat(DataBuffer, int, int | DataBuffer, int)
LootEntry.getEntryName(LootEntry)
JsonArray.hashCode(JsonArray)
EntityItemFrame.readEntityFromNBT(EntityItemFrame, NBTTagCompound)
Scoreboard.removePlayerFromTeams(Scoreboard, String)
ElementType.values()
Lookup.findStaticSetter(Lookup, Class, String, Class)
Attributes.writeMain(Attributes, DataOutputStream)
Class.getEnclosingClass(Class)
Date.convertToAbbr(StringBuilder, String)
EntityLiving.isNoDespawnRequired(EntityLiving)
BlockPos.west(BlockPos, int | BlockPos)
GenericsFactory.makeDouble(GenericsFactory)
Instant.create(long, int)
WorldBorder.getSize(WorldBorder)
Dialog.modalHide(Dialog)
GameSettings.getOptionFloatValue(GameSettings, Options)
Toolkit.createButton(Toolkit, Button)
ByteBuf.equals(ByteBuf, Object)
Entity.isInLava(Entity)
Long.longValue(Long)
PlatformLogger.finer(PlatformLogger, String, Object[] | PlatformLogger, String, Throwable | PlatformLogger, String)
IsoChronology.readObject(IsoChronology, ObjectInputStream)
Graphics2D.clip(Graphics2D, Shape)
EntityLiving.playHurtSound(EntityLiving, DamageSource)
Component.getForeground(Component)
TextureAtlasSprite.load(TextureAtlasSprite, IResourceManager, ResourceLocation, Function)
FontRenderContext.getTransformType(FontRenderContext)
Event.getKeyEventChar(Event)
Block.canEntityDestroy(Block, IBlockState, IBlockAccess, BlockPos, Entity)
Stream.toArray(Stream, IntFunction | Stream)
FontMetrics.getLineMetrics(FontMetrics, char[], int, int, Graphics | FontMetrics, String, int, int, Graphics | FontMetrics, String, Graphics | FontMetrics, CharacterIterator, int, int, Graphics)
Calendar.clear(Calendar | Calendar, int)
Name.isParam(Name)
Rectangle.union(Rectangle, Rectangle)
MemberName.isNative(MemberName)
EntityPlayerMP.loadResourcePack(EntityPlayerMP, String, String)
DataBuffer.toIntArray(Object)
VertexFormat.hasColor(VertexFormat)
WorldInfo.access$1100(WorldInfo)
Graphics2D.setRenderingHints(Graphics2D, Map)
Entity.setWorld(Entity, World)
Dialog.modalityPushed(Dialog)
DropTargetContext.setTargetActions(DropTargetContext, int)
Field.getGenericType(Field)
Long.toHexString(long)
Multimap.containsEntry(Multimap, Object, Object)
EntityPlayer.getUUID(GameProfile)
BlockPos.down(BlockPos | BlockPos, int)
Locale.getDisplayScript(Locale | Locale, Locale)
EntityLookHelper.getIsLooking(EntityLookHelper)
Lookup.linkMethodHandleConstant(Lookup, byte, Class, String, Object)
Component.isValid(Component)
FontRenderContext.getFractionalMetricsHint(FontRenderContext)
MethodHandle.viewAsType(MethodHandle, MethodType, boolean)
EntityLivingBase.getLook(EntityLivingBase, float)
DragSourceContextPeer.getCursor(DragSourceContextPeer)
BlockStateContainer.setBits(BlockStateContainer, int | BlockStateContainer, int, boolean)
EntityLivingBase.dismountRidingEntity(EntityLivingBase)
Integer.decode(String)
AbstractStringBuilder.appendNull(AbstractStringBuilder)
Calendar.isWeekDateSupported(Calendar)
EntityLivingBase.collideWithNearbyEntities(EntityLivingBase)
MethodTypeForm.parameterToArgSlot(MethodTypeForm, int)
Invokers.invokeBasicMethod(MethodType)
FileStore.type(FileStore)
Duration.minusMillis(Duration, long)
IntegratedServer.createCommandManager(IntegratedServer)
URI.access$2100()
MethodType.fromMethodDescriptorString(String, ClassLoader)
DropTargetContextPeer.acceptDrag(DropTargetContextPeer, int)
CharToGlyphMapper.charsToGlyphsNS(CharToGlyphMapper, int, char[], int[])
AccessibleEditableText.selectText(AccessibleEditableText, int, int)
Region.getUnion(Region, Region)
Block.canSustainLeaves(Block, IBlockState, IBlockAccess, BlockPos)
EntityLiving.getLootTable(EntityLiving)
ITextComponent.getFormattedText(ITextComponent)
FieldAccessor.setFloat(FieldAccessor, Object, float)
Range.access$600(int)
MinecraftServer.getServerProxy(MinecraftServer)
Supplier.get(Supplier)
Integer.toUnsignedString(int, int | int)
Component.getLocationOnWindow(Component)
Rectangle.isEmpty(Rectangle)
Component.revalidateSynchronously(Component)
BaseLocale.equals(BaseLocale, Object)
Window.getLocale(Window)
DoubleBuffer.toString(DoubleBuffer)
BlockModelShapes.getModelForState(BlockModelShapes, IBlockState)
Raster.getSamples(Raster, int, int, int, int, int, float[] | Raster, int, int, int, int, int, double[] | Raster, int, int, int, int, int, int[])
EntityLivingBase.attackEntityFrom(EntityLivingBase, DamageSource, float)
EntityMinecart.create(World, double, double, double, Type)
DataBuffer.getElemDouble(DataBuffer, int | DataBuffer, int, int)
ZoneOffset.toString(ZoneOffset)
Graphics.setColor(Graphics, Color)
Chunk.setInhabitedTime(Chunk, long)
Component.mixOnHiding(Component, boolean)
AbstractAttributeMap.getAllAttributes(AbstractAttributeMap)
NBTTagList.read(NBTTagList, DataInput, int, NBTSizeTracker)
TextFormatting.isFancyStyling(TextFormatting)
BufferedImage.removeTileObserver(BufferedImage, TileObserver)
Logger.info(Logger, String | Logger, String, Supplier[] | Logger, Marker, String, Object, Object, Object, Object | Logger, String, Object, Object, Object, Object, Object, Object, Object, Object | Logger, String, Object, Object, Object | Logger, Marker, String, Object, Object, Object, Object, Object, Object, Object, Object, Object | Logger, Message | Logger, CharSequence | Logger, Marker, String, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object | Logger, String, Object, Object, Object, Object | Logger, CharSequence, Throwable | Logger, Supplier, Throwable | Logger, Object | Logger, String, Object | Logger, Message, Throwable | Logger, Marker, Object, Throwable | Logger, Marker, String, Object, Object, Object, Object, Object, Object, Object | Logger, String, Object, Object | Logger, Marker, String, Object, Object, Object, Object, Object, Object, Object, Object | Logger, String, Object[] | Logger, Marker, String | Logger, Marker, Message | Logger, MessageSupplier, Throwable | Logger, Marker, String, Supplier[] | Logger, Marker, String, Object, Object, Object, Object, Object, Object | Logger, Marker, String, Object | Logger, String, Object, Object, Object, Object, Object, Object, Object, Object, Object | Logger, MessageSupplier | Logger, Marker, CharSequence | Logger, Marker, String, Object, Object | Logger, Marker, CharSequence, Throwable | Logger, Object, Throwable | Logger, String, Object, Object, Object, Object, Object | Logger, String, Object, Object, Object, Object, Object, Object, Object | Logger, Marker, Message, Throwable | Logger, Marker, MessageSupplier | Logger, Marker, Supplier | Logger, String, Throwable | Logger, Supplier | Logger, Marker, String, Object, Object, Object, Object, Object | Logger, Marker, Object | Logger, Marker, String, Throwable | Logger, Marker, String, Object, Object, Object | Logger, Marker, MessageSupplier, Throwable | Logger, String, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object | Logger, Marker, Supplier, Throwable | Logger, Marker, String, Object[] | Logger, String, Object, Object, Object, Object, Object, Object)
URI.removeDots(char[], int[])
Long.toUnsignedString(long, int | long)
URI.access$3400()
Template.takeEntitiesFromWorld(Template, World, BlockPos, BlockPos)
SearchTreeManager.register(SearchTreeManager, Key, SearchTree)
Double.longBitsToDouble(long)
Component.setFont(Component, Font)
CompositeByteBuf.iterator(CompositeByteBuf)
SoundManager.access$500()
Template.getDataBlocks(Template, BlockPos, PlacementSettings)
EntityLiving.isNotColliding(EntityLiving)
World.calculateInitialWeather(World)
Lookup.getDirectMethod(Lookup, byte, Class, MemberName, Class)
OffsetDateTime.getYear(OffsetDateTime)
DataFixer.processFixes(DataFixer, IFixType, NBTTagCompound, int)
Collection.hashCode(Collection)
CodeSource.implies(CodeSource, CodeSource)
Container.stopLWModal(Container)
Class.getDeclaredFields(Class)
Float.getBounds2D(Float)
Advancement.getParent(Advancement)
AccessibleComponent.getCursor(AccessibleComponent)
RenderingHints.put(RenderingHints, Object, Object)
NibbleArray.setIndex(NibbleArray, int, int)
EntityPlayer.isPlayerSleeping(EntityPlayer)
VertexFormat.getUvOffsetById(VertexFormat, int)
AppContext.access$102(AppContext)
AppContext.access$100()
ImmutableMap.putIfAbsent(ImmutableMap, Object, Object)
URI.join(char[], int[])
TextureAtlasSprite.clearFramesTextureData(TextureAtlasSprite)
Block.setResistance(Block, float)
EntityLivingBase.updateRidden(EntityLivingBase)
NetworkPlayerInfo.access$002(NetworkPlayerInfo, String)
CompositeByteBuf.toString(CompositeByteBuf)
NetworkPlayerInfo.access$000(NetworkPlayerInfo)
Comparator.thenComparingDouble(Comparator, ToDoubleFunction)
Vec3i.hashCode(Vec3i)
File.isHidden(File)
DataParameter.equals(DataParameter, Object)
Region.appendSpan(Region, int[])
Package.hashCode(Package)
ChunkPos.equals(ChunkPos, Object)
Field.getFloat(Field, Object)
AccessControlContext.getContext(AccessControlContext)
AffineTransform.invert(AffineTransform)
Component.setVisible(Component, boolean)
SpanIterator.skipDownTo(SpanIterator, int)
Entity.isCreatureType(Entity, EnumCreatureType, boolean)
Map.isEmpty(Map)
Shape.getBounds2D(Shape)
BigDecimal.mulsub(long, long, long, long, long)
Duration.multipliedBy(Duration, long)
GlyphJustificationInfo.priorityIsValid(int)
JsonArray.getAsBigInteger(JsonArray)
EntityPlayerMP.isInvulnerableDimensionChange(EntityPlayerMP)
LocalTime.getMinute(LocalTime)
ByteBuf.order(ByteBuf, ByteOrder | ByteBuf)
BasicType.basicTypeClass(BasicType)
UserListOps.getKeys(UserListOps)
Shader.getShaderManager(Shader)
EntityPlayer.isMovementBlocked(EntityPlayer)
IntStream.count(IntStream)
Class.getDeclaredClasses0(Class)
TileEntity.rotate(TileEntity, Rotation)
ThreadLocalMap.getEntryAfterMiss(ThreadLocalMap, ThreadLocal, int, Entry)
ThreadLocalMap.access$000(ThreadLocalMap, ThreadLocal)
LocalDateTime.plusYears(LocalDateTime, long)
GuiButton.isMouseOver(GuiButton)
Template.read(Template, NBTTagCompound)
ImmutableTable.lambda$toImmutableTable$6(BinaryOperator, CollectorState, CollectorState)
EntityItem.changeDimension(EntityItem, int, ITeleporter)
ImmutableTable.lambda$toImmutableTable$7(CollectorState)
ImmutableTable.lambda$toImmutableTable$4()
GuiScreen.drawDefaultBackground(GuiScreen)
ZonedDateTime.getDayOfYear(ZonedDateTime)
NetworkSystem.access$100(NetworkSystem)
ImmutableTable.lambda$toImmutableTable$5(Function, Function, Function, BinaryOperator, CollectorState, Object)
ImmutableTable.lambda$toImmutableTable$2(Builder, Builder)
RenderGlobal.playEvent(RenderGlobal, EntityPlayer, int, BlockPos, int)
ImmutableTable.lambda$toImmutableTable$3(Builder)
ImmutableTable.lambda$toImmutableTable$0()
Component.getMousePosition(Component)
Window.removeWindowFocusListener(Window, WindowFocusListener)
ImmutableTable.lambda$toImmutableTable$1(Function, Function, Function, Builder, Object)
EntityLivingBase.onChangedPotionEffect(EntityLivingBase, PotionEffect, boolean)
AccessibleValue.getCurrentAccessibleValue(AccessibleValue)
ImmutableSet.asList(ImmutableSet)
MinecraftServer.getDataFixer(MinecraftServer)
ModelBiped.setVisible(ModelBiped, boolean)
Float.getWidth(Float)
LambdaFormEditor.bindArgumentF(LambdaFormEditor, BoundMethodHandle, int, float)
Method.getTypeParameters(Method)
LambdaFormEditor.bindArgumentD(LambdaFormEditor, BoundMethodHandle, int, double)
LocaleExtensions.getUnicodeLocaleAttributes(LocaleExtensions)
LambdaFormEditor.bindArgumentJ(LambdaFormEditor, BoundMethodHandle, int, long)
LambdaFormEditor.bindArgumentI(LambdaFormEditor, BoundMethodHandle, int, int)
Scoreboard.getObjectiveNames(Scoreboard)
IntBuffer.array(IntBuffer | IntBuffer)
Instant.toString(Instant)
LambdaFormEditor.bindArgumentL(LambdaFormEditor, BoundMethodHandle, int, Object)
Entity.makeFlySound(Entity)
Block.requiresUpdates(Block)
CharBuffer.read(CharBuffer, CharBuffer)
NodeProcessor.getCanEnterDoors(NodeProcessor)
ArrayList.subListRangeCheck(int, int, int)
BlockModelRenderer.renderQuadsFlat(BlockModelRenderer, IBlockAccess, IBlockState, BlockPos, int, boolean, BufferBuilder, List, BitSet)
DataBuffer.getNumBanks(DataBuffer)
ChannelPipeline.firstContext(ChannelPipeline)
NBTTagList.equals(NBTTagList, Object)
Minecraft.getLimitFramerate(Minecraft)
AccessibleContext.getAccessibleText(AccessibleContext)
MethodType.replaceParameterTypes(MethodType, int, int, Class[])
Vec3d.equals(Vec3d, Object)
ItemStack.areItemStacksEqual(ItemStack, ItemStack)
Minecraft.debugFeedbackTranslated(Minecraft, String, Object[])
Class.getFactory(Class)
ImmutableList.spliterator(ImmutableList)
Component.setLocale(Component, Locale)
AffineTransform.readObject(AffineTransform, ObjectInputStream)
Particle.getBoundingBox(Particle)
Entry.lambda$comparingByValue$827a17d5$1(Comparator, Entry, Entry)
BigInteger.multiplyToLen(int[], int, int[], int, int[])
ZonedDateTime.range(ZonedDateTime, TemporalField)
Entity.preparePlayerToSpawn(Entity)
BaseStream.parallel(BaseStream)
OffsetDateTime.minusSeconds(OffsetDateTime, long)
Lookup.in(Lookup, Class)
BigInteger.signBit(BigInteger)
EnumHandSide.opposite(EnumHandSide)
LambdaFormBuffer.verifyFirstChange(LambdaFormBuffer)
BlockPos.rotate(BlockPos, Rotation)
Multimap.size(Multimap)
Font.decode(String)
Date.getCachedYear(Date)
PlayerChunkMap.markSortPending(PlayerChunkMap)
AppContext.initMainAppContext()
Entity.canBeRidden(Entity, Entity)
World.getPersistentChunks(World)
JsonElement.isJsonNull(JsonElement)
GameType.isCreative(GameType)
ChannelOutboundBuffer.fillBufferArray(ByteBuffer[], ByteBuffer[], int)
Multimap.get(Multimap, Object)
Wrapper.newIllegalArgumentException(String, Object | String)
InventoryEnderChest.isUsableByPlayer(InventoryEnderChest, EntityPlayer)
CapabilityDispatcher.getCapability(CapabilityDispatcher, Capability, EnumFacing)
Throwable.printEnclosedStackTrace(Throwable, PrintStreamOrWriter, StackTraceElement[], String, String, Set)
Period.ofMonths(int)
JsonWriter.writeDeferredName(JsonWriter)
EntityMoveHelper.getZ(EntityMoveHelper)
EntityLivingBase.getCombatTracker(EntityLivingBase)
Component.getBaseline(Component, int, int)
Component.disable(Component)
Vector.length(Vector)
ThreadLocal.isPresent(ThreadLocal)
Container.recursiveRelocateHeavyweightChildren(Container, Point)
EntityMoveHelper.getX(EntityMoveHelper)
EntityMoveHelper.getY(EntityMoveHelper)
FontRenderContext.isAntiAliased(FontRenderContext)
Region.needSpace(Region, int)
Logger.isEnabled(Logger, Level | Logger, Level, Marker)
URL.toString(URL)
ChronoLocalDate.isLeapYear(ChronoLocalDate)
LocalDate.getProlepticMonth(LocalDate)
TextHitInfo.getOtherHit(TextHitInfo)
BigInteger.squareKaratsuba(BigInteger)
ImmutableSet.createAsList(ImmutableSet)
Date.setNormalizedYear(Date, int)
ICommandManager.executeCommand(ICommandManager, ICommandSender, String)
MethodType.wrapWithPrims(MethodType)
Style.getParent(Style)
ByteBuf.setFloat(ByteBuf, int, float)
LocalTime.readObject(LocalTime, ObjectInputStream)
MinecraftServer.access$100(MinecraftServer)
Framebuffer.setFramebufferColor(Framebuffer, float, float, float, float)
ZonedDateTime.getOffset(ZonedDateTime)
Image.setAccelerationPriority(Image, float)
Factory.getNestedTypes(Factory, Class, boolean, Class)
Entity.setSize(Entity, float, float)
TypeAdapter.fromJson(TypeAdapter, Reader | TypeAdapter, String)
GraphicsConfiguration.createCompatibleImage(GraphicsConfiguration, int, int, int | GraphicsConfiguration, int, int)
Village.addOrRenewAgressor(Village, EntityLivingBase)
TileEntity.writeToNBT(TileEntity, NBTTagCompound)
Container.isFocusTraversalPolicyProvider(Container)
ClassLoader.defineClass(ClassLoader, String, byte[], int, int | ClassLoader, String, byte[], int, int, ProtectionDomain | ClassLoader, byte[], int, int | ClassLoader, String, ByteBuffer, ProtectionDomain)
TimeZone.getID(TimeZone)
Color.initIDs()
BufferedImage.getTileWidth(BufferedImage)
DesktopPeer.isSupported(DesktopPeer, Action)
Path.getTarget(Path)
Container.isRemoveNotifyNeeded(Component, Container, Container)
MethodHandle.internalValues(MethodHandle)
DropTargetContextPeer.acceptDrop(DropTargetContextPeer, int)
Throwable.getSuppressed(Throwable)
Vector.copyInto(Vector, Object[])
ModalityType.valueOf(String)
Future.awaitUninterruptibly(Future | Future, long | Future, long, TimeUnit)
Date.getSeconds(Date)
ImmutableTable.rowKeySet(ImmutableTable | ImmutableTable)
AccessibleTable.getAccessibleSummary(AccessibleTable)
Dimension.equals(Dimension, Object)
Thread.resume0(Thread)
Chunk.markLoaded(Chunk, boolean)
Member.isSynthetic(Member)
ZonedDateTime.readObject(ZonedDateTime, ObjectInputStream)
AccessibleTable.getAccessibleRowExtentAt(AccessibleTable, int, int)
EntityPlayerMP.openEditSign(EntityPlayerMP, TileEntitySign)
Chunk.setLightFor(Chunk, EnumSkyBlock, BlockPos, int)
Window.getInputContext(Window)
ZoneOffset.adjustInto(ZoneOffset, Temporal)
Component.removeMouseWheelListener(Component, MouseWheelListener)
Wrapper.numberValue(Object)
Container.getListenersCount(Container, int, boolean)
ItemColors.init(BlockColors)
VertexFormatElement.getType(VertexFormatElement)
UnmodifiableIterator.remove(UnmodifiableIterator)
GameSettings.parseFloat(GameSettings, String)
EntityPlayerMP.decrementTimeUntilPortal(EntityPlayerMP)
Entity.addPassenger(Entity, Entity)
Entity.getAlwaysRenderNameTagForRender(Entity)
EntityPlayer.getCooldownTracker(EntityPlayer)
URLConnection.toString(URLConnection)
ThreadLocalMap.access$200(ThreadLocalMap, ThreadLocal)
VillageDoorInfo.getInsideOffsetZ(VillageDoorInfo)
VillageDoorInfo.getInsideOffsetX(VillageDoorInfo)
BasicType.access$300(BasicType)
Entity.setSilent(Entity, boolean)
MethodType.insertParameterTypes(MethodType, int, List | MethodType, int, Class[])
BufferBuilder.getColorIndex(BufferBuilder, int)
EntityPlayer.getArmorVisibility(EntityPlayer)
Loader.close(Loader)
Vec3d.getIntermediateWithXValue(Vec3d, Vec3d, double)
ItemStack.onItemUseFirst(ItemStack, EntityPlayer, World, BlockPos, EnumHand, EnumFacing, float, float, float)
NodeProcessor.getPathNodeType(NodeProcessor, IBlockAccess, int, int, int | NodeProcessor, IBlockAccess, int, int, int, EntityLiving, int, int, int, boolean, boolean)
Class.getTypeName(Class)
DamageSource.setDamageBypassesArmor(DamageSource)
LambdaFormEditor.getInCache(LambdaFormEditor, Transform)
Era.get(Era, TemporalField)
ItemStack.splitStack(ItemStack, int)
Component.autoProcessMouseWheel(Component, MouseWheelEvent)
DoubleBuffer.duplicate(DoubleBuffer)
LocalTime.create(int, int, int, int)
Entity.isPassenger(Entity, Entity)
Promise.setSuccess(Promise, Object)
ZonedDateTime.withYear(ZonedDateTime, int)
File.canRead(File)
Block.isBed(Block, IBlockState, IBlockAccess, BlockPos, Entity)
Block.isAssociatedBlock(Block, Block)
GuiScreen.isAltKeyDown()
BaseStream.close(BaseStream)
EnumVisible.values()
ISaveFormat.isConvertible(ISaveFormat, String)
Container.writeObject(Container, ObjectOutputStream)
DisplayInfo.getIcon(DisplayInfo)
IsoEra.of(int)
MethodType.unwrap(MethodType)
Shader.render(Shader, float)
Dialog.setModal(Dialog, boolean)
Dialog.unblockWindow(Dialog, Window)
SoundHandler.onResourceManagerReload(SoundHandler, IResourceManager)
LocalDateTime.minusSeconds(LocalDateTime, long)
Entity.canPassengerSteer(Entity)
ICommandManager.getPossibleCommands(ICommandManager, ICommandSender)
Entity.setPortal(Entity, BlockPos)
ImmutableMapEntry.createEntryArray(int)
Window.setAutoRequestFocus(Window, boolean)
MethodType.invokers(MethodType)
Invokers.impliedRestargType(MethodType, int)
LongStream.sorted(LongStream)
RenderGlobal.renderSkyEnd(RenderGlobal)
RenderChunk.clearNeedsUpdate(RenderChunk)
JsonReader.beginObject(JsonReader)
Optional.fromNullable(Object)
DragGestureEvent.toArray(DragGestureEvent | DragGestureEvent, Object[])
LambdaForm.checkRef(Class, Object)
Container.addDelicately(Container, Component, Container, int)
Raster.createChild(Raster, int, int, int, int, int, int, int[])
CharBuffer.append(CharBuffer, char | CharBuffer, CharSequence, int, int | CharBuffer, CharSequence, int, int | CharBuffer, CharSequence | CharBuffer, CharSequence | CharBuffer, char)
Clipboard.getAvailableDataFlavorSet(Clipboard)
BasicType.isArgBasicTypeChar(char)
NBTTagCompound.setLong(NBTTagCompound, String, long)
Hashtable.containsKey(Hashtable, Object)
GlyphVector.getGlyphTransform(GlyphVector, int)
Toolkit.createDragGestureRecognizer(Toolkit, Class, DragSource, Component, int, DragGestureListener)
URI.access$2000()
EnumOffsetType.values()
FontStrike.getCodePointAdvance(FontStrike, int)
Region.getSafeTranslatedRegion(Region, int, int)
SortedSet.first(SortedSet)
InputEvent.getMaskForButton(int)
Double.parseDouble(String)
ColorModel.isLinearRGBspace(ColorSpace)
GlyphVector.getPixelBounds(GlyphVector, FontRenderContext, float, float)
Graphics2D.getTransform(Graphics2D)
Graphics.fillPolygon(Graphics, int[], int[], int | Graphics, Polygon)
EventLoop.parent(EventLoop)
JsonReader.nextString(JsonReader)
DragGestureEvent.writeObject(DragGestureEvent, ObjectOutputStream)
Path.toRealPath(Path, LinkOption[])
ChronoPeriod.normalized(ChronoPeriod)
FutureCallback.onSuccess(FutureCallback, Object)
Period.getChronology(Period | Period)
EntityLivingBase.clearActivePotions(EntityLivingBase)
ReentrantLock.getQueuedThreads(ReentrantLock)
Window.isRecursivelyVisible(Window)
StateImplementation.doesSideBlockRendering(StateImplementation, IBlockAccess, BlockPos, EnumFacing)
ArrayList.access$000(ArrayList)
Container.invalidateParent(Container)
BigInteger.pow(BigInteger, int)
Period.isNegative(Period)
Locale.clone(Locale)
SleepResult.values()
EntityPlayerMP.displayGuiCommandBlock(EntityPlayerMP, TileEntityCommandBlock)
ImmutableList.reverse(ImmutableList)
PlayerList.writePlayerData(PlayerList, EntityPlayerMP)
BigDecimal.valueOf(long, int, int | long | BigInteger, int, int | long, int | double)
EntityLivingBase.outOfWorld(EntityLivingBase)
ArrayBasedBuilder.combine(ArrayBasedBuilder, ArrayBasedBuilder)
Window.setMinimumSize(Window, Dimension)
JsonArray.getAsNumber(JsonArray)
AdvancementProgress.getProgressText(AdvancementProgress)
Invokers.checkGenericType(Object, Object)
URI.access$3300()
ChronoLocalDateTime.compareTo(ChronoLocalDateTime, Object | ChronoLocalDateTime, ChronoLocalDateTime)
Dialog.setResizable(Dialog, boolean)
OffsetDateTime.withMonth(OffsetDateTime, int)
ComponentPeer.setFont(ComponentPeer, Font)
Builder.resolveParent(Builder, Function)
EventDispatchThread.stopDispatching(EventDispatchThread)
ByteBuf.setChar(ByteBuf, int, int)
URI.normalizedHash(int, String)
EntityMoveHelper.read(EntityMoveHelper, EntityMoveHelper)
Minecraft.run(Minecraft)
ValueRange.getSmallestMaximum(ValueRange)
World.canSeeSky(World, BlockPos)
Thread.init(Thread, ThreadGroup, Runnable, String, long | Thread, ThreadGroup, Runnable, String, long, AccessControlContext, boolean)
PathNavigate.canNavigate(PathNavigate)
Container.paintComponents(Container, Graphics)
HorseArmorType.getTextureName(HorseArmorType)
AttributeValues.set(AttributeValues, EAttribute, Object | AttributeValues, EAttribute, AttributeValues)
Invokers.linkToTargetMethod(MethodType)
GraphicsDevice.getBestConfiguration(GraphicsDevice, GraphicsConfigTemplate)
ReflectionFactory.newFieldAccessor(ReflectionFactory, Field, boolean)
Component.getMouseListeners(Component)
Method.isSynthetic(Method)
Locale.hasExtensions(Locale)
JsonPrimitive.getAsBigInteger(JsonPrimitive)
AffineTransform.clone(AffineTransform)
BaseStream.spliterator(BaseStream)
ICapabilityProvider.getCapability(ICapabilityProvider, Capability, EnumFacing)
EntityPlayer.getPrimaryHand(EntityPlayer)
RenderingHints.containsValue(RenderingHints, Object)
ComponentOrientation.isLeftToRight(ComponentOrientation)
IToast.draw(IToast, GuiToast, long)
CompiledChunk.setState(CompiledChunk, State)
Collection.parallelStream(Collection)
EntityLiving.canEquipItem(EntityLiving, ItemStack)
Component.addHierarchyBoundsListener(Component, HierarchyBoundsListener)
Integer.toOctalString(int)
Level.equals(Level, Object)
EntityPlayer.doWaterSplashEffect(EntityPlayer)
NetHandlerPlayClient.handleChangeGameState(NetHandlerPlayClient, SPacketChangeGameState)
Cursor.initCursorDir()
JsonElement.toString(JsonElement)
LogBuilder.withThrowable(LogBuilder, Throwable)
TextFieldPeer.getPreferredSize(TextFieldPeer, int)
EntityPlayer.updateCape(EntityPlayer)
Month.from(TemporalAccessor)
SoundManager.setListener(SoundManager, Entity, float | SoundManager, EntityPlayer, float)
ListenerListInst.forceRebuild(ListenerListInst)
IResourcePack.getPackMetadata(IResourcePack, MetadataSerializer, String)
RenderGlobal.updateChunks(RenderGlobal, long)
ItemStack.getDestroySpeed(ItemStack, IBlockState)
FontLineMetrics.getBaselineOffsets(FontLineMetrics)
SoundManager.access$400(SoundManager)
Toolkit.loadLibraries()
JsonElement.isJsonArray(JsonElement)
GameType.values()
GameRules.getInt(GameRules, String)
Duration.withSeconds(Duration, long)
JsonArray.deepCopy(JsonArray | JsonArray)
WorldType.getWorldTypeForGeneratorVersion(WorldType, int)
EventLoopGroup.register(EventLoopGroup, ChannelPromise | EventLoopGroup, Channel, ChannelPromise | EventLoopGroup, Channel)
Hashtable.computeIfAbsent(Hashtable, Object, Function)
EnumHandSide.toString(EnumHandSide)
Window.setFocusableWindowState(Window, boolean)
JsonReader.getPath(JsonReader)
WorldServer.canSpawnAnimals(WorldServer)
Item.getUnlocalizedNameInefficiently(Item, ItemStack)
InetAddress.readObject(InetAddress, ObjectInputStream)
AttributeValues.getInputMethodUnderline(AttributeValues)
Item.getDamage(Item, ItemStack)
Locale.lookupTag(List, Collection)
File.isFile(File)
Locale.initDefault( | Category)
Sound.getVolume(Sound)
WorldInfo.access$1000(WorldInfo)
Hashtable.computeIfPresent(Hashtable, Object, BiFunction)
ChunkCache.getBlockState(ChunkCache, BlockPos)
EntityDataManager.setEntryValue(EntityDataManager, DataEntry, DataEntry)
LineMetrics.getLeading(LineMetrics)
World.removeEventListener(World, IWorldEventListener)
Snooper.access$000(Snooper)
World.extinguishFire(World, EntityPlayer, BlockPos, EnumFacing)
Executable.sharedToString(Executable, int, boolean, Class[], Class[])
NBTTagCompound.setByteArray(NBTTagCompound, String, byte[])
Minecraft.addScheduledTask(Minecraft, Runnable | Minecraft, Callable)
Snooper.isSnooperRunning(Snooper)
Component.paint(Component, Graphics)
UUID.timestamp(UUID)
Vector.scale(Vector, float)
URI.getScheme(URI)
InetAddress.isMulticastAddress(InetAddress)
Path.getNameCount(Path)
URLStreamHandler.hashCode(URLStreamHandler, URL)
ScorePlayerTeam.getFriendlyFlags(ScorePlayerTeam)
JsonElement.getAsBooleanWrapper(JsonElement)
ZonedDateTime.withMonth(ZonedDateTime, int)
Component.addMouseMotionListener(Component, MouseMotionListener)
URLConnection.getContentHandler(URLConnection)
Component.removeHierarchyListener(Component, HierarchyListener)
EntityPlayer.openEditSign(EntityPlayer, TileEntitySign)
Thread.getPriority(Thread)
Graphics.setClip(Graphics, Shape | Graphics, int, int, int, int)
ImmutableMultimap.keySet(ImmutableMultimap | ImmutableMultimap)
ClassLoader.checkCerts(ClassLoader, String, CodeSource)
NBTTagCompound.getTagList(NBTTagCompound, String, int)
CompositeByteBuf.array(CompositeByteBuf)
ReflectionFactory.setLangReflectAccess(ReflectionFactory, LangReflectAccess)
FieldAccessor.setByte(FieldAccessor, Object, byte)
RenderLivingBase.renderName(RenderLivingBase, Entity, double, double, double | RenderLivingBase, EntityLivingBase, double, double, double)
AxisAlignedBB.grow(AxisAlignedBB, double, double, double | AxisAlignedBB, double)
Container.getAccessibleChildrenCount(Container)
IResourceManager.getResource(IResourceManager, ResourceLocation)
ThreadLocalMap.access$100(ThreadLocalMap, ThreadLocal, Object)
HorseArmorType.getByItemStack(ItemStack)
ItemRenderer.renderArms(ItemRenderer)
ImmutableMap.entrySet(ImmutableMap | ImmutableMap)
Score.isLocked(Score)
URI.resolvePath(String, String, boolean)
Graphics2D.setComposite(Graphics2D, Composite)
Executable.specificToGenericStringHeader(Executable, StringBuilder)
ChronoLocalDate.lengthOfYear(ChronoLocalDate)
ArrayBasedBuilder.add(ArrayBasedBuilder, Object | ArrayBasedBuilder, Object[] | ArrayBasedBuilder, Object)
Container.proxyEnableEvents(Container, long)
EntityLiving.getSlotForItemStack(ItemStack)
MemberName.isSynthetic(MemberName)
Number.longValue(Number)
ZonedDateTime.with(ZonedDateTime, TemporalField, long | ZonedDateTime, TemporalAdjuster | ZonedDateTime, TemporalField, long | ZonedDateTime, TemporalField, long | ZonedDateTime, TemporalAdjuster | ZonedDateTime, TemporalAdjuster)
AppContext.access$200()
Block.rotateBlock(Block, World, BlockPos, EnumFacing)
Raster.getSampleModel(Raster)
ClassLoader.findSystemClass(ClassLoader, String)
Entity.resetPositionToBB(Entity)
SoundHandler.getAccessor(SoundHandler, ResourceLocation)
Font2D.createStrike(Font2D, FontStrikeDesc)
LocalDateTime.of(LocalDate, LocalTime | int, Month, int, int, int | int, int, int, int, int | int, Month, int, int, int, int, int | int, int, int, int, int, int, int | int, int, int, int, int, int | int, Month, int, int, int, int)
FontRenderer.resetStyles(FontRenderer)
JsonArray.getAsFloat(JsonArray)
ComponentOrientation.isHorizontal(ComponentOrientation)
Control.getFallbackLocale(Control, String, Locale)
ReflectionFactory.newMethod(ReflectionFactory, Class, String, Class[], Class, Class[], int, int, String, byte[], byte[], byte[])
IdentityArrayList.size(IdentityArrayList)
ImmutableCollection.isPartialView(ImmutableCollection)
BlockColors.getColor(BlockColors, IBlockState, World, BlockPos)
EnumType.getSize(EnumType)
ImmutableList.of( | Object, Object, Object, Object, Object, Object, Object, Object, Object | Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object | Object, Object, Object, Object, Object | Object, Object, Object, Object, Object, Object, Object, Object | Object, Object, Object, Object, Object, Object | Object, Object, Object, Object, Object, Object, Object, Object, Object, Object | Object, Object | Object, Object, Object, Object, Object, Object, Object | Object, Object, Object | Object, Object, Object, Object | Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object[] | Object)
ImmutableSetMultimap.replaceValues(ImmutableSetMultimap, Object, Iterable | ImmutableSetMultimap, Object, Iterable | ImmutableSetMultimap, Object, Iterable | ImmutableSetMultimap, Object, Iterable)
FrameType.byName(String)
Wrapper.valueOf(String)
Toolkit.setPlatformResources(ResourceBundle)
PlayerList.sendMessageToAllTeamMembers(PlayerList, EntityPlayer, ITextComponent)
Name.newIndex(Name, int)
Wrapper.bitWidth(Wrapper)
Multiset.lambda$forEach$1(Consumer, Entry)
StateImplementation.doesSideBlockChestOpening(StateImplementation, IBlockAccess, BlockPos, EnumFacing)
AbstractStringBuilder.setCharAt(AbstractStringBuilder, int, char)
AffineTransform.shear(AffineTransform, double, double)
PlayerList.sendMessageToTeamOrAllPlayers(PlayerList, EntityPlayer, ITextComponent)
ZonedDateTime.ofLenient(LocalDateTime, ZoneOffset, ZoneId)
Style.setItalic(Style, Boolean)
LambdaForm.identity(BasicType)
MinecraftServer.getFolderName(MinecraftServer)
Wrapper.copyArrayBoxing(Wrapper, Object, int, Object[], int, int)
Item.addInformation(Item, ItemStack, World, List, ITooltipFlag)
EnumFlowerType.valueOf(String)
MethodTypeSignature.getParameterTypes(MethodTypeSignature)
BigDecimal.compareMagnitudeNormalized(long, int, BigInteger, int | BigInteger, int, BigInteger, int | long, int, long, int)
BigInteger.testBit(BigInteger, int)
World.isValid(World, BlockPos)
Multimap.entries(Multimap)
EntityLiving.getPrimaryHand(EntityLiving)
LambdaFormBuffer.replaceParameterByNewExpression(LambdaFormBuffer, int, Name)
MethodHandle.linkToInterface(Object[])
Range.access$700(Range)
ByteBuf.maxCapacity(ByteBuf)
GuiScreen.doesGuiPauseGame(GuiScreen)
Wrapper.findWrapperType(Class)
File.compareTo(File, File | File, Object)
EntityMinecart.setRollingAmplitude(EntityMinecart, int)
ZonedDateTime.plusSeconds(ZonedDateTime, long)
PlayerChunkMapEntry.updateChunkInhabitedTime(PlayerChunkMapEntry)
ChannelConfig.setRecvByteBufAllocator(ChannelConfig, RecvByteBufAllocator)
Item.getArmorModel(Item, EntityLivingBase, ItemStack, EntityEquipmentSlot, ModelBiped)
Graphics.drawBytes(Graphics, byte[], int, int, int, int)
Component.getGraphicsConfiguration_NoClientCode(Component)
PopupMenuPeer.show(PopupMenuPeer, Event)
Color.getTransparency(Color)
Constructor.getGenericExceptionTypes(Constructor)
Entity.hitByEntity(Entity, Entity)
GraphicsDevice.getType(GraphicsDevice)
Dimension.getWidth(Dimension)
BigInteger.remainder(BigInteger, BigInteger)
EntityLiving.isItemStackInSlot(EntityEquipmentSlot, ItemStack)
EntityItem.handleWaterMovement(EntityItem)
ChronoLocalDateTime.query(ChronoLocalDateTime, TemporalQuery)
Duration.plusMinutes(Duration, long)
Instant.until(Instant, Temporal, TemporalUnit)
ImmutableTable.remove(ImmutableTable, Object, Object)
BigDecimal.floatValue(BigDecimal)
EntityTracker.setViewDistance(EntityTracker, int)
ItemStack.isItemStackDamageable(ItemStack)
MinecraftServer.getEntityWorld(MinecraftServer)
AttributeValues.i_equals(AttributeValues, EAttribute, AttributeValues)
CheckboxPeer.setLabel(CheckboxPeer, String)
EntityLiving.entityInit(EntityLiving)
EntityPlayer.displayGUIChest(EntityPlayer, IInventory)
File.setWritable(File, boolean, boolean | File, boolean)
MinecraftServer.shouldUseNativeTransport(MinecraftServer)
AbstractStringBuilder.charAt(AbstractStringBuilder, int)
AttributeModifier.getName(AttributeModifier)
LanguageManager.onResourceManagerReload(LanguageManager, IResourceManager)
Class.isAnnotation(Class)
Item.getCreativeTab(Item)
LogBuilder.withLocation(LogBuilder, StackTraceElement | LogBuilder)
SoundManager.stop(SoundManager, String, SoundCategory)
Level.toString(Level)
ZonedDateTime.getZone(ZonedDateTime)
ModelBase.copyModelAngles(ModelRenderer, ModelRenderer)
Component.setBounds(Component, int, int, int, int | Component, Rectangle)
Entity.getLowestRidingEntity(Entity)
Style.createDeepCopy(Style)
ISnooperInfo.addServerStatsToSnooper(ISnooperInfo, Snooper)
EntityLivingBase.attackable(EntityLivingBase)
Path.startsWith(Path, String | Path, Path)
MinecraftServer.getCurrentPlayerCount(MinecraftServer)
NBTTagCompound.setInteger(NBTTagCompound, String, int)
Lookup.unreflectSpecial(Lookup, Method, Class)
Optional.of(Object | Object)
AffineTransform.setToScale(AffineTransform, double, double)
Insets.toString(Insets)
Double.isFinite(double)
Block.getExpDrop(Block, IBlockState, IBlockAccess, BlockPos, int)
Optional.or(Optional, Object | Optional, Optional | Optional, Supplier)
Minecraft.readImageToBuffer(Minecraft, InputStream)
RenderLivingBase.addLayer(RenderLivingBase, LayerRenderer)
Class.getProtectionDomain(Class)
FontStrike.getNumGlyphs(FontStrike)
IntBuffer.compact(IntBuffer)
Toolkit.createScrollbar(Toolkit, Scrollbar)
OffsetDateTime.plusSeconds(OffsetDateTime, long)
ChronoPeriod.subtractFrom(ChronoPeriod, Temporal)
BlockStateContainer.getSerializedSize(BlockStateContainer)
ZonedDateTime.plusMinutes(ZonedDateTime, long)
ScorePlayerTeam.formatPlayerName(Team, String)
Material.setNoPushMobility(Material)
InputMethodRequests.cancelLatestCommittedText(InputMethodRequests, Attribute[])
IntStream.collect(IntStream, Supplier, ObjIntConsumer, BiConsumer)
Vector.set(Vector, int, Object)
Component.isAutoFocusTransferOnDisposal(Component)
VillageCollection.addToNewDoorsList(VillageCollection, BlockPos)
ChronoLocalDateTime.toLocalDate(ChronoLocalDateTime)
Handle.attemptedBytesRead(Handle | Handle, int)
Multimap.asMap(Multimap)
EntityPlayer.playSound(EntityPlayer, SoundEvent, float, float)
IntStream.mapToDouble(IntStream, IntToDoubleFunction)
ImmutableSet.isHashCodeFast(ImmutableSet)
SoundCategory.getName(SoundCategory)
Multiset.lambda$forEachEntry$0(ObjIntConsumer, Entry)
EventQueue.dispatchEventImpl(EventQueue, AWTEvent, Object)
ByteBuffer.order(ByteBuffer | ByteBuffer, ByteOrder)
GuiScreen.isShiftKeyDown()
MethodType.parameterType(MethodType, int)
EntityPlayer.fall(EntityPlayer, float, float)
Item.getTileEntityItemStackRenderer(Item)
MinecraftServer.access$000()
Stream.flatMapToLong(Stream, Function)
ListPeer.deselect(ListPeer, int)
JsonWriter.beginArray(JsonWriter)
Class.getEnclosingConstructor(Class)
Locale.getExtensionKeys(Locale)
Number.doubleValue(Number)
Entity.canRenderOnFire(Entity)
ItemRenderer.setLightmap(ItemRenderer)
Duration.subtractFrom(Duration, Temporal)
WorldType.getBiomeLayer(WorldType, long, GenLayer, ChunkGeneratorSettings)
ZoneOffset.compareTo(ZoneOffset, ZoneOffset | ZoneOffset, Object)
AbstractStringBuilder.subSequence(AbstractStringBuilder, int, int)
BasicType.isBasicTypeChar(char)
FrameType.values()
Set.size(Set)
Window.init(Window, GraphicsConfiguration)
Template.addEntitiesToWorld(Template, World, BlockPos, Mirror, Rotation, StructureBoundingBox)
LambdaForm.buildNames(Name[], Name[], Name)
NetHandlerPlayClient.getAdvancementManager(NetHandlerPlayClient)
EntityLiving.dropEquipment(EntityLiving, boolean, int)
Random.setSeed(Random, long)
MinecraftServer.addServerStatsToSnooper(MinecraftServer, Snooper)
Date.getMonth(Date)
LootPool.checkFrozen(LootPool)
AWTEventListener.eventDispatched(AWTEventListener, AWTEvent)
BigInteger.implMulAdd(int[], int[], int, int, int)
EntityPlayer.addSuffix(EntityPlayer, ITextComponent)
UUID.toString(UUID)
NetworkManager.isLocalChannel(NetworkManager)
WindowPeer.updateFocusableWindowState(WindowPeer)
RenderManager.setPlayerViewY(RenderManager, float)
EntityDataManager.set(EntityDataManager, DataParameter, Object)
PrintJob.end(PrintJob)
IsoChronology.eras(IsoChronology)
OffsetDateTime.plusMonths(OffsetDateTime, long)
Sound.getSoundAsOggLocation(Sound)
LocalDateTime.toLocalDate(LocalDateTime | LocalDateTime)
CompositeByteBuf.addComponents0(CompositeByteBuf, boolean, int, Iterable | CompositeByteBuf, boolean, int, ByteBuf[], int, int)
ResourcePackRepository.setServerResourcePack(ResourcePackRepository, File)
SampleModel.getNumDataElements(SampleModel)
AttributeValues.fromSerializableHashtable(Hashtable)
Package.getSpecificationVersion(Package)
AccessibleSelection.isAccessibleChildSelected(AccessibleSelection, int)
Window.isDisposing(Window)
ImmutableMap.createKeySet(ImmutableMap)
ResourcePackRepository.getRepositoryEntries(ResourcePackRepository)
AdvancementProgress.update(AdvancementProgress, Map, String[][])
ChannelConfig.getMessageSizeEstimator(ChannelConfig)
ColorModel.isCompatibleSampleModel(ColorModel, SampleModel)
ChannelFuture.syncUninterruptibly(ChannelFuture)
MinecraftServer.setAllowFlight(MinecraftServer, boolean)
CompositeByteBuf.markWriterIndex(CompositeByteBuf | CompositeByteBuf)
Collection.isEmpty(Collection)
ZoneOffset.query(ZoneOffset, TemporalQuery)
FileLock.overlaps(FileLock, long, long)
ImmutableMultimap.equals(ImmutableMultimap, Object)
Entity.getPushReaction(Entity)
Path.setCurrentPathLength(Path, int)
Optional.map(Optional, Function)
Point2D.hashCode(Point2D)
ItemRenderer.renderWaterOverlayTexture(ItemRenderer, float)
IScoreCriteria.getRenderType(IScoreCriteria)
NetworkPlayerInfo.getLocationCape(NetworkPlayerInfo)
Channel.bytesBeforeWritable(Channel)
Block.canCollideCheck(Block, IBlockState, boolean)
Particle.setAlphaF(Particle, float)
ImmutableMultiset.copyFromElements(Object[])
EntityLivingBase.canBlockDamageSource(EntityLivingBase, DamageSource)
Builder.orderEntriesByValue(Builder, Comparator)
VillageCollection.countBlocksCanSeeSky(VillageCollection, BlockPos, EnumFacing, int)
SoundManager.access$302(SoundManager, boolean)
CrashReport.populateEnvironment(CrashReport)
ModelBase.setRotationAngles(ModelBase, float, float, float, float, float, float, Entity)
MinecraftServer.setServerOwner(MinecraftServer, String)
Item.isBeaconPayment(Item, ItemStack)
Double.hashCode(Double | double)
Entity.replaceItemInInventory(Entity, int, ItemStack)
GuiScreen.onResize(GuiScreen, Minecraft, int, int)
CompositeByteBuf.writeMedium(CompositeByteBuf, int | CompositeByteBuf, int)
RegistryNamespaced.containsKey(RegistryNamespaced, Object)
Clipboard.removeFlavorListener(Clipboard, FlavorListener)
BufferBuilder.isColorDisabled(BufferBuilder)
VillageCollection.setWorldsForAll(VillageCollection, World)
InetAddress.isAnyLocalAddress(InetAddress)
ClassLoader.loadClass(ClassLoader, String | ClassLoader, String, boolean)
Class.privateGetMethodRecursive(Class, String, Class[], boolean, MethodArray)
BaseCalendar.getGregorianYearFromFixedDate(BaseCalendar, long)
ImmutableMap.get(ImmutableMap, Object)
Component.invalidateIfValid(Component)
Condition.awaitUntil(Condition, Date)
EntityRenderer.createWorldIcon(EntityRenderer)
Style.toString(Style)
LocalTime.get(LocalTime, TemporalField)
JsonArray.addAll(JsonArray, JsonArray)
SpeciesData.speciesDataCachePopulated()
Component.getNextFocusCandidate(Component)
Toolkit.getMouseInfoPeer(Toolkit)
ProgressivePromise.addListener(ProgressivePromise, GenericFutureListener)
MethodHandle.asCollectorChecks(MethodHandle, Class, int)
Map.values(Map)
Point.toString(Point)
String.subSequence(String, int, int)
Promise.syncUninterruptibly(Promise)
ReflectionFactory.newConstructorAccessor(ReflectionFactory, Constructor)
CompositeByteBuf.writeInt(CompositeByteBuf, int | CompositeByteBuf, int)
ImmutableMultimap.isEmpty(ImmutableMultimap)
Component.addNotify(Component)
Toolkit.isAlwaysOnTopSupported(Toolkit)
Package.access$100(String)
ImmutableMultimap.containsEntry(ImmutableMultimap, Object, Object)
Graphics.clipRect(Graphics, int, int, int, int)
CrashReportCategory.addCrashSectionThrowable(CrashReportCategory, String, Throwable)
Logger.log(Logger, Level, Marker, String, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object | Logger, Level, Supplier | Logger, Level, Marker, String, Object, Object | Logger, Level, String, Object, Object, Object, Object, Object | Logger, Level, Marker, String, Throwable | Logger, Level, MessageSupplier, Throwable | Logger, Level, String, Supplier[] | Logger, Level, String, Object, Object, Object | Logger, Level, Marker, String, Object, Object, Object, Object, Object | Logger, Level, Marker, CharSequence, Throwable | Logger, Level, Marker, Object | Logger, Level, Message, Throwable | Logger, Level, Marker, String, Object, Object, Object, Object, Object, Object | Logger, Level, String, Object, Object, Object, Object, Object, Object, Object, Object | Logger, Level, String, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object | Logger, Level, String, Object | Logger, Level, Marker, MessageSupplier, Throwable | Logger, Level, Marker, Supplier, Throwable | Logger, Level, Marker, Message | Logger, Level, Marker, String, Object, Object, Object, Object, Object, Object, Object, Object | Logger, Level, Marker, String | Logger, Level, Marker, String, Object, Object, Object, Object, Object, Object, Object, Object, Object | Logger, Level, String | Logger, Level, CharSequence | Logger, Level, String, Object[] | Logger, Level, MessageSupplier | Logger, Level, Marker, Object, Throwable | Logger, Level, String, Object, Object, Object, Object, Object, Object, Object | Logger, Level, String, Object, Object | Logger, Level, Marker, String, Supplier[] | Logger, Level, Marker, String, Object | Logger, Level, String, Throwable | Logger, Level, String, Object, Object, Object, Object, Object, Object, Object, Object, Object | Logger, Level, Marker, String, Object[] | Logger, Level, Marker, Message, Throwable | Logger, Level, Object, Throwable | Logger, Level, Marker, Supplier | Logger, Level, CharSequence, Throwable | Logger, Level, Supplier, Throwable | Logger, Level, Marker, String, Object, Object, Object, Object | Logger, Level, Marker, String, Object, Object, Object | Logger, Level, Message | Logger, Level, String, Object, Object, Object, Object, Object, Object | Logger, Level, String, Object, Object, Object, Object | Logger, Level, Marker, MessageSupplier | Logger, Level, Object | Logger, Level, Marker, String, Object, Object, Object, Object, Object, Object, Object | Logger, Level, Marker, CharSequence)
WorldBorder.setWarningDistance(WorldBorder, int)
FontStrike.getGlyphOutline(FontStrike, int, float, float)
ChunkCache.getWorldType(ChunkCache)
DragSourceContext.dragOver(DragSourceContext, DragSourceDragEvent)
InetAddress.checkNumericZone(String)
BufferedImage.getGraphics(BufferedImage)
ByteBuf.getIntLE(ByteBuf, int)
Hashtable.compute(Hashtable, Object, BiFunction)
AccessibleComponent.setFont(AccessibleComponent, Font)
Entity.getEntityData(Entity)
InputEvent.isConsumed(InputEvent)
CompositeByteBuf.maxNumComponents(CompositeByteBuf)
Window.getWindowFocusListeners(Window)
ShortBuffer.slice(ShortBuffer)
LootTable.getEmptySlotsRandomized(LootTable, IInventory, Random)
EnumChatVisibility.values()
Container.getHeavyweightContainer(Container)
Field.getAnnotatedType(Field)
Graphics2D.hit(Graphics2D, Rectangle, Shape, boolean)
InputContext.reconvert(InputContext)
URI.access$1002(URI, String)
DoubleBuffer.compareTo(DoubleBuffer, DoubleBuffer | DoubleBuffer, Object)
EntityLiving.setAttackTarget(EntityLiving, EntityLivingBase)
EventDispatchThread.run(EventDispatchThread)
Quaternion.load(Quaternion, FloatBuffer)
Control.getControl(List)
EnumFacing.getName2(EnumFacing)
FileSystemProvider.newAsynchronousFileChannel(FileSystemProvider, Path, Set, ExecutorService, FileAttribute[])
Graphics2D.drawRenderedImage(Graphics2D, RenderedImage, AffineTransform)
Material.setAdventureModeExempt(Material)
BlockPos.getAllInBoxMutable(BlockPos, BlockPos | int, int, int, int, int, int)
WorldServer.sendQueuedBlockEvents(WorldServer)
DifficultyInstance.calculateAdditionalDifficulty(DifficultyInstance, EnumDifficulty, long, long, float)
IntBuffer.compare(int, int)
PlayerChunkMap.overlaps(PlayerChunkMap, int, int, int, int, int)
CompiledChunk.setLayerUsed(CompiledChunk, BlockRenderLayer)
AccessibleTable.getAccessibleRowCount(AccessibleTable)
AttributedCharacterIterator.getRunLimit(AttributedCharacterIterator, Attribute | AttributedCharacterIterator | AttributedCharacterIterator, Set)
FunctionManager.getMaxCommandChainLength(FunctionManager)
StateImplementation.getWeakPower(StateImplementation, IBlockAccess, BlockPos, EnumFacing)
Hashtable.getIterator(Hashtable, int)
Item.createEntity(Item, World, Entity, ItemStack)
EnumFlowerType.getName(EnumFlowerType)
ResourcePackRepository.getResourcePackFiles(ResourcePackRepository)
UserListWhitelist.createEntry(UserListWhitelist, JsonObject)
Hashtable.getOrDefault(Hashtable, Object, Object)
FramePeer.getBoundsPrivate(FramePeer)
World.getSunBrightnessFactor(World, float)
BufferBuilder.getDistanceSq(FloatBuffer, float, float, float, int, int)
GuiScreen.setGuiSize(GuiScreen, int, int)
MemberName.message(MemberName)
MethodType.hasWrappers(MethodType)
Block.getEnchantPowerBonus(Block, World, BlockPos)
URI.getHost(URI)
Hashtable.writeObject(Hashtable, ObjectOutputStream)
LocalTime.atDate(LocalTime, LocalDate)
Dialog.interruptBlocking(Dialog)
BigDecimal.commonNeedIncrement(int, int, int, boolean)
File.getParentFile(File)
EntityLivingBase.jump(EntityLivingBase)
MethodHandleInfo.toString(int, Class, String, MethodType)
ImmutableList.construct(Object[])
Minecraft.getBlockColors(Minecraft)
TextureAtlasSprite.resetSprite(TextureAtlasSprite)
Throwable.getStackTraceElement(Throwable, int)
OffsetTime.range(OffsetTime, TemporalField)
Annotation.toString(Annotation)
Reference.isEnqueued(Reference)
NBTTagCompound.getBoolean(NBTTagCompound, String)
LocalTime.plusNanos(LocalTime, long)
Event.controlDown(Event)
EntityPlayer.updateEntityActionState(EntityPlayer)
TimeZone.getSystemTimeZoneID(String)
ModelManager.onResourceManagerReload(ModelManager, IResourceManager)
EnclosingMethodInfo.getDescriptor(EnclosingMethodInfo)
Container.isFocusCycleRoot(Container | Container, Container)
Quaternion.scale(float, Quaternion, Quaternion | Quaternion, float)
Period.create(int, int, int)
Block.canProvidePower(Block, IBlockState)
EntityItemFrame.getCollisionBorderSize(EntityItemFrame)
ByteBuf.duplicate(ByteBuf)
BigInteger.getUpper(BigInteger, int)
World.getThunderStrength(World, float)
IPlayerFileData.readPlayerData(IPlayerFileData, EntityPlayer)
GlyphVector.getLogicalBounds(GlyphVector)
Component.location(Component)
URI.access$2302(URI, String)
WorldType.getCloudHeight(WorldType)
EntityPlayer.sendCommandFeedback(EntityPlayer)
String.codePointBefore(String, int)
PlayerAdvancements.load(PlayerAdvancements)
Window.getOwner(Window)
LambdaForm.customize(LambdaForm, MethodHandle)
AccessibleContext.getAccessibleIcon(AccessibleContext)
AttributeValues.getRunDirection(AttributeValues)
Window.disposeImpl(Window)
ItemTransformVec3f.hashCode(ItemTransformVec3f)
EntityPlayer.canUseCommandBlock(EntityPlayer)
Loader.getClassPath(Loader)
URLConnection.setDefaultRequestProperty(String, String)
RenderGlobal.setDisplayListEntitiesDirty(RenderGlobal)
String.matches(String, String)
VolatileImage.getGraphics(VolatileImage)
Container.layout(Container)
Tutorial.openInventory(Tutorial)
Tutorial.reload(Tutorial)
Block.isTranslucent(Block, IBlockState)
LambdaForm.prepare(LambdaForm)
Item.getMetadata(Item, ItemStack | Item, int)
Toolkit.countAWTEventListeners(Toolkit, long)
ByteBuf.writeIntLE(ByteBuf, int)
String.intern(String)
ClickEvent.toString(ClickEvent)
Block.hasCustomBreakingProgress(Block, IBlockState)
LayoutManager.layoutContainer(LayoutManager, Container)
ResourcePackRepository.deleteOldServerResourcesPacks(ResourcePackRepository)
Manifest.make72Safe(StringBuffer)
Thread.holdsLock(Object)
Map.equals(Map, Object)
Executable.getParameters(Executable)
Block.isBurning(Block, IBlockAccess, BlockPos)
GraphicsDevice.getDefaultConfiguration(GraphicsDevice)
Properties.stringPropertyNames(Properties)
InventoryEnderChest.saveInventoryToNBT(InventoryEnderChest)
World.canBlockSeeSky(World, BlockPos)
Path.toString(Path)
AxisAlignedBB.getCenter(AxisAlignedBB)
AnnotationType.toString(AnnotationType)
WindowPeer.setModalBlocked(WindowPeer, Dialog, boolean)
FileChannel.transferFrom(FileChannel, ReadableByteChannel, long, long)
FontRenderer.getBidiFlag(FontRenderer)
TextureAtlasSprite.getMaxV(TextureAtlasSprite)
SpeciesData.initForBootstrap(SpeciesData)
TextureAtlasSprite.getMaxU(TextureAtlasSprite)
LocalTime.withNano(LocalTime, int)
Block.addLandingEffects(Block, IBlockState, WorldServer, BlockPos, IBlockState, EntityLivingBase, int)
AdvancementList.clear(AdvancementList)
ThreadGroup.suspend(ThreadGroup)
AttributeValues.setNumericShaping(AttributeValues, NumericShaper)
ClassSignature.getSuperInterfaces(ClassSignature)
LocalDate.ofYearDay(int, int)
VertexFormatElement.hashCode(VertexFormatElement)
ImmutableCollection.removeIf(ImmutableCollection, Predicate)
NetHandlerPlayClient.handleUseBed(NetHandlerPlayClient, SPacketUseBed)
LongStream.iterator(LongStream | LongStream)
RecipeBookServer.remove(RecipeBookServer, List, EntityPlayerMP)
Locale.getISO3Country(Locale)
ZoneRules.findYear(ZoneRules, long, ZoneOffset)
ProfileEntry.getGameProfile(ProfileEntry)
RenderChunk.getVertexBufferByLayer(RenderChunk, int)
World.canBlockFreeze(World, BlockPos, boolean)
Period.minusDays(Period, long)
Entity.isInsideOfMaterial(Entity, Material)
LambdaForm.argumentTypesMatch(String, Object[])
LanguageManager.isCurrentLanguageBidirectional(LanguageManager)
EntityPlayer.replaceItemInInventory(EntityPlayer, int, ItemStack)
Iterable.spliterator(Iterable)
Field.setLong(Field, Object, long)
BasicFileAttributes.fileKey(BasicFileAttributes)
VillageCollection.getNearestVillage(VillageCollection, BlockPos, int)
EntityMinecart.canBeRidden(EntityMinecart)
SoundHandler.stopSound(SoundHandler, ISound)
LocalTime.plusMinutes(LocalTime, long)
FontLineMetrics.getBaselineIndex(FontLineMetrics)
UserListBans.createEntry(UserListBans, JsonObject)
EntityMinecart.getCartItem(EntityMinecart)
WorldInfo.access$1300(WorldInfo)
File.getPath(File)
ImmutableList.sortedCopyOf(Iterable | Comparator, Iterable)
LocalDate.from(TemporalAccessor)
MobSpawnerBaseLogic.resetTimer(MobSpawnerBaseLogic)
ShaderUniform.setUniformLocation(ShaderUniform, int)
Name.index(Name)
TemplateManager.readTemplate(TemplateManager, ResourceLocation)
SpeciesData.fieldSignature(SpeciesData)
EnumFlowerType.toString(EnumFlowerType)
ColorSpace.fromRGB(ColorSpace, float[])
Block.getEnableStats(Block)
CapabilityDispatcher.hasCapability(CapabilityDispatcher, Capability, EnumFacing)
EventExecutorGroup.terminationFuture(EventExecutorGroup)
AccessibleRelationSet.get(AccessibleRelationSet, String)
ByteBuf.getMediumLE(ByteBuf, int)
MinecraftServer.isSnooperEnabled(MinecraftServer)
Window.pack(Window)
ByteBuf.compareTo(ByteBuf, Object | ByteBuf, ByteBuf)
ChannelOutboundBuffer.setWritable(ChannelOutboundBuffer, boolean)
MinecraftServer.clearCurrentTask(MinecraftServer)
Component.removeInputMethodListener(Component, InputMethodListener)
Unsafe.flush(Unsafe)
EntityPlayerMP.openBook(EntityPlayerMP, ItemStack, EnumHand)
EntityPlayer.addScore(EntityPlayer, int)
ZoneOffset.buildId(int)
Executable.getAnnotationBytes(Executable)
Minecraft.resize(Minecraft, int, int)
Class.getDeclaredAnnotationMap(Class)
BlockFaceShape.valueOf(String)
PropertyMap.delegate(PropertyMap | PropertyMap)
LocalDateTime.minusDays(LocalDateTime, long)
IMinecartCollisionHandler.getCollisionBox(IMinecartCollisionHandler, EntityMinecart, Entity)
LocalDateTime.getLong(LocalDateTime, TemporalField)
URI.getRawUserInfo(URI)
Range.access$800(int)
Locale.access$800(String, String, String, String)
BlockRendererDispatcher.getBlockModelRenderer(BlockRendererDispatcher)
EntityMinecart.hasDisplayTile(EntityMinecart)
Font.getFamily(Font | Font, Locale)
Component.getAccessibleStateSet(Component)
LongStream.anyMatch(LongStream, LongPredicate)
MemberName.asConstructor(MemberName)
VillageDoorInfo.getInsideDirection(VillageDoorInfo)
CompiledChunk.isVisible(CompiledChunk, EnumFacing, EnumFacing)
Font2D.getNumGlyphs(Font2D)
Component.lightweightPrint(Component, Graphics)
AtomicInteger.doubleValue(AtomicInteger)
FontMetrics.charWidth(FontMetrics, int | FontMetrics, char)
Date.getMinutes(Date)
Entity.isLiquidPresentInAABB(Entity, AxisAlignedBB)
Biome.getRandomWorldGenForGrass(Biome, Random)
Point2D.equals(Point2D, Object)
ZonedDateTime.withEarlierOffsetAtOverlap(ZonedDateTime | ZonedDateTime)
DoubleStream.spliterator(DoubleStream | DoubleStream)
MenuItemPeer.setLabel(MenuItemPeer, String)
IChunkGenerator.recreateStructures(IChunkGenerator, Chunk, int, int)
SoundManager.removeListener(SoundManager, ISoundEventListener)
EntityItemFrame.notifyDataManagerChange(EntityItemFrame, DataParameter)
EntityLiving.updateDistance(EntityLiving, float, float)
CriterionProgress.toString(CriterionProgress)
Promise.trySuccess(Promise, Object)
Font.getSize2D(Font)
Wrapper.findPrimitiveType(Class)
ByteBuf.hasMemoryAddress(ByteBuf)
CombatTracker.calculateFallSuffix(CombatTracker)
NBTTagCompound.getFloat(NBTTagCompound, String)
Item.getFontRenderer(Item, ItemStack)
EntityLivingBase.dropEquipment(EntityLivingBase, boolean, int)
PlayerChunkMap.updateMovingPlayer(PlayerChunkMap, EntityPlayerMP)
Random.resetSeed(Random, long)
MethodTypeForm.hasLongPrimitives(MethodTypeForm)
World.isBlockLoaded(World, BlockPos | World, BlockPos, boolean)
FloatBuffer.hashCode(FloatBuffer)
Language.compareTo(Language, Language | Language, Object)
PlayerList.getPlayerStatsFile(PlayerList, EntityPlayer)
BufferBuilder.nextVertexFormatIndex(BufferBuilder)
Era.query(Era, TemporalQuery)
Calendar.get(Calendar, int)
ZoneOffset.getId(ZoneOffset)
BlockRenderLayer.values()
Proxy.hashCode(Proxy)
Channel.isOpen(Channel | Channel)
ChannelOutboundBuffer.fireChannelWritabilityChanged(ChannelOutboundBuffer, boolean)
Locale.getDisplayString(Locale, String, Locale, int)
Component.removePropertyChangeListener(Component, PropertyChangeListener | Component, String, PropertyChangeListener)
LongBuffer.allocate(int)
FontLineMetrics.equals(FontLineMetrics, Object)
Block.setCreativeTab(Block, CreativeTabs)
MinecraftServer.sendMessage(MinecraftServer, ITextComponent)
Properties.setProperty(Properties, String, String)
EntityItem.setDefaultPickupDelay(EntityItem)
Thread.countStackFrames(Thread)
Month.plus(Month, long)
CooldownTracker.hasCooldown(CooldownTracker, Item)
OffsetTime.plus(OffsetTime, TemporalAmount | OffsetTime, long, TemporalUnit | OffsetTime, long, TemporalUnit | OffsetTime, TemporalAmount)
LocalDateTime.withYear(LocalDateTime, int)
FrameTimer.getFrames(FrameTimer)
Raster.getTransferType(Raster)
TileEntity.getDisplayName(TileEntity)
DragSourceContext.getComponent(DragSourceContext)
Period.withDays(Period, int)
Field.setDouble(Field, Object, double)
Block.isStickyBlock(Block, IBlockState)
LocaleExtensions.getKeys(LocaleExtensions)
TextureManager.getTexture(TextureManager, ResourceLocation)
InetAddressImpl.getHostByAddr(InetAddressImpl, byte[])
ImmutableMultimap.createEntries(ImmutableMultimap | ImmutableMultimap)
EntityLivingBase.notifyDataManagerChange(EntityLivingBase, DataParameter)
Item.updateItemStackNBT(Item, NBTTagCompound)
NBTBase.hashCode(NBTBase)
ChronoZonedDateTime.toEpochSecond(ChronoZonedDateTime)
IChunkLoader.saveChunk(IChunkLoader, World, Chunk)
FloatBuffer.allocate(int)
SpanIterator.getPathBox(SpanIterator, int[])
EntityLivingBase.shouldRiderFaceForward(EntityLivingBase, EntityPlayer)
TileEntity.updateContainingBlockInfo(TileEntity)
MethodTypeForm.canonicalize(MethodType, int, int | Class, int)
Toolkit.createComponent(Toolkit, Component)
BigInteger.firstNonzeroIntNum(BigInteger)
NetworkPlayerInfo.getRenderVisibilityId(NetworkPlayerInfo)
NBTTagCompound.getUniqueId(NBTTagCompound, String)
CreativeTabs.hasRelevantEnchantmentType(CreativeTabs, EnumEnchantmentType)
World.getActualHeight(World)
ShortBuffer.wrap(short[] | short[], int, int)
World.getCloudColour(World, float)
ResourceBundle.clearCache(ClassLoader | )
ItemStack.getRarity(ItemStack)
CompositeByteBuf.writeDouble(CompositeByteBuf, double | CompositeByteBuf, double)
LineMetrics.getBaselineIndex(LineMetrics)
Render.getEntityTexture(Render, Entity)
Entity.sendCommandFeedback(Entity)
Minecraft.populateSearchTreeManager(Minecraft)
Biome.genTerrainBlocks(Biome, World, Random, ChunkPrimer, int, int, double)
ColorSpace.getMinValue(ColorSpace, int)
LocalDateTime.minusMinutes(LocalDateTime, long)
DropTargetContext.removeNotify(DropTargetContext)
Integer.compareTo(Integer, Integer | Integer, Object)
WatchService.poll(WatchService | WatchService, long, TimeUnit)
EntityMinecart.killMinecart(EntityMinecart, DamageSource)
EventExecutor.newSucceededFuture(EventExecutor, Object)
RenderItem.renderItemOverlayIntoGUI(RenderItem, FontRenderer, ItemStack, int, int, String)
LocalDate.until(LocalDate, Temporal, TemporalUnit | LocalDate, ChronoLocalDate | LocalDate, ChronoLocalDate)
Entity.setRenderYawOffset(Entity, float)
LongStream.concat(LongStream, LongStream)
BigInteger.getLowestSetBit(BigInteger)
EntityMinecart.setMaxSpeedAirVertical(EntityMinecart, float)
File.getCanonicalPath(File)
Block.getBlockHardness(Block, IBlockState, World, BlockPos)
LambdaForm.checkInvocationCounter(LambdaForm)
Font.getSize(Font)
World.getGroundAboveSeaLevel(World, BlockPos)
MethodType.explicitCastEquivalentToAsType(MethodType, MethodType | Class, Class)
Path.iterator(Path)
TextureAtlasSprite.updateAnimationInterpolated(TextureAtlasSprite)
ByteBuf.nioBuffers(ByteBuf | ByteBuf, int, int)
Item.registerItem(int, ResourceLocation, Item | int, String, Item)
GuiScreen.mouseClicked(GuiScreen, int, int, int)
ClassLoader.getResource(ClassLoader, String)
ByteBuf.asReadOnly(ByteBuf)
Color.getRGBColorComponents(Color, float[])
Map.size(Map)
Duration.compareTo(Duration, Object | Duration, Duration)
IntStream.limit(IntStream, long)
BigDecimal.unsignedLongCompareEq(long, long)
Entity.getHeldEquipment(Entity)
MapInfo.getPacket(MapInfo, ItemStack)
Component.prepareImage(Component, Image, int, int, ImageObserver | Component, Image, ImageObserver)
Raster.createRaster(SampleModel, DataBuffer, Point)
AffineTransform.setToRotation(AffineTransform, double, double, double, double | AffineTransform, double, double | AffineTransform, double, double, double | AffineTransform, double)
Village.writeVillageDataToNBT(Village, NBTTagCompound)
Component.getPreferredSize(Component)
PlayerList.removeOp(PlayerList, GameProfile)
World.scheduleUpdate(World, BlockPos, Block, int)
AttributeValues.setFamily(AttributeValues, String)
LocalTime.writeReplace(LocalTime)
Future.isCancelled(Future)
Tutorial.handleMovement(Tutorial, MovementInput)
GuiScreen.handleMouseInput(GuiScreen)
Class.copyMethods(Method[])
LongStream.noneMatch(LongStream, LongPredicate)
EnumCreatureType.valueOf(String)
Region.getInstanceXYWH(int, int, int, int)
Package.access$000()
GlyphVector.getGlyphCharIndices(GlyphVector, int, int, int[])
AccessibleSelection.getAccessibleSelectionCount(AccessibleSelection)
TemplateManager.get(TemplateManager, MinecraftServer, ResourceLocation)
Path.setPoint(Path, int, PathPoint)
Optional.toString(Optional | Optional)
ImmutableCollection.addAll(ImmutableCollection, Collection)
FileDialogPeer.setFile(FileDialogPeer, String)
ChannelHandlerContext.fireChannelRead(ChannelHandlerContext, Object)
AccessibleContext.getAccessibleValue(AccessibleContext)
BaseCalendar.getYearLengthInMonths(BaseCalendar, CalendarDate)
File.listRoots()
EntityItem.entityInit(EntityItem)
LambdaForm.nameRefsAreLegal(LambdaForm)
ChronoZonedDateTime.getChronology(ChronoZonedDateTime)
AxisAlignedBB.collideWithYPlane(AxisAlignedBB, double, Vec3d, Vec3d)
Region.getInstanceXYXY(int, int, int, int)
RenderChunk.rebuildChunk(RenderChunk, float, float, float, ChunkCompileTaskGenerator)
CreativeTabs.getTabLabel(CreativeTabs)
Entry.lambda$comparingByKey$bbdbfea9$1(Entry, Entry)
EntityLivingBase.removePotionEffect(EntityLivingBase, Potion)
NBTTagList.getId(NBTTagList)
Minecraft.rightClickMouse(Minecraft)
MemberName.equals(MemberName, Object | MemberName, MemberName)
DropTarget.addNotify(DropTarget, ComponentPeer)
Item.hasContainerItem(Item | Item, ItemStack)
ChannelPipeline.fireChannelActive(ChannelPipeline)
UserListBans.getBannedProfile(UserListBans, String)
RenderChunk.preRenderBlocks(RenderChunk, BufferBuilder, BlockPos)
Calendar.getDisplayName(Calendar, int, int, Locale)
Entry.comparingByValue( | Comparator)
AccessibleText.getCharacterAttribute(AccessibleText, int)
ISnooperInfo.isSnooperEnabled(ISnooperInfo)
OffsetTime.getMinute(OffsetTime)
NibbleArray.getData(NibbleArray)
Component.mixOnShowing(Component)
LambdaFormBuffer.clearDuplicatesAndNulls(LambdaFormBuffer)
EntityPlayer.handleStatusUpdate(EntityPlayer, byte)
Class.desiredAssertionStatus0(Class)
Range.getNumericBase(Range)
LocalTime.toSecondOfDay(LocalTime)
TileEntity.getKey(Class)
WindowPeer.toBack(WindowPeer)
World.playSound(World, EntityPlayer, double, double, double, SoundEvent, SoundCategory, float, float | World, double, double, double, SoundEvent, SoundCategory, float, float, boolean | World, EntityPlayer, BlockPos, SoundEvent, SoundCategory, float, float)
PlayerChunkMap.markBlockForUpdate(PlayerChunkMap, BlockPos)
MappedByteBuffer.load(MappedByteBuffer)
ThreadLocal.nextHashCode()
GameRules.getBoolean(GameRules, String)
NetHandlerPlayClient.handleStatistics(NetHandlerPlayClient, SPacketStatistics)
URI.access$2202(URI, String)
IChunkGenerator.generateChunk(IChunkGenerator, int, int)
ReflectionFactory.readObjectForSerialization(ReflectionFactory, Class)
Scoreboard.removeObjectiveFromEntity(Scoreboard, String, ScoreObjective)
Window.getMostRecentFocusOwner(Window)
EntityPlayer.addItemStackToInventory(EntityPlayer, ItemStack)
ByteBuf.setIndex(ByteBuf, int, int)
MethodTypeForm.assertIsBasicType(MethodTypeForm)
ByteOrder.toString(ByteOrder)
Rectangle2D.intersectsLine(Rectangle2D, double, double, double, double | Rectangle2D, Line2D)
Container.clearCurrentFocusCycleRootOnHide(Container)
ByteBuffer.wrap(byte[] | byte[], int, int)
ScrollPanePeer.getHScrollbarHeight(ScrollPanePeer)
ByteBuf.readCharSequence(ByteBuf, int, Charset)
LangReflectAccess.getConstructorSlot(LangReflectAccess, Constructor)
WorldInfo.setHardcore(WorldInfo, boolean)
Map.put(Map, Object, Object)
ImmutableMap.createEntrySet(ImmutableMap)
OffsetDateTime.compareInstant(OffsetDateTime, OffsetDateTime)
LocaleExtensions.toString(LocaleExtensions)
BigDecimal.roundedTenPower(int, int, int, int)
ColorModel.coerceData(ColorModel, WritableRaster, boolean)
FloatBuffer.put(FloatBuffer, int, float | FloatBuffer, FloatBuffer | FloatBuffer, float | FloatBuffer, float[] | FloatBuffer, float[], int, int)
Method.hashCode(Method)
Boolean.parseBoolean(String)
WorldInfo.access$1200(WorldInfo)
ImmutableTable.writeReplace(ImmutableTable)
NetHandlerPlayClient.handleHeldItemChange(NetHandlerPlayClient, SPacketHeldItemChange)
OffsetTime.minusNanos(OffsetTime, long)
Component.createVolatileImage(Component, int, int | Component, int, int, ImageCapabilities)
Stream.iterate(Object, UnaryOperator)
Duration.abs(Duration)
Field.acquireFieldAccessor(Field, boolean)
EntityPlayer.trySleep(EntityPlayer, BlockPos)
ImmutableList.subListUnchecked(ImmutableList, int, int)
LocalDate.hashCode(LocalDate)
EntityPlayer.resetCooldown(EntityPlayer)
Dialog.setModalityType(Dialog, ModalityType)
ConstantPool.getStringAt0(ConstantPool, Object, int)
TimeZone.useDaylightTime(TimeZone)
MinecraftServer.getResourcePackUrl(MinecraftServer)
Biome.getSpawningChance(Biome)
Component.setMinimumSize(Component, Dimension)
PlayerAdvancements.save(PlayerAdvancements)
BiomeProvider.cleanupCache(BiomeProvider)
EntityPlayer.setLeftShoulderEntity(EntityPlayer, NBTTagCompound)
ColorModel.getGreen(ColorModel, int | ColorModel, Object)
IResource.getResourcePackName(IResource)
LocalDateTime.isAfter(LocalDateTime, ChronoLocalDateTime)
LocalTime.ofSecondOfDay(long)
RenderLivingBase.getMainModel(RenderLivingBase)
SortedSet.subSet(SortedSet, Object, Object)
Level.forName(String, int)
LocalTime.withHour(LocalTime, int)
WorldServer.findNearestStructure(WorldServer, String, BlockPos, boolean)
DataFixer.registerVanillaWalker(DataFixer, IFixType, IDataWalker)
Function.lambda$identity$2(Object)
Entity.setPositionAndUpdate(Entity, double, double, double)
FileSystemProvider.isSameFile(FileSystemProvider, Path, Path)
LongBuffer.get(LongBuffer, int | LongBuffer, long[] | LongBuffer, long[], int, int | LongBuffer)
TypeAdapter.toJson(TypeAdapter, Writer, Object | TypeAdapter, Object)
Minecraft.createDisplay(Minecraft)
Style.setClickEvent(Style, ClickEvent)
JsonPrimitive.getAsBooleanWrapper(JsonPrimitive)
MinecraftServer.lambda$updateTimeLightAndEntities$0(WorldServer)
Integer.shortValue(Integer)
JsonObject.equals(JsonObject, Object)
TextureAtlasSprite.allocateFrameTextureData(TextureAtlasSprite, int)
MemberName.asSetter(MemberName)
Level.name(Level)
FramePeer.setMaximizedBounds(FramePeer, Rectangle)
Container.getDropTargetEventTarget(Container, int, int, boolean)
BigDecimal.getValueString(BigDecimal, int, String, int)
ImmutableMultimap.size(ImmutableMultimap)
WorldBorder.getDiameter(WorldBorder)
ShaderManager.getShaderUniformOrDefault(ShaderManager, String)
EntityItemFrame.isInRangeToRenderDist(EntityItemFrame, double)
MethodTypeSignature.accept(MethodTypeSignature, Visitor)
WorldInfo.getBorderLerpTarget(WorldInfo)
IntBuffer.compareTo(IntBuffer, IntBuffer | IntBuffer, Object)
Component.getNativeContainer(Component)
ItemStack.setRepairCost(ItemStack, int)
ImmutableSetMultimap.flatteningToImmutableSetMultimap(Function, Function)
ListIterator.nextIndex(ListIterator)
EntityPlayer.setReducedDebug(EntityPlayer, boolean)
Chunk.getTopFilledSegment(Chunk)
MethodType.invokerType(MethodType)
ItemStack.deserializeNBT(ItemStack, NBTBase | ItemStack, NBTTagCompound)
CompositeByteBuf.writeChar(CompositeByteBuf, int | CompositeByteBuf, int)
Color.getRGBComponents(Color, float[])
EnumCreatureType.getAnimal(EnumCreatureType)
DragGestureEvent.getDragAction(DragGestureEvent)
NBTTagCompound.copy(NBTTagCompound | NBTTagCompound)
InputStream.read(InputStream, byte[] | InputStream | InputStream, byte[], int, int)
ModelBase.render(ModelBase, Entity, float, float, float, float, float, float)
EntityPlayer.getName(EntityPlayer)
Thread.interrupt0(Thread)
ClickEvent.getValue(ClickEvent)
EntityPlayer.setInWeb(EntityPlayer)
Sound.getPitch(Sound)
ChannelConfig.setOption(ChannelConfig, ChannelOption, Object)
ByteBuf.getBoolean(ByteBuf, int)
Minecraft.stopIntegratedServer()
Biome.getIdForBiome(Biome)
Calendar.getMillisOf(Calendar)
Window.hide(Window)
InetAddress.holder(InetAddress)
World.addWorldInfoToCrashReport(World, CrashReport)
WritableRaster.createWritableChild(WritableRaster, int, int, int, int, int, int, int[])
TileEntity.getUpdatePacket(TileEntity)
Iterable.iterator(Iterable)
Range.access$900(Set)
Chunk.setLightPopulated(Chunk, boolean)
FontLineMetrics.getNumChars(FontLineMetrics)
EnumFacing.getHorizontalIndex(EnumFacing)
AccessibleComponent.getFontMetrics(AccessibleComponent, Font)
ImmutableMultiset.createAsList(ImmutableMultiset)
AttributeValues.getSize(AttributeValues)
FocusTraversalPolicy.getLastComponent(FocusTraversalPolicy, Container)
VolatileImage.getCapabilities(VolatileImage)
ItemModelMesher.getItemModel(ItemModelMesher, Item, int | ItemModelMesher, ItemStack)
ChronoPeriod.toString(ChronoPeriod)
Chunk.getBiome(Chunk, BlockPos, BiomeProvider)
ChannelOutboundBuffer.removeEntry(ChannelOutboundBuffer, Entry)
Village.setWorld(Village, World)
Item.onUsingTick(Item, ItemStack, EntityLivingBase, int)
EntityLivingBase.swingArm(EntityLivingBase, EnumHand)
Lookup.unreflectGetter(Lookup, Field)
EntityLiving.processInteract(EntityLiving, EntityPlayer, EnumHand)
GenLayer.selectModeOrRandom(GenLayer, int, int, int, int)
Calendar.setFieldsComputed(Calendar, int)
Package.getImplementationVendor(Package)
BlockModelShapes.registerAllBlocks(BlockModelShapes)
Entity.canTriggerWalking(Entity)
ItemStack.hasCapability(ItemStack, Capability, EnumFacing)
EntityLivingBase.writeEntityToNBT(EntityLivingBase, NBTTagCompound)
Template.transformedBlockPos(PlacementSettings, BlockPos | BlockPos, Mirror, Rotation)
NonNullList.clear(NonNullList)
Block.lambda$static$0()
ISaveFormat.deleteWorldDirectory(ISaveFormat, String)
Dialog.modalShow(Dialog)
RenderLivingBase.setDoRenderBrightness(RenderLivingBase, EntityLivingBase, float)
LocaleExtensions.isValidUnicodeLocaleKey(String)
Entity.moveRelative(Entity, float, float, float, float)
SoundManager.resumeAllSounds(SoundManager)
MenuBarPeer.delMenu(MenuBarPeer, int)
Period.plusDays(Period, long)
AffineTransform.getDeterminant(AffineTransform)
Component.isEnabled(Component)
ListenerList.unregister(ListenerList, int, IEventListener)
ZonedDateTime.minusDays(ZonedDateTime, long)
PotionEffect.getIsPotionDurationMax(PotionEffect)
EntityLiving.getAmbientSound(EntityLiving)
EventQueue.coalescePeerEvent(EventQueue, PeerEvent)
EntityRenderer.setFogColorBuffer(EntityRenderer, float, float, float, float)
RenderChunk.getBlockPosOffset16(RenderChunk, EnumFacing)
PotionEffect.getPotion(PotionEffect)
Locale.getISOLanguages()
URI.appendEscape(StringBuffer, byte)
OffsetDateTime.toEpochSecond(OffsetDateTime)
World.getPendingBlockUpdates(World, StructureBoundingBox, boolean | World, Chunk, boolean)
URLStreamHandler.sameFile(URLStreamHandler, URL, URL)
Locale.getUnicodeLocaleAttributes(Locale)
Item.canDestroyBlockInCreative(Item, World, BlockPos, ItemStack, EntityPlayer)
Locale.access$700(Locale)
Lookup.checkSpecialCaller(Lookup, Class)
Font2D.getMissingGlyphCode(Font2D)
GenericsFactory.makeArrayType(GenericsFactory, Type)
Date.setTime(Date, long)
Block.getBeaconColorMultiplier(Block, IBlockState, World, BlockPos, BlockPos)
Locale.getDisplayVariant(Locale, Locale | Locale)
ImmutableSet.toImmutableSet()
LocalTime.plusSeconds(LocalTime, long)
ByteBuf.writeByte(ByteBuf, int)
EnumUsage.preDraw(EnumUsage, VertexFormat, int, int, ByteBuffer)
Chunk.createNewTileEntity(Chunk, BlockPos)
Method.getAnnotationBytes(Method)
String.charAt(String, int)
Entity.isOffsetPositionInLiquid(Entity, double, double, double)
URI.compareIgnoringCase(String, String)
EntityRenderer.access$000(EntityRenderer)
MinecraftServer.getDataDirectory(MinecraftServer)
ImmutableList.remove(ImmutableList, int)
NetHandlerPlayClient.handleBlockBreakAnim(NetHandlerPlayClient, SPacketBlockBreakAnim)
ReflectionFactory.getExecutableTypeAnnotationBytes(ReflectionFactory, Executable)
AWTEvent.getID(AWTEvent)
ChronoZonedDateTime.equals(ChronoZonedDateTime, Object)
NumericShaper.isContextual(NumericShaper)
BufferBuilder.lightmap(BufferBuilder, int, int)
ZonedDateTime.plusYears(ZonedDateTime, long)
GraphicAttribute.getOutline(GraphicAttribute, AffineTransform)
VertexFormatElement.getUsage(VertexFormatElement)
MethodHandle.intrinsicName(MethodHandle)
NodeProcessor.postProcess(NodeProcessor)
ByteBuffer.asIntBuffer(ByteBuffer)
MethodHandle.asSpreaderChecks(MethodHandle, Class, int)
ByteBuf.getUnsignedByte(ByteBuf, int)
DropTargetContext.createTransferableProxy(DropTargetContext, Transferable, boolean)
PathNavigate.setSpeed(PathNavigate, double)
Future.getNow(Future)
URLConnection.connect(URLConnection)
ZonedDateTime.truncatedTo(ZonedDateTime, TemporalUnit)
Component.getAccessibleContext(Component)
Factory.resolveOrFail(Factory, byte, MemberName, Class, Class)
SpeciesData.getterFunction(SpeciesData, int)
AttributeModifier.getAmount(AttributeModifier)
PlayerProfileCache.getEntriesWithLimit(PlayerProfileCache, int)
Style.access$100(Style)
MapData.getMapPacket(MapData, ItemStack, World, EntityPlayer)
ShaderUniform.getShaderName(ShaderUniform)
Locale.getScript(Locale)
Container.invalidateTree(Container)
AdvancementProgress.serializeToNetwork(AdvancementProgress, PacketBuffer)
Entity.getTeleportDirection(Entity)
NetworkPlayerInfo.getGameType(NetworkPlayerInfo)
CreativeTabs.getTabPage(CreativeTabs)
WorldInfo.getCleanWeatherTime(WorldInfo)
EnumFacing.byHorizontalIndex(int)
Item.setHarvestLevel(Item, String, int)
DamageSource.isUnblockable(DamageSource)
VillageCollection.addNewDoorsToVillageOrCreateVillage(VillageCollection)
CanvasPeer.getAppropriateGraphicsConfiguration(CanvasPeer, GraphicsConfiguration)
ItemStack.onCrafting(ItemStack, World, EntityPlayer, int)
EntityPlayerMP.getPlayerIP(EntityPlayerMP)
ExtendedBlockStorage.getData(ExtendedBlockStorage)
Lookup.getDirectMethodCommon(Lookup, byte, Class, MemberName, boolean, boolean, Class)
Style.access$102(Style, Boolean)
BigInteger.intLength(BigInteger)
RecipeBookServer.init(RecipeBookServer, EntityPlayerMP)
Instant.toEpochMilli(Instant)
NetHandlerPlayClient.processChunkUnload(NetHandlerPlayClient, SPacketUnloadChunk)
Component.contains(Component, Point | Component, int, int)
Chunk.isTerrainPopulated(Chunk)
ResourceBundle.setParent(ResourceBundle, ResourceBundle)
DragSourceContext.getCursor(DragSourceContext)
ChunkProviderServer.getPossibleCreatures(ChunkProviderServer, EnumCreatureType, BlockPos)
NetHandlerPlayClient.handleEntityEffect(NetHandlerPlayClient, SPacketEntityEffect)
WorldServer.onEntityRemoved(WorldServer, Entity)
ResourceLocation.getNamespace(ResourceLocation)
Entry.hashCode(Entry | Entry | Entry)
Path.normalize(Path)
EnumFacing.getOpposite(EnumFacing)
NumericShaper.getHighBit(int)
Package.isAnnotationPresent(Package, Class)
FileLock.isShared(FileLock)
Random.doubles(Random, long | Random, double, double | Random, long, double, double | Random)
Potion.shouldRender(Potion, PotionEffect)
WatchKey.cancel(WatchKey)
VillageDoorInfo.setIsDetachedFromVillageFlag(VillageDoorInfo, boolean)
JsonReader.isLenient(JsonReader)
Instance.render(Instance, boolean)
MemberName.changeReferenceKind(MemberName, byte, byte)
GuiScreen.addButton(GuiScreen, GuiButton)
ChronoPeriod.getChronology(ChronoPeriod)
IntegratedServer.setDifficultyForAllWorlds(IntegratedServer, EnumDifficulty)
BlockStateContainer.getDataForNBT(BlockStateContainer, byte[], NibbleArray)
Type.getName(Type)
URI.getRawPath(URI)
InputEvent.isMetaDown(InputEvent)
ZoneRules.findOffsetInfo(ZoneRules, LocalDateTime, ZoneOffsetTransition)
Entity.performHurtAnimation(Entity)
EntityLivingBase.canBeCollidedWith(EntityLivingBase)
Throwable.getOurStackTrace(Throwable)
SoundHandler.access$000(SoundHandler)
EntityPlayerMP.setPositionAndUpdate(EntityPlayerMP, double, double, double)
WorldServer.updateAllPlayersSleepingFlag(WorldServer)
ThreadGroup.checkParentAccess(ThreadGroup)
Minecraft.displayDebugInfo(Minecraft, long)
EntityPlayerMP.onDeath(EntityPlayerMP, DamageSource)
EntityPlayer.getBedLocation(EntityPlayer | EntityPlayer, int)
BigDecimal.longMultiplyPowerTen(long, int)
File.toString(File)
Component.enable(Component | Component, boolean)
IsoChronology.getId(IsoChronology)
Window.toBack(Window)
Random.internalNextLong(Random, long, long)
ReentrantLock.newCondition(ReentrantLock)
BaseStream.isParallel(BaseStream)
JsonObject.hashCode(JsonObject)
String.replace(String, char, char | String, CharSequence, CharSequence)
Field.setByte(Field, Object, byte)
ArrayList.clear(ArrayList)
ZonedDateTime.withHour(ZonedDateTime, int)
Float.outcode(Float, double, double)
PathIterator.isDone(PathIterator)
Rectangle.contains(Rectangle, Rectangle | Rectangle, Point | Rectangle, int, int | Rectangle, int, int, int, int)
SampleModel.getDataType(SampleModel)
OffsetDateTime.from(TemporalAccessor)
LocalDateTime.ofInstant(Instant, ZoneId)
Entity.attackEntityFrom(Entity, DamageSource, float)
CompositeByteBuf._getUnsignedMedium(CompositeByteBuf, int)
GlyphVector.getGlyphPosition(GlyphVector, int)
Set.equals(Set, Object)
CrashReport.getCrashCause(CrashReport)
ReflectionFactory.hasStaticInitializerForSerialization(ReflectionFactory, Class)
BigDecimal.bigMultiplyPowerTen(BigDecimal, int | BigInteger, int | long, int)
ChannelFuture.removeListeners(ChannelFuture, GenericFutureListener[])
Toolkit.getScreenInsets(Toolkit, GraphicsConfiguration)
MemberName.getDeclaringClass(MemberName)
TextureAtlasSprite.interpolateColor(TextureAtlasSprite, double, int, int)
Biome.getMutationForBiome(Biome)
URL.readObject(URL, ObjectInputStream)
ByteBufAllocator.buffer(ByteBufAllocator, int, int | ByteBufAllocator, int | ByteBufAllocator)
BigInteger.implMulAddCheck(int[], int[], int, int, int)
Constructor.specificToGenericStringHeader(Constructor, StringBuilder)
CreativeTabs.getRelevantEnchantmentTypes(CreativeTabs)
AWTEvent.toString(AWTEvent)
BufferBuilder.getBufferSize(BufferBuilder)
BigInteger.montgomerySquare(int[], int[], int, long, int[])
BiomeDecorator.decorate(BiomeDecorator, World, Random, Biome, BlockPos)
Item.hasEffect(Item, ItemStack)
Builder.setCount(Builder, Object, int)
MethodType.wrap(MethodType)
Minecraft.runTickKeyboard(Minecraft)
ModelBase.setTextureOffset(ModelBase, String, int, int)
Channel.flush(Channel)
ByteBuffer.getInt(ByteBuffer, int | ByteBuffer)
InetAddress.toString(InetAddress)
Class.getDeclaringClass(Class)
AbstractStringBuilder.deleteCharAt(AbstractStringBuilder, int)
WorldServer.createChunkProvider(WorldServer)
BoundMethodHandle.internalProperties(BoundMethodHandle)
PlayerChunkMap.getEntry(PlayerChunkMap, int, int)
ResourcePackRepository.checkHash(ResourcePackRepository, String, File)
Double.compare(double, double)
ShortBuffer.get(ShortBuffer | ShortBuffer, short[], int, int | ShortBuffer, short[] | ShortBuffer, int)
Entity.processInitialInteract(Entity, EntityPlayer, EnumHand)
ThreadLocalMap.remove(ThreadLocalMap, ThreadLocal)
Long.rotateRight(long, int)
CapabilityDispatcher.areCompatible(CapabilityDispatcher, CapabilityDispatcher)
PlayerList.removePlayerFromWhitelist(PlayerList, GameProfile)
Field.getInt(Field, Object)
Entity.setDropItemsWhenDead(Entity, boolean)
Field.declaredAnnotations(Field)
ZoneOffset.writeReplace(ZoneOffset)
InetAddress.getByName(String, InetAddress | String)
Loader.findResource(Loader, String, boolean)
GameSettings.isUsingNativeTransport(GameSettings)
EntityItem.getThrower(EntityItem)
NetHandlerPlayClient.handleEntityVelocity(NetHandlerPlayClient, SPacketEntityVelocity)
World.notifyBlockUpdate(World, BlockPos, IBlockState, IBlockState, int)
Material.blocksMovement(Material)
PlayerChunkMap.removeEntry(PlayerChunkMap, PlayerChunkMapEntry)
CooldownTracker.tick(CooldownTracker)
ZonedDateTime.resolveInstant(ZonedDateTime, LocalDateTime)
FrameType.getIcon(FrameType)
LocalDate.resolvePreviousValid(int, int, int)
AttributeValues.setPosture(AttributeValues, float)
MinecraftServer.getTickCounter(MinecraftServer)
Font2D.setRank(Font2D, int)
BlockPos.north(BlockPos, int | BlockPos)
FloatBuffer.asReadOnlyBuffer(FloatBuffer)
BigDecimal.divideAndRemainder(BigDecimal, BigDecimal | BigDecimal, BigDecimal, MathContext)
Builder.addAll(Builder, Iterable | Builder, Iterable | Builder, Iterable | Builder, Iterable | Builder, Iterator | Builder, Iterable | Builder, Iterator | Builder, Iterator | Builder, Iterable | Builder, Iterable | Builder, Iterator | Builder, Iterator | Builder, Iterator | Builder, Iterator)
MemberName.isInvocable(MemberName)
ZoneOffsetTransition.getOffsetBefore(ZoneOffsetTransition)
NonNullList.withSize(int, Object)
Toolkit.isDynamicLayoutActive(Toolkit)
ImmutableMultiset.createEntrySet(ImmutableMultiset)
Component.getGraphics_NoClientCode(Component)
Integer.intValue(Integer)
MinecraftServer.serverIsInRunLoop(MinecraftServer)
Container.preferredSize(Container)
FunctionManager.access$100(FunctionManager)
Toolkit.mapInputMethodHighlight(Toolkit, InputMethodHighlight)
EventQueue.access$000(EventQueue)
RenderChunk.makeCompileTaskTransparency(RenderChunk)
Class.toClass(Type)
Component.mouseDrag(Component, Event, int, int)
URI.access$3000()
StateImplementation.equals(StateImplementation, Object)
LocalDateTime.readObject(LocalDateTime, ObjectInputStream)
ImmutableMap.replace(ImmutableMap, Object, Object | ImmutableMap, Object, Object, Object)
ChunkProviderServer.isInsideStructure(ChunkProviderServer, World, String, BlockPos)
PlatformLogger.config(PlatformLogger, String | PlatformLogger, String, Object[] | PlatformLogger, String, Throwable)
OffsetDateTime.plusDays(OffsetDateTime, long)
GlyphVector.getGlyphMetrics(GlyphVector, int)
EntityPlayerMP.markPlayerActive(EntityPlayerMP)
BufferedImage.getNumXTiles(BufferedImage)
Constructor.getAnnotatedReceiverType(Constructor)
PlayerProfileCache.getByUUID(PlayerProfileCache, UUID)
LocaleExtensions.hashCode(LocaleExtensions)
ByteBuf.writeLongLE(ByteBuf, long)
World.getNearestAttackablePlayer(World, Entity, double, double | World, BlockPos, double, double | World, double, double, double, double, double, Function, Predicate)
MethodTypeForm.pack(int, int, int, int)
Vector.removeAllElements(Vector)
ImmutableCollection.add(ImmutableCollection, Object)
CompositeByteBuf._getLong(CompositeByteBuf, int)
Entity.getPositionEyes(Entity, float)
LocalDateTime.withMonth(LocalDateTime, int)
PlayerChunkMapEntry.getClosestPlayerDistance(PlayerChunkMapEntry)
Tutorial.stop(Tutorial)
PlayerChunkMapEntry.getPos(PlayerChunkMapEntry)
IntStream.toArray(IntStream)
Font.access$102(Font, Font2DHandle)
Score.getScorePoints(Score)
Class.annotationData(Class)
FileTime.fromMillis(long)
InventoryEnderChest.setChestTileEntity(InventoryEnderChest, TileEntityEnderChest)
PlayerList.setPlayerGameTypeBasedOnOther(PlayerList, EntityPlayerMP, EntityPlayerMP, World)
ProtectionDomain.getCodeSource(ProtectionDomain)
BigDecimal.print(String, BigDecimal)
DropTarget.drop(DropTarget, DropTargetDropEvent)
URI.getRawAuthority(URI)
EventExecutor.inEventLoop(EventExecutor | EventExecutor, Thread)
Region.encompassesXYXY(Region, int, int, int, int)
Month.adjustInto(Month, Temporal)
LootPool.getBonusRolls(LootPool)
ImmutableTable.rowMap(ImmutableTable | ImmutableTable)
HorseArmorType.getByItem(Item)
Snooper.access$300(Snooper)
BaseCalendar.getDayOfYear(BaseCalendar, CalendarDate | BaseCalendar, int, int, int)
IChunkGenerator.isInsideStructure(IChunkGenerator, World, String, BlockPos)
EntityItem.setPickupDelay(EntityItem, int)
Minecraft.getMinecraft()
Snooper.stopSnooper(Snooper)
World.getRedstonePower(World, BlockPos, EnumFacing)
Template.setAuthor(Template, String)
WorldServer.getSpawnCoordinate(WorldServer)
Collection.contains(Collection, Object)
LocalDateTime.get(LocalDateTime, TemporalField)
OffsetDateTime.toOffsetTime(OffsetDateTime)
Snooper.access$308(Snooper)
Invokers.getCallSiteTarget(Object)
MethodType.returnType(MethodType)
DesktopPeer.browse(DesktopPeer, URI)
URI.toString(URI, String, String, String, String, String, int, String, String, String | URI)
URI.split(char[], int[])
Region.encompassesXYWH(Region, int, int, int, int)
RenderLivingBase.canRenderName(RenderLivingBase, Entity | RenderLivingBase, EntityLivingBase)
Graphics2D.drawGlyphVector(Graphics2D, GlyphVector, float, float)
Multiset.retainAll(Multiset, Collection)
JsonPrimitive.getAsNumber(JsonPrimitive)
ChannelPipeline.first(ChannelPipeline)
EntityPlayer.blockUsingShield(EntityPlayer, EntityLivingBase)
Vector.subList(Vector, int, int)
NBTBase.equals(NBTBase, Object)
URLConnection.getDefaultAllowUserInteraction()
ComponentPeer.getBackBuffer(ComponentPeer)
Biome.getBiome(int | int, Biome)
Locale.access$600(Locale)
Rectangle.setLocation(Rectangle, int, int | Rectangle, Point)
NetHandlerPlayClient.handleMaps(NetHandlerPlayClient, SPacketMaps)
ChannelOutboundBuffer.incrementPendingOutboundBytes(ChannelOutboundBuffer, long | ChannelOutboundBuffer, long, boolean)
DropTarget.writeObject(DropTarget, ObjectOutputStream)
MobSpawnerBaseLogic.writeToNBT(MobSpawnerBaseLogic, NBTTagCompound)
Plane.apply(Plane, Object | Plane, EnumFacing)
Font2D.getPostscriptName(Font2D)
Raster.getPixel(Raster, int, int, float[] | Raster, int, int, int[] | Raster, int, int, double[])
Window.show(Window)
Block.getBedSpawnPosition(Block, IBlockState, IBlockAccess, BlockPos, EntityPlayer)
Multiset.containsAll(Multiset, Collection)
EntityMinecart.getDefaultDisplayTile(EntityMinecart)
Minecraft.addServerTypeToSnooper(Minecraft, Snooper)
Constructor.setConstructorAccessor(Constructor, ConstructorAccessor)
Toolkit.isModalityTypeSupported(Toolkit, ModalityType)
Thread.getThreads()
EntityLivingBase.isActiveItemStackBlocking(EntityLivingBase)
EntityPlayerMP.updatePotionMetadata(EntityPlayerMP)
Block.canSilkHarvest(Block | Block, World, BlockPos, IBlockState, EntityPlayer)
Block.getSilkTouchDrop(Block, IBlockState)
Visibility.playSound(Visibility, SoundHandler)
ZonedDateTime.equals(ZonedDateTime, Object)
RenderItem.renderItem(RenderItem, ItemStack, IBakedModel | RenderItem, ItemStack, TransformType | RenderItem, ItemStack, EntityLivingBase, TransformType, boolean)
HorseArmorType.getByName(String)
IdentityArrayList.removeRange(IdentityArrayList, int, int)
ZoneId.normalized(ZoneId)
LocalDate.parse(CharSequence | CharSequence, DateTimeFormatter)
Enum.readObject(Enum, ObjectInputStream)
AdvancementManager.loadBuiltInAdvancements(AdvancementManager, Map)
ItemStack.getRepairCost(ItemStack)
Font2D.getValidatedGlyphCode(Font2D, int)
ColorModel.getGray8TosRGB8LUT(ICC_ColorSpace)
Chronology.dateEpochDay(Chronology, long)
DoubleBuffer.arrayOffset(DoubleBuffer)
Period.plusYears(Period, long)
PropertyChangeSupport.removePropertyChangeListener(PropertyChangeSupport, PropertyChangeListener | PropertyChangeSupport, String, PropertyChangeListener)
JsonReader.skipValue(JsonReader)
GameSettings.setOptionFloatValue(GameSettings, Options, float)
Potion.getStatusIconIndex(Potion)
Logger.trace(Logger, String, Object, Object, Object, Object | Logger, String, Object, Object, Object, Object, Object, Object, Object | Logger, String, Object, Object, Object | Logger, MessageSupplier | Logger, Marker, String, Object, Object, Object, Object, Object, Object, Object, Object | Logger, String, Supplier[] | Logger, Marker, String, Object, Object, Object | Logger, String, Throwable | Logger, Marker, String, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object | Logger, String, Object | Logger, Marker, Object | Logger, String, Object, Object, Object, Object, Object, Object, Object, Object | Logger, Marker, String, Object, Object, Object, Object, Object, Object, Object, Object, Object | Logger, Marker, String, Supplier[] | Logger, Marker, Supplier, Throwable | Logger, Marker, String, Object | Logger, Marker, String, Object, Object, Object, Object | Logger, Marker, String | Logger, Marker, MessageSupplier | Logger, Marker, String, Object, Object, Object, Object, Object, Object, Object | Logger, Marker, MessageSupplier, Throwable | Logger, String, Object, Object, Object, Object, Object, Object, Object, Object, Object | Logger, String, Object[] | Logger, Supplier, Throwable | Logger, Object, Throwable | Logger, String, Object, Object | Logger, Marker, String, Object, Object, Object, Object, Object, Object | Logger, String, Object, Object, Object, Object, Object, Object | Logger, String | Logger, Marker, String, Object, Object | Logger, CharSequence | Logger, Marker, CharSequence | Logger, Object | Logger, String, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object | Logger, Supplier | Logger, Marker, String, Object, Object, Object, Object, Object | Logger, Marker, String, Throwable | Logger, Marker, Object, Throwable | Logger, Message, Throwable | Logger, Marker, Supplier | Logger, MessageSupplier, Throwable | Logger, Message | Logger, Marker, Message | Logger, String, Object, Object, Object, Object, Object | Logger, Marker, CharSequence, Throwable | Logger, Marker, String, Object[] | Logger, Marker, Message, Throwable | Logger, CharSequence, Throwable)
GlyphVector.getGlyphCode(GlyphVector, int)
Invokers.genericInvoker(Invokers)
Font.hasUniformLineMetrics(Font)
DayOfWeek.from(TemporalAccessor)
PathPoint.createFromBuffer(PacketBuffer)
ChannelOutboundBuffer.isWritable(ChannelOutboundBuffer)
MethodHandle.withInternalMemberName(MethodHandle, MemberName, boolean)
VillageCollection.readFromNBT(VillageCollection, NBTTagCompound)
Vector.elementAt(Vector, int)
FontRenderer.getCharWidth(FontRenderer, char)
FontMetrics.getWidths(FontMetrics)
OffsetTime.plusHours(OffsetTime, long)
Wrapper.basicTypeChar(Wrapper | Class)
Control.getFormats(Control, String)
ClassLoader.preDefineClass(ClassLoader, String, ProtectionDomain)
AsynchronousFileChannel.size(AsynchronousFileChannel)
AffineTransform.rotate180(AffineTransform)
NodeProcessor.getStart(NodeProcessor)
Multimap.keySet(Multimap)
Graphics.translate(Graphics, int, int)
BigDecimal.unsignedLongCompare(long, long)
ProgressivePromise.setFailure(ProgressivePromise, Throwable)
Entity.isOnSameTeam(Entity, Entity)
Dialog.hideAndDisposeHandler(Dialog)
LocalTime.range(LocalTime, TemporalField)
Entity.entityInit(Entity)
BinaryOperator.lambda$minBy$0(Comparator, Object, Object)
Extension.setValue(Extension, String)
Raster.createPackedRaster(DataBuffer, int, int, int, Point | int, int, int, int[], Point | int, int, int, int, int, Point | DataBuffer, int, int, int, int[], Point)
Field.getType(Field)
TileEntity.setWorldCreate(TileEntity, World)
Chunk.getCapability(Chunk, Capability, EnumFacing)
EntityLookHelper.onUpdateLook(EntityLookHelper)
MobSpawnerBaseLogic.getPrevMobRotation(MobSpawnerBaseLogic)
FontLineMetrics.getAscent(FontLineMetrics)
DropTargetContext.getComponent(DropTargetContext)
ImmutableList.forEach(ImmutableList, Consumer)
Quaternion.getW(Quaternion)
Quaternion.getX(Quaternion)
Quaternion.getY(Quaternion)
Quaternion.getZ(Quaternion)
Block.getHarvestLevel(Block, IBlockState)
ItemRenderer.renderArmFirstPerson(ItemRenderer, float, float, EnumHandSide)
EntityMinecart.setPositionAndRotationDirect(EntityMinecart, double, double, double, float, float, int, boolean)
DayOfWeek.query(DayOfWeek, TemporalQuery)
InputContext.getLocale(InputContext)
Path.isFinished(Path)
AccessibleValue.getMinimumAccessibleValue(AccessibleValue)
IntStream.sum(IntStream)
URLConnection.setConnectTimeout(URLConnection, int)
Duration.plusSeconds(Duration, long)
Path.relativize(Path, Path)
Entity.canBeCollidedWith(Entity)
ClassLoader.defineClass2(ClassLoader, String, ByteBuffer, int, int, ProtectionDomain, String)
ItemOverrideList.applyOverride(ItemOverrideList, ItemStack, World, EntityLivingBase)
ReentrantLock.getWaitQueueLength(ReentrantLock, Condition)
FileSystemProvider.readSymbolicLink(FileSystemProvider, Path)
BlockStateContainer.toString(BlockStateContainer)
WorldType.enableInfoNotice(WorldType)
FontMetrics.hasUniformLineMetrics(FontMetrics)
ClassLoader.defineClass0(ClassLoader, String, byte[], int, int, ProtectionDomain)
Integer.valueOf(String | int | String, int)
ClassLoader.defineClass1(ClassLoader, String, byte[], int, int, ProtectionDomain, String)
Style.setObfuscated(Style, Boolean)
LocalDate.toString(LocalDate)
VertexFormat.hashCode(VertexFormat)
CombatTracker.getFighter(CombatTracker)
WorldInfo.setSpawn(WorldInfo, BlockPos)
ThreadLocal.getMap(ThreadLocal, Thread)
DataEntry.getValue(DataEntry)
Instant.plusNanos(Instant, long)
Multimap.replaceValues(Multimap, Object, Iterable)
OptionalLong.ifPresent(OptionalLong, LongConsumer)
CreativeTabs.getLabelColor(CreativeTabs)
AccessControlContext.equalPDs(AccessControlContext, ProtectionDomain[], ProtectionDomain[])
ComponentOrientation.getOrientation(Locale | ResourceBundle)
FileSystem.isReadOnly(FileSystem)
FieldAccessor.getBoolean(FieldAccessor, Object)
MinecraftServer.getMaxWorldSize(MinecraftServer)
IdentityArrayList.trimToSize(IdentityArrayList)
EntityItem.setInfinitePickupDelay(EntityItem)
EntityItem.registerFixesItem(DataFixer)
Toolkit.getPropertyChangeListeners(Toolkit | Toolkit, String)
LocalDate.lengthOfMonth(LocalDate)
Minecraft.getLanguageManager(Minecraft)
DragSourceContext.dragDropEnd(DragSourceContext, DragSourceDropEvent)
Method.getGenericInfo(Method | Method)
Stream.allMatch(Stream, Predicate)
PotionEffect.toString(PotionEffect)
ItemStack.getItemDamage(ItemStack)
ByteBuf.indexOf(ByteBuf, int, int, byte)
Integer.lowestOneBit(int)
Lookup.checkSymbolicClass(Lookup, Class)
Scoreboard.onScoreObjectiveRemoved(Scoreboard, ScoreObjective)
Block.getBlockState(Block)
ItemStack.getCapability(ItemStack, Capability, EnumFacing)
Entity.getTags(Entity)
IRarity.getColor(IRarity)
ItemStack.setCount(ItemStack, int)
PaintEvent.setUpdateRect(PaintEvent, Rectangle)
Minecraft.isConnectedToRealms(Minecraft)
Village.findUUID(Village, String)
Duration.writeReplace(Duration)
BlockModelRenderer.renderQuadsSmooth(BlockModelRenderer, IBlockAccess, IBlockState, BlockPos, BufferBuilder, List, float[], BitSet, AmbientOcclusionFace)
Name.resolve(Name)
UnmodifiableListIterator.set(UnmodifiableListIterator, Object)
NonNullList.create()
BigInteger.destructiveMulAdd(int[], int, int)
Lookup.findStaticGetter(Lookup, Class, String, Class)
EnumCreatureAttribute.values()
ImmutableMap.toImmutableMap(Function, Function | Function, Function, BinaryOperator)
StateImplementation.getOffset(StateImplementation, IBlockAccess, BlockPos)
WorldServer.flush(WorldServer)
VertexFormat.getOffset(VertexFormat, int)
EntityItemFrame.getDisplayedItem(EntityItemFrame)
GraphicsDevice.isFullScreenSupported(GraphicsDevice)
Class.cannotCastMsg(Class, Object)
Style.access$200(Style)
Component.isBackgroundSet(Component)
Component.inside(Component, int, int)
Window.constructComponentName(Window)
WorldInfo.getVersionId(WorldInfo)
EntityRenderer.resetData(EntityRenderer)
EntityRenderer.renderCloudsCheck(EntityRenderer, RenderGlobal, float, int, double, double, double)
VertexFormat.equals(VertexFormat, Object)
RenderGlobal.onResourceManagerReload(RenderGlobal, IResourceManager)
ItemRenderer.resetEquippedProgress(ItemRenderer, EnumHand)
Graphics.fillRoundRect(Graphics, int, int, int, int, int, int)
BigInteger.longValue(BigInteger)
IntBuffer.put(IntBuffer, int[] | IntBuffer, int | IntBuffer, int, int | IntBuffer, IntBuffer | IntBuffer, int[], int, int)
Style.access$202(Style, Boolean)
Function.identity()
BigDecimal.doubleValue(BigDecimal)
LocalDate.query(LocalDate, TemporalQuery)
EntityLiving.setPathPriority(EntityLiving, PathNodeType, float)
TextureAtlasSprite.getIconName(TextureAtlasSprite)
World.updateWeatherBody(World)
RenderManager.getFontRenderer(RenderManager)
Graphics.getClipBounds(Graphics, Rectangle | Graphics)
Item.setFull3D(Item)
Window.applyResourceBundle(Window, ResourceBundle | Window, String)
MinecraftServer.getSpawnRadius(MinecraftServer, WorldServer)
Comparator.lambda$thenComparing$36697e65$1(Comparator, Comparator, Object, Object)
Component.processComponentEvent(Component, ComponentEvent)
Template.writeDoubles(Template, double[])
Vector.negate(Vector)
ResourcePackRepository.setRepositories(ResourcePackRepository, List)
Level.valueOf(String | int | String | Class, String)
SleepResult.valueOf(String)
Village.isWoodDoor(Village, BlockPos)
CharBuffer.wrap(char[] | char[], int, int | CharSequence, int, int | CharSequence)
WindowPeer.setOpacity(WindowPeer, float)
ItemStack.isItemEnchantable(ItemStack)
PlayerList.getAvailablePlayerDat(PlayerList)
EntityPlayer.spawnShoulderEntity(EntityPlayer, NBTTagCompound)
Component.getObjectLock(Component)
UUID.nameUUIDFromBytes(byte[])
EntityMoveHelper.onUpdateMoveHelper(EntityMoveHelper)
EventQueue.getMostRecentKeyEventTime(EventQueue)
LambdaForm.useCount(LambdaForm, Name)
Long.signum(long)
NetHandlerPlayClient.handleUpdateScore(NetHandlerPlayClient, SPacketUpdateScore)
JsonElement.getAsDouble(JsonElement)
Window.dispose(Window)
AdvancementList.removeAll(AdvancementList, Set)
URLClassPath.pathToURLs(String)
ZoneOffset.parseNumber(CharSequence, int, boolean)
AttributeSet.isEqual(AttributeSet, AttributeSet)
Window.isOpaque(Window)
Executable.sharedToGenericString(Executable, int, boolean)
Duration.minus(Duration, long, TemporalUnit | Duration, Duration)
ResourceBundle.getObject(ResourceBundle, String)
FileSystemProvider.checkAccess(FileSystemProvider, Path, AccessMode[])
LambdaFormEditor.permuteArgumentsForm(LambdaFormEditor, int, int[])
URLClassPath.closeLoaders(URLClassPath)
WorldSavedData.isDirty(WorldSavedData)
LocalDate.with(LocalDate, TemporalField, long | LocalDate, TemporalAdjuster | LocalDate, TemporalAdjuster | LocalDate, TemporalField, long | LocalDate, TemporalField, long | LocalDate, TemporalAdjuster)
NetHandlerPlayClient.handleChunkData(NetHandlerPlayClient, SPacketChunkData)
Entry.getResourcePack(Entry)
WorldBorder.getDamageAmount(WorldBorder)
Chunk.resetRelightChecks(Chunk)
Package.access$200()
NBTTagList.getIntArrayAt(NBTTagList, int)
Container.adjustDecendantsOnParent(Container, int)
BigInteger.multiplyKaratsuba(BigInteger, BigInteger)
JsonWriter.setIndent(JsonWriter, String)
ITextureObject.setBlurMipmap(ITextureObject, boolean, boolean)
DoubleBuffer.slice(DoubleBuffer)
LambdaForm.arity(LambdaForm)
Container.doLayout(Container)
FontStrike.getGlyphVectorOutline(FontStrike, int[], float, float)
Graphics.dispose(Graphics)
EntityLivingBase.getPrimaryHand(EntityLivingBase)
Intrinsic.values()
EntityPlayerMP.sendTileEntityUpdate(EntityPlayerMP, TileEntity)
BufferedImage.addTileObserver(BufferedImage, TileObserver)
Vec3d.hashCode(Vec3d)
ImmutableMultimap.replaceValues(ImmutableMultimap, Object, Iterable | ImmutableMultimap, Object, Iterable)
Unsafe.beginRead(Unsafe)
ImmutableMultimap.entrySpliterator(ImmutableMultimap)
FileSystemProvider.newInputStream(FileSystemProvider, Path, OpenOption[])
MinecraftServer.getForceGamemode(MinecraftServer)
PlayerList.getFormattedListOfPlayers(PlayerList, boolean)
Shader.preRender(Shader)
Toolkit.getBestCursorSize(Toolkit, int, int)
Thread.checkAccess(Thread)
EnumRarity.getName(EnumRarity)
Component.mouseEnter(Component, Event, int, int)
EnclosingMethodInfo.getEnclosingClass(EnclosingMethodInfo)
World.getDifficulty(World)
LongBuffer.hashCode(LongBuffer)
EnumFlowerType.getTranslationKey(EnumFlowerType)
BufferedImage.setData(BufferedImage, Raster)
Executable.getParameterTypes(Executable)
Name.replaceName(Name, Name, Name)
Container.decreaseComponentCount(Container, Component)
DragSourceContext.dragExit(DragSourceContext, DragSourceEvent)
ByteBuf.getMedium(ByteBuf, int)
GenLayer.biomesEqualOrMesaPlateau(int, int)
Optional.hashCode(Optional | Optional)
MinecraftServer.finalTick(MinecraftServer, CrashReport)
DisplayInfo.write(DisplayInfo, PacketBuffer)
EntityMinecart.setDamage(EntityMinecart, float)
BasicType.basicType(Class | char | byte | Wrapper)
Executable.getAnnotatedParameterTypes(Executable)
CharBuffer.compact(CharBuffer)
ArrayList.indexOf(ArrayList, Object)
ResourcePackRepository.getDownloadHeaders()
World.countEntities(World, Class | World, EnumCreatureType, boolean)
WorldType.isCustomizable(WorldType)
WorldBorder.addListener(WorldBorder, IBorderListener)
DropTargetContext.getCurrentDataFlavors(DropTargetContext)
SoundManager.getClampedPitch(SoundManager, ISound)
ProgressivePromise.tryProgress(ProgressivePromise, long, long)
EntityPlayerMP.setElytraFlying(EntityPlayerMP)
ConstantPool.getClassAt(ConstantPool, int)
Chunk.hasCapability(Chunk, Capability, EnumFacing)
Builder.accept(Builder, long | Builder, int | Builder, double | Builder, Object)
Snooper.getCurrentStats(Snooper)
ColorModel.getNumColorComponents(ColorModel)
TileEntity.receiveClientEvent(TileEntity, int, int)
JsonArray.set(JsonArray, int, JsonElement)
Entity.getLastPortalVec(Entity)
Village.updateVillageRadiusAndCenter(Village)
AccessibleRelationSet.remove(AccessibleRelationSet, AccessibleRelation)
ZonedDateTime.getYear(ZonedDateTime)
Block.setBlockUnbreakable(Block)
ImmutableTable.column(ImmutableTable, Object | ImmutableTable, Object)
TileEntity.getDistanceSq(TileEntity, double, double, double)
Minecraft.access$100(Minecraft)
FontLineMetrics.clone(FontLineMetrics)
ListenerList.clearBusID(int)
World.getLight(World, BlockPos | World, BlockPos, boolean)
Type.values( |  |  |  |  | )
WindowPeer.repositionSecurityWarning(WindowPeer)
Enum.ordinal(Enum)
Path.read(PacketBuffer)
RegionIterator.nextYRange(RegionIterator, int[])
Gson.fieldNamingStrategy(Gson)
EnumUsage.getDisplayName(EnumUsage)
ImmutableList.toImmutableList()
AttributeValues.setKerning(AttributeValues, int)
Scoreboard.addPlayerToTeam(Scoreboard, String, String)
Range.valueOf(String)
InputMethodRequests.getCommittedTextLength(InputMethodRequests)
Executable.getDeclaredAnnotations(Executable)
Entity.getPitchYaw(Entity)
Collection.containsAll(Collection, Collection)
GameSettings.getOptionOrdinalValue(GameSettings, Options)
List.equals(List, Object)
AdvancementProgress.access$000(AdvancementProgress)
IntStream.boxed(IntStream)
Axis.apply(Axis, EnumFacing | Axis, Object)
Item.getByNameOrId(String)
Entity.getMaxInPortalTime(Entity)
ItemStack.canHarvestBlock(ItemStack, IBlockState)
World.getLightFromNeighborsFor(World, EnumSkyBlock, BlockPos)
PlayerChunkMapEntry.addPlayer(PlayerChunkMapEntry, EntityPlayerMP)
EntityMinecart.setCanUseRail(EntityMinecart, boolean)
MobSpawnerBaseLogic.setNextSpawnData(MobSpawnerBaseLogic, WeightedSpawnerEntity)
URI.readObject(URI, ObjectInputStream)
EntityMinecart.getSlopeAdjustment(EntityMinecart)
Item.getItemAttributeModifiers(Item, EntityEquipmentSlot)
Snooper.access$400(Snooper)
GameRules.areSameType(GameRules, String, ValueType)
JsonObject.deepCopy(JsonObject | JsonObject)
URL.getHost(URL)
Long.bitCount(long)
ColorModel.isCompatibleRaster(ColorModel, Raster)
AbstractStringBuilder.reverse(AbstractStringBuilder)
Template.addBlocksToWorldChunk(Template, World, BlockPos, PlacementSettings)
URI.equalIgnoringCase(String, String)
ChronoZonedDateTime.format(ChronoZonedDateTime, DateTimeFormatter)
ChannelPromise.trySuccess(ChannelPromise)
Container.updateGraphicsData(Container, GraphicsConfiguration)
Item.readNBTShareTag(Item, ItemStack, NBTTagCompound)
LootPool.removeEntry(LootPool, String)
EntityLiving.recreateLeash(EntityLiving)
Entity.dropItemWithOffset(Entity, Item, int, float)
URL.getFile(URL)
Instant.get(Instant, TemporalField)
LocalDate.format(LocalDate, DateTimeFormatter)
PathNavigate.checkForStuck(PathNavigate, Vec3d)
Entity.getHorizontalFacing(Entity)
Unsafe.write(Unsafe, Object, ChannelPromise)
Font.access$200(Font)
Advancement.toString(Advancement)
ScrollPanePeer.getVScrollbarWidth(ScrollPanePeer)
VertexBuffer.bufferData(VertexBuffer, ByteBuffer)
Permission.checkGuard(Permission, Object)
Font.access$202(Font, boolean)
Item.getMaxItemUseDuration(Item, ItemStack)
AtomicInteger.incrementAndGet(AtomicInteger)
Comparator.nullsLast(Comparator)
Block.isEqualTo(Block, Block)
MethodHandle.toString(MethodHandle)
ReflectionFactory.getReflectionFactory()
BigDecimal.toBigInteger(BigDecimal)
Calendar.setTimeZone(Calendar, TimeZone)
Block.isCollidable(Block)
Constructor.getSignature(Constructor)
CompositeByteBuf.newList(int)
Stream.flatMap(Stream, Function)
ItemStack.onItemUse(ItemStack, EntityPlayer, World, BlockPos, EnumHand, EnumFacing, float, float, float)
Block.getCollisionBoundingBox(Block, IBlockState, IBlockAccess, BlockPos)
FunctionManager.access$000(FunctionManager)
Render.renderLivingLabel(Render, Entity, String, double, double, double, int)
LambdaForm.permuteArguments(LambdaForm, int, int[], BasicType[])
WorldServer.flushToDisk(WorldServer)
Vector.containsAll(Vector, Collection)
OffsetTime.from(TemporalAccessor)
BufferedImage.releaseWritableTile(BufferedImage, int, int)
Window.isFocused(Window)
BiomeProvider.getBiomesForGeneration(BiomeProvider, Biome[], int, int, int, int)
EventQueue.pop(EventQueue)
EntityItemFrame.playPlaceSound(EntityItemFrame)
MenuPeer.delItem(MenuPeer, int)
ChronoLocalDateTime.timeLineOrder()
Entity.getDataManager(Entity)
ResourcePackRepository.getDirResourcepacks(ResourcePackRepository)
EntityRenderer.updateFovModifierHand(EntityRenderer)
MemberName.isMethodHandleInvokeName(String)
Framebuffer.bindFramebufferTexture(Framebuffer)
AccessibleText.getCharacterBounds(AccessibleText, int)
OptionalLong.getAsLong(OptionalLong)
EntityPlayerMP.getChatVisibility(EntityPlayerMP)
ByteBuf.getUnsignedMediumLE(ByteBuf, int)
MethodHandleInfo.isVarArgs(MethodHandleInfo)
Component.getSize(Component, Dimension | Component)
Class.getSigners(Class)
InputEvent.consume(InputEvent)
Comparable.compareTo(Comparable, Object)
Package.isCompatibleWith(Package, String)
ZoneOffsetTransition.isValidOffset(ZoneOffsetTransition, ZoneOffset)
ImmutableMap.of(Object, Object, Object, Object, Object, Object | Object, Object, Object, Object, Object, Object, Object, Object |  | Object, Object, Object, Object | Object, Object, Object, Object, Object, Object, Object, Object, Object, Object | Object, Object)
LambdaForm.parameter(LambdaForm, int)
MethodTypeForm.hasPrimitives(MethodTypeForm)
BigInteger.max(BigInteger, BigInteger)
IChunkGenerator.populate(IChunkGenerator, int, int)
Thread.processQueue(ReferenceQueue, ConcurrentMap)
ArrayList.get(ArrayList, int)
SkinManager.loadSkin(SkinManager, MinecraftProfileTexture, Type, SkinAvailableCallback | SkinManager, MinecraftProfileTexture, Type)
ListenerList.getListeners(ListenerList, int)
MinecraftServer.getMaxPlayerIdleMinutes(MinecraftServer)
EntityPlayerMP.sendAllWindowProperties(EntityPlayerMP, Container, IInventory)
AccessibleEditableText.cut(AccessibleEditableText, int, int)
EntityLivingBase.getDeathSound(EntityLivingBase)
DropTargetContextPeer.getDropTarget(DropTargetContextPeer)
Executable.parseParameterAnnotations(Executable, byte[])
EntityLiving.getRenderSizeModifier(EntityLiving)
EntityDataManager.createKey(Class, DataSerializer)
VertexFormat.getElement(VertexFormat, int)
Unsafe.bind(Unsafe, SocketAddress, ChannelPromise)
DamageSource.setExplosion(DamageSource)
Container.getChildAt(Component, int, int, boolean)
EntityRenderer.updateRenderer(EntityRenderer)
Entity.getDistanceSq(Entity, double, double, double | Entity, Entity | Entity, BlockPos)
Channel.read(Channel)
Chunk.addTileEntity(Chunk, TileEntity | Chunk, BlockPos, TileEntity)
LambdaFormBuffer.replaceFunctions(LambdaFormBuffer, NamedFunction[], NamedFunction[], Object[])
URI.isAbsolute(URI)
FileStore.name(FileStore)
CompositeByteBuf.discardSomeReadBytes(CompositeByteBuf | CompositeByteBuf)
RenderItem.draw(RenderItem, BufferBuilder, int, int, int, int, int, int, int, int)
Class.getPackage(Class)
Render.bindTexture(Render, ResourceLocation)
Scoreboard.broadcastTeamInfoUpdate(Scoreboard, ScorePlayerTeam)
Window.readObject(Window, ObjectInputStream)
BufferBuilder.getByteBuffer(BufferBuilder)
Entity.getDistanceSqToCenter(Entity, BlockPos)
VillageDoorInfo.incrementDoorOpeningRestrictionCounter(VillageDoorInfo)
Map.putIfAbsent(Map, Object, Object)
Calendar.add(Calendar, int, int)
AttributeSet.isDefined(AttributeSet, Object)
GameSettings.setModelPartEnabled(GameSettings, EnumPlayerModelParts, boolean)
Duration.toDays(Duration)
Minecraft.launchIntegratedServer(Minecraft, String, String, WorldSettings)
Resource.getCertificates(Resource)
EntityLivingBase.attemptTeleport(EntityLivingBase, double, double, double)
WorldServer.addWeatherEffect(WorldServer, Entity)
Toolkit.initAssistiveTechnologies()
DamageSource.setDifficultyScaled(DamageSource)
ResourcePackRepository.getRepositoryEntriesAll(ResourcePackRepository)
PropertyChangeSupport.hasListeners(PropertyChangeSupport, String)
FunctionObject.create(FunctionManager, List)
ClassTypeSignature.accept(ClassTypeSignature, TypeTreeVisitor)
World.getSkylightSubtracted(World)
SkinManager.loadProfileTextures(SkinManager, GameProfile, SkinAvailableCallback, boolean)
World.checkLightFor(World, EnumSkyBlock, BlockPos)
EntityLiving.readEntityFromNBT(EntityLiving, NBTTagCompound)
Package.getPackages()
IntBuffer.arrayOffset(IntBuffer)
OptionalInt.of(int)
LambdaFormEditor.buffer(LambdaFormEditor)
WorldInfo.getGameType(WorldInfo)
Window.getWindowListeners(Window)
ArrayList.isEmpty(ArrayList)
Period.readExternal(DataInput)
JsonNull.equals(JsonNull, Object)
Optional.isPresent(Optional | Optional)
ConstantPool.getSize(ConstantPool)
FunctionManager.getFunction(FunctionManager, ResourceLocation)
TimeZone.setRawOffset(TimeZone, int)
NetworkManager.isChannelOpen(NetworkManager)
FontMetrics.myFRC(FontMetrics, Graphics)
MappedByteBuffer.isLoaded(MappedByteBuffer)
BlockStateContainer.getProperty(BlockStateContainer, String)
CrashReportCategory.firstTwoElementsOfStackTraceMatch(CrashReportCategory, StackTraceElement, StackTraceElement)
Enum.compareTo(Enum, Object | Enum, Enum)
LocaleExtensions.getID(LocaleExtensions)
Stream.noneMatch(Stream, Predicate)
LongStream.collect(LongStream, Supplier, ObjLongConsumer, BiConsumer)
EntityPlayer.isEntityInsideOpaqueBlock(EntityPlayer)
AttributeSet.getResolveParent(AttributeSet)
BlockPos.toImmutable(BlockPos)
LocalDateTime.getSecond(LocalDateTime)
ZonedDateTime.withNano(ZonedDateTime, int)
EntityLiving.eatGrassBonus(EntityLiving)
Package.getDeclaredAnnotation(Package, Class)
GameRules.readFromNBT(GameRules, NBTTagCompound)
Chunk.updateSkylightNeighborHeight(Chunk, int, int, int, int)
Container.removeAll(Container)
LambdaFormEditor.collectArgumentsForm(LambdaFormEditor, int, MethodType)
ComponentPeer.flip(ComponentPeer, int, int, int, int, FlipContents)
OptionalInt.equals(OptionalInt, Object)
EntityPlayer.getHurtSound(EntityPlayer, DamageSource)
PlayerAdvancements.ensureAllVisible(PlayerAdvancements)
ReflectionFactory.readObjectNoDataForSerialization(ReflectionFactory, Class)
ITextComponent.appendSibling(ITextComponent, ITextComponent)
Vec3i.toString(Vec3i)
ZoneOffsetTransition.writeReplace(ZoneOffsetTransition)
URI.getFragment(URI)
CharBuffer.compare(char, char)
Lookup.lookupModes(Lookup)
EnumDifficulty.getId(EnumDifficulty)
FoodStats.needFood(FoodStats)
PotionEffect.addCurativeItem(PotionEffect, ItemStack)
EnumRarity.getColor(EnumRarity)
BasicType.checkBasicType()
ConstantPool.getIntAt(ConstantPool, int)
Channel.localAddress(Channel)
VertexFormatElement.isFirstOrUV(VertexFormatElement, int, EnumUsage)
WorldGenerator.generate(WorldGenerator, World, Random, BlockPos)
Entity.isImmuneToExplosions(Entity)
EntityItem.setNoPickupDelay(EntityItem)
Window.applyCompoundShape(Window, Region)
NetworkPlayerInfo.getLocationSkin(NetworkPlayerInfo)
BlockRendererDispatcher.renderBlockBrightness(BlockRendererDispatcher, IBlockState, float)
AxisAlignedBB.getAverageEdgeLength(AxisAlignedBB)
BigInteger.compareTo(BigInteger, BigInteger | BigInteger, Object)
ComponentPeer.destroyBuffers(ComponentPeer)
ShaderGroup.render(ShaderGroup, float)
BufferBuilder.putColor(BufferBuilder, int, int)
ItemRenderer.renderFireInFirstPerson(ItemRenderer)
BaseLocale.createInstance(String, String)
Minecraft.getPlayerUsageSnooper(Minecraft)
Style.getObfuscated(Style)
FileChannel.map(FileChannel, MapMode, long, long)
Plane.facings(Plane)
PlayerList.addWhitelistedPlayer(PlayerList, GameProfile)
StringBuilder.toString(StringBuilder)
DropTarget.getDropTargetContext(DropTarget)
CompositeByteBuf.removeComponents(CompositeByteBuf, int, int)
ChunkCompileTaskGenerator.isFinished(ChunkCompileTaskGenerator)
Wrapper.isDoubleWord(Wrapper)
CompositeByteBuf._setShort(CompositeByteBuf, int, int)
ScorePlayerTeam.getDisplayName(ScorePlayerTeam)
NBTTagList.get(NBTTagList, int)
ZoneId.write(ZoneId, DataOutput)
DragGestureRecognizer.writeObject(DragGestureRecognizer, ObjectOutputStream)
IChunkGenerator.getNearestStructurePos(IChunkGenerator, World, String, BlockPos, boolean)
CompositeByteBuf._getLongLE(CompositeByteBuf, int)
Component.getContainingWindow(Component)
URI.equals(URI, Object)
InputEvent.isShiftDown(InputEvent)
OfPrimitive.forEachRemaining(OfPrimitive, Object)
Component.isCoalesceEventsOverriden(Class)
Players.getMaxPlayers(Players)
CharBuffer.duplicate(CharBuffer)
OffsetTime.getSecond(OffsetTime)
Duration.plusHours(Duration, long)
MethodType.newIndexOutOfBoundsException(Object)
Wrapper.cast(Wrapper, Object, Class)
EntityLivingBase.isOnLadder(EntityLivingBase)
MinecraftServer.isPVPEnabled(MinecraftServer)
BigDecimal.doRound128(long, long, int, int, MathContext)
Item.getEntityLifespan(Item, ItemStack, World)
Font2D.getWidth(Font2D)
WorldInfo.getThunderTime(WorldInfo)
NetHandlerPlayClient.handleDisconnect(NetHandlerPlayClient, SPacketDisconnect)
DragSource.createDragSourceContext(DragSource, DragSourceContextPeer, DragGestureEvent, Cursor, Image, Point, Transferable, DragSourceListener)
VertexFormat.toString(VertexFormat)
BlockModelShapes.registerBlockWithStateMapper(BlockModelShapes, Block, IStateMapper)
ScorePlayerTeam.getDeathMessageVisibility(ScorePlayerTeam)
Channel.bytesBeforeUnwritable(Channel)
TileEntity.onDataPacket(TileEntity, NetworkManager, SPacketUpdateTileEntity)
AbstractStringBuilder.substring(AbstractStringBuilder, int, int | AbstractStringBuilder, int)
UserListBans.getKeys(UserListBans)
BoundMethodHandle.speciesData_LLL()
Entity.isEntityEqual(Entity, Entity)
Item.registerItemBlock(Block | Block, Item)
Component.mouseDown(Component, Event, int, int)
Double.max(double, double)
ImmutableMultiset.setCount(ImmutableMultiset, Object, int | ImmutableMultiset, Object, int, int)
Date.parse(String)
EntityPlayerMP.attackEntityFrom(EntityPlayerMP, DamageSource, float)
Logger.atError(Logger)
WorldInfo.getBorderWarningTime(WorldInfo)
Item.isValidArmor(Item, ItemStack, EntityEquipmentSlot, Entity)
EventQueue.coalesceOtherEvent(EventQueue, AWTEvent, int)
EntityRenderer.getFOVModifier(EntityRenderer, float, boolean)
MapStorage.getOrLoadData(MapStorage, Class, String)
EntityPlayerMP.getLastActiveTime(EntityPlayerMP)
GenericsFactory.makeBool(GenericsFactory)
Window.processWindowFocusEvent(Window, WindowEvent)
Comparator.thenComparing(Comparator, Function | Comparator, Comparator | Comparator, Function, Comparator)
BigInteger.mod(BigInteger, BigInteger)
EntityRenderer.addRainParticles(EntityRenderer)
RenderGlobal.drawSelectionBoundingBox(AxisAlignedBB, float, float, float, float)
Lookup.maybeBindCaller(Lookup, MemberName, MethodHandle, Class)
SoundHandler.playSound(SoundHandler, ISound)
RenderManager.cacheActiveRenderInfo(RenderManager, World, FontRenderer, Entity, Entity, GameSettings, float)
CompositeByteBuf.copyTo(CompositeByteBuf, int, int, int, ByteBuf)
Advancement.equals(Advancement, Object)
NetworkManager.handleDisconnection(NetworkManager)
SortedSet.comparator(SortedSet)
JsonReader.nextInt(JsonReader)
Rectangle.getHeight(Rectangle)
PotionEffect.combine(PotionEffect, PotionEffect)
Item.onItemUseFirst(Item, EntityPlayer, World, BlockPos, EnumFacing, float, float, float, EnumHand)
Window.getWindowStateListeners(Window)
NetworkManager.setConnectionState(NetworkManager, EnumConnectionState)
LocalDateTime.minusNanos(LocalDateTime, long)
Component.getNormalShape(Component)
PlayerAdvancements.hasCompletedChildrenOrSelf(PlayerAdvancements, Advancement)
ImmutableMap.copyOf(Iterable | Map)
GameProfile.getId(GameProfile)
JsonReader.peek(JsonReader)
PlayerList.allowUserToConnect(PlayerList, SocketAddress, GameProfile)
Float.getHeight(Float)
GuiButton.playPressSound(GuiButton, SoundHandler)
Map.remove(Map, Object | Map, Object, Object)
Component.processMouseWheelEvent(Component, MouseWheelEvent)
EventQueue.invokeLater(Runnable)
FocusTraversalPolicy.getComponentBefore(FocusTraversalPolicy, Container, Component)
Component.initializeFocusTraversalKeys(Component)
AccessibleEditableText.setAttributes(AccessibleEditableText, int, int, AttributeSet)
ClickEvent.equals(ClickEvent, Object)
MinecraftServer.getMaxPlayers(MinecraftServer)
RenderGlobal.drawBoundingBox(BufferBuilder, double, double, double, double, double, double, float, float, float, float | double, double, double, double, double, double, float, float, float, float)
Font.getBaselineFor(Font, char)
Class.getGenericSignature0(Class)
PlayerList.saveAllPlayerData(PlayerList)
CombatEntry.getDamage(CombatEntry)
ChannelHandler.exceptionCaught(ChannelHandler, ChannelHandlerContext, Throwable)
Toolkit.addPropertyChangeListener(Toolkit, String, PropertyChangeListener)
ByteBuf.hashCode(ByteBuf)
Channel.parent(Channel)
PathNavigate.getPathToEntityLiving(PathNavigate, Entity)
MinecraftServer.loadAllWorlds(MinecraftServer, String, String, long, WorldType, String)
JsonReader.syntaxError(JsonReader, String)
Calendar.setWeekDate(Calendar, int, int, int)
AsynchronousFileChannel.write(AsynchronousFileChannel, ByteBuffer, long, Object, CompletionHandler | AsynchronousFileChannel, ByteBuffer, long)
LootTable.removePool(LootTable, String)
Class.getPrimitiveClass(String)
EntityLivingBase.applyPotionDamageCalculations(EntityLivingBase, DamageSource, float)
GlyphMetrics.isCombining(GlyphMetrics)
NamedFunction.invokeWithArguments(NamedFunction, Object[])
Collection.removeIf(Collection, Predicate)
Lookup.findSetter(Lookup, Class, String, Class)
EntityLivingBase.onDeath(EntityLivingBase, DamageSource)
BlockModelShapes.getModelManager(BlockModelShapes)
Entity.isSilent(Entity)
StatisticsManagerServer.markAllDirty(StatisticsManagerServer)
ComponentPeer.getMinimumSize(ComponentPeer)
IntStream.iterate(int, IntUnaryOperator)
Entity.getExplosionResistance(Entity, Explosion, World, BlockPos, IBlockState)
Double.min(double, double)
Era.getLong(Era, TemporalField)
URLConnection.setRequestProperty(URLConnection, String, String)
SampleModel.getSample(SampleModel, int, int, int, DataBuffer)
ChannelHandlerContext.alloc(ChannelHandlerContext)
ItemStack.toString(ItemStack)
ConstantPool.getFloatAt0(ConstantPool, Object, int)
File.canExecute(File)
Village.getTicksSinceLastDoorAdding(Village)
Stream.collect(Stream, Collector | Stream, Supplier, BiConsumer, BiConsumer)
Component.imageUpdate(Component, Image, int, int, int, int, int)
Explosion.doExplosionA(Explosion)
Explosion.doExplosionB(Explosion, boolean)
ByteBuf.getByte(ByteBuf, int)
ByteBuf.getUnsignedShortLE(ByteBuf, int)
BigInteger.setBit(BigInteger, int)
EntityPlayer.setItemStackToSlot(EntityPlayer, EntityEquipmentSlot, ItemStack)
Chronology.getAvailableChronologies()
RandomValueRange.generateInt(RandomValueRange, Random)
Properties.list(Properties, PrintStream | Properties, PrintWriter)
EntityMinecart.getAdjustedHorizontalFacing(EntityMinecart)
NetworkPlayerInfo.setResponseTime(NetworkPlayerInfo, int)
AttributeValues.getCharTransform(AttributeValues | Map)
Toolkit.createScrollPane(Toolkit, ScrollPane)
Resource.getCodeSourceURL(Resource)
LocalDate.withYear(LocalDate, int)
TextureMap.updateAnimations(TextureMap)
Entity.markVelocityChanged(Entity)
NBTTagList.getFloatAt(NBTTagList, int)
MinecraftSessionService.joinServer(MinecraftSessionService, GameProfile, String, String)
ChannelPipeline.names(ChannelPipeline)
PathNavigate.isInLiquid(PathNavigate)
Executable.equalParamTypes(Executable, Class[], Class[])
EntityPlayerMP.onUpdate(EntityPlayerMP)
ImmutableMultimap.put(ImmutableMultimap, Object, Object)
AppContext.put(AppContext, Object, Object)
JsonReader.skipToEndOfLine(JsonReader)
CharBuffer.hasArray(CharBuffer)
FlipContents.toString(FlipContents)
ImmutableTable.equals(ImmutableTable, Object)
Throwable.addSuppressed(Throwable, Throwable)
Minecraft.dispatchKeypresses(Minecraft)
Set.clear(Set)
World.markBlocksDirtyVertical(World, int, int, int, int)
TypeAdapter.fromJsonTree(TypeAdapter, JsonElement)
TileEntity.getPos(TileEntity)
EntityPlayer.getScore(EntityPlayer)
CompositeByteBuf.writeFloat(CompositeByteBuf, float | CompositeByteBuf, float)
RenderChunk.initModelviewMatrix(RenderChunk)
Gson.checkValidFloatingPoint(double)
SoundManager.isSoundPlaying(SoundManager, ISound)
CombatTracker.getDeathMessage(CombatTracker)
EntityPlayer.unlockRecipes(EntityPlayer, List | EntityPlayer, ResourceLocation[])
BigInteger.min(BigInteger, BigInteger)
Font.isBold(Font)
AccessibleRelation.getTarget(AccessibleRelation)
DamageSource.causeIndirectMagicDamage(Entity, Entity)
VolatileImage.createGraphics(VolatileImage)
Spliterator.forEachRemaining(Spliterator, Consumer)
WorldInfo.isMapFeaturesEnabled(WorldInfo)
CriterionProgress.write(CriterionProgress, PacketBuffer)
AttributeValues.getSwapColors(AttributeValues)
FramePeer.setMenuBar(FramePeer, MenuBar)
NibbleArray.getCoordinateIndex(NibbleArray, int, int, int)
Entity.hashCode(Entity)
ThreadLocalMap.getEntry(ThreadLocalMap, ThreadLocal)
ByteBuffer.putLong(ByteBuffer, long | ByteBuffer, int, long)
SpanIterator.nextSpan(SpanIterator, int[])
BigInteger.montgomeryMultiply(int[], int[], int[], int, long, int[])
URLClassPath.getNextLoader(URLClassPath, int[], int)
Component.createBufferStrategy(Component, int | Component, int, BufferCapabilities)
Pair.hashCode(Pair)
IChunkGenerator.generateStructures(IChunkGenerator, Chunk, int, int)
BufferBuilder.pos(BufferBuilder, double, double, double)
Quaternion.store(Quaternion, FloatBuffer)
EntityItem.setItem(EntityItem, ItemStack)
MemberName.isField(MemberName)
File.length(File)
Block.createBlockState(Block)
BufferBuilder.putColorRGB_F4(BufferBuilder, float, float, float)
ZoneRules.readExternal(DataInput)
ThreadLocalMap.set(ThreadLocalMap, ThreadLocal, Object)
LocalDateTime.withNano(LocalDateTime, int)
EventQueue.isDispatchThread()
AccessControlContext.equalLimitedContext(AccessControlContext, AccessControlContext)
TypeVariable.getGenericDeclaration(TypeVariable)
Multimap.containsValue(Multimap, Object)
EntityPlayerMP.onItemPickup(EntityPlayerMP, Entity, int)
OffsetDateTime.writeExternal(OffsetDateTime, ObjectOutput)
FontMetrics.initIDs()
Class.getSimpleName(Class)
InetAddress.hashCode(InetAddress)
ChronoPeriod.isZero(ChronoPeriod)
EventQueue.access$200(EventQueue, FwDispatcher)
ImmutableMultimap.values(ImmutableMultimap | ImmutableMultimap)
ByteBuf.retainedDuplicate(ByteBuf)
EntityRenderer.renderRainSnow(EntityRenderer, float)
ExtendedBlockStorage.getYLocation(ExtendedBlockStorage)
FontRenderer.renderDefaultChar(FontRenderer, int, boolean)
AdvancementManager.loadCustomAdvancements(AdvancementManager)
JsonObject.addProperty(JsonObject, String, String | JsonObject, String, Number | JsonObject, String, Boolean | JsonObject, String, Character)
BaseCalendar.getCalendarDateFromFixedDate(BaseCalendar, CalendarDate, long)
ReentrantLock.hasWaiters(ReentrantLock, Condition)
CompositeByteBuf.isDirect(CompositeByteBuf)
CharToGlyphMapper.charsToGlyphs(CharToGlyphMapper, int, int[], int[] | CharToGlyphMapper, int, char[], int[])
EntityItem.getOwner(EntityItem)
URI.access$3200()
AccessibleValue.setCurrentAccessibleValue(AccessibleValue, Number)
Manifest.equals(Manifest, Object)
FontRenderContext.equals(FontRenderContext, FontRenderContext | FontRenderContext, Object)
PathNavigate.tryMoveToEntityLiving(PathNavigate, Entity, double)
File.toURL(File)
PotionEffect.doesShowParticles(PotionEffect)
Long.equals(Long, Object)
File.toURI(File)
FramePeer.getState(FramePeer)
MinecraftServer.getPlayerProfileCache(MinecraftServer)
IProperty.getAllowedValues(IProperty)
Players.getPlayers(Players)
Component.reshapeNativePeer(Component, int, int, int, int, int)
Window.isAutoRequestFocus(Window)
Potion.getName(Potion)
ImmutableMultiset.toString(ImmutableMultiset)
Minecraft.access$000(Minecraft)
BigInteger.squareToomCook3(BigInteger)
LocalDate.isLeapYear(LocalDate)
TextureAtlasSprite.hasAnimationMetadata(TextureAtlasSprite)
Entity.applyOrientationToEntity(Entity, Entity)
World.notifyNeighborsRespectDebug(World, BlockPos, Block, boolean)
Field.getBoolean(Field, Object)
ByteBufAllocator.compositeHeapBuffer(ByteBufAllocator | ByteBufAllocator, int)
ServerStatusResponse.getVersion(ServerStatusResponse)
JsonWriter.isHtmlSafe(JsonWriter)
ThreadLocalMap.rehash(ThreadLocalMap)
Date.toLocaleString(Date)
Optional.equals(Optional, Object | Optional, Object)
Lookup.findSpecial(Lookup, Class, String, MethodType, Class)
TypeAdapter.read(TypeAdapter, JsonReader)
RenderChunk.setCompiledChunk(RenderChunk, CompiledChunk)
ItemStack.isItemEqual(ItemStack, ItemStack)
EntityItem.writeEntityToNBT(EntityItem, NBTTagCompound)
EntityMinecart.getRollingDirection(EntityMinecart)
ChoicePeer.remove(ChoicePeer, int)
ReferenceCounted.retain(ReferenceCounted, int | ReferenceCounted)
LineMetrics.getStrikethroughThickness(LineMetrics)
NBTTagList.isEmpty(NBTTagList)
Snooper.access$100(Snooper)
Entity.setEntityBoundingBox(Entity, AxisAlignedBB)
ByteBuf.getShortLE(ByteBuf, int)
Random.nextGaussian(Random)
Integer.rotateRight(int, int)
Handle.continueReading(Handle)
TypeAdapter.nullSafe(TypeAdapter)
MinecraftServer.getNetworkCompressionThreshold(MinecraftServer)
BigInteger.probablePrime(int, Random)
OffsetDateTime.plus(OffsetDateTime, long, TemporalUnit | OffsetDateTime, TemporalAmount | OffsetDateTime, long, TemporalUnit | OffsetDateTime, TemporalAmount)
Collector.accumulator(Collector)
LongBuffer.asReadOnlyBuffer(LongBuffer)
Minecraft.shutdownMinecraftApplet(Minecraft)
Block.dropBlockAsItem(Block, World, BlockPos, IBlockState, int)
LangReflectAccess.copyConstructor(LangReflectAccess, Constructor)
Block.getAmbientOcclusionLightValue(Block, IBlockState)
EventQueue.getMostRecentEventTimeImpl(EventQueue)
Chunk.isEmpty(Chunk)
EntityDataManager.setEntry(EntityDataManager, DataParameter, Object)
UserListWhitelist.getKeys(UserListWhitelist)
EntityLiving.setEnchantmentBasedOnDifficulty(EntityLiving, DifficultyInstance)
World.getSunBrightnessBody(World, float)
Boolean.compareTo(Boolean, Object | Boolean, Boolean)
ChronoZonedDateTime.isSupported(ChronoZonedDateTime, TemporalField | ChronoZonedDateTime, TemporalUnit)
WorldInfo.setSaveVersion(WorldInfo, int)
Window.removeOwnedWindow(Window, WeakReference)
EntityPlayer.hasCapability(EntityPlayer, Capability, EnumFacing)
ImmutableList.asList(ImmutableList)
EntityItem.combineItems(EntityItem, EntityItem)
Multiset.hashCode(Multiset)
Item.getSmeltingExperience(Item, ItemStack)
ListenerListInst.unregister(ListenerListInst, IEventListener)
Block.getSlipperiness(Block, IBlockState, IBlockAccess, BlockPos, Entity)
Window.setSize(Window, Dimension | Window, int, int)
ThreadLocal.createMap(ThreadLocal, Thread, Object)
ScaledResolution.getScaledWidth_double(ScaledResolution)
BigDecimal.layoutChars(BigDecimal, boolean)
WorldServer.tickUpdates(WorldServer, boolean)
NodeProcessor.getCanSwim(NodeProcessor)
IAttributeInstance.getModifiersByOperation(IAttributeInstance, int)
PropertyChangeSupport.addPropertyChangeListener(PropertyChangeSupport, String, PropertyChangeListener | PropertyChangeSupport, PropertyChangeListener)
OffsetDateTime.truncatedTo(OffsetDateTime, TemporalUnit)
URL.equals(URL, Object)
NetHandlerPlayClient.handleSpawnMob(NetHandlerPlayClient, SPacketSpawnMob)
Calendar.isFieldSet(int, int)
CreativeTabs.drawInForegroundOfTab(CreativeTabs)
Integer.compareUnsigned(int, int)
RenderManager.renderMultipass(RenderManager, Entity, float)
IChunkLoader.flush(IChunkLoader)
ChannelFuture.addListener(ChannelFuture, GenericFutureListener)
Multiset.forEachEntry(Multiset, ObjIntConsumer)
NibbleArray.getNibbleIndex(NibbleArray, int)
LocalDateTime.minusWeeks(LocalDateTime, long)
FontRenderer.doDraw(FontRenderer, float)
Graphics.drawString(Graphics, String, int, int | Graphics, AttributedCharacterIterator, int, int)
InputStream.skip(InputStream, long)
BaseStream.unordered(BaseStream)
EntityPlayer.getSoundCategory(EntityPlayer)
EntityMinecart.registerFixesMinecart(DataFixer, Class)
Vector3f.dot(Vector3f, Vector3f)
StringBuilder.lastIndexOf(StringBuilder, String, int | StringBuilder, String)
MinecraftServer.setCanSpawnAnimals(MinecraftServer, boolean)
MinecraftServer.callFromMainThread(MinecraftServer, Callable)
ChronoLocalDateTime.toInstant(ChronoLocalDateTime, ZoneOffset)
DoubleBuffer.isDirect(DoubleBuffer)
ValueRange.toString(ValueRange)
ZoneOffset.of(String)
EnumFacing.byIndex(int)
EntityPlayer.addExperience(EntityPlayer, int)
BigInteger.getPrimeSearchLen(int)
Component.setEnabled(Component, boolean)
ComponentPeer.setForeground(ComponentPeer, Color)
World.isOutsideBuildHeight(World, BlockPos)
ModelBiped.setModelAttributes(ModelBiped, ModelBase)
Iterator.next(Iterator)
ChunkPos.getXStart(ChunkPos)
Promise.await(Promise)
Double.intValue(Double)
ShaderUniform.setSafe(ShaderUniform, float, float, float, float)
LambdaForm.internArgument(Name)
AttributeValues.i_validate(AttributeValues, EAttribute)
Long.compareTo(Long, Long | Long, Object)
OffsetTime.writeReplace(OffsetTime)
EntityLiving.isLeftHanded(EntityLiving)
OffsetTime.minusHours(OffsetTime, long)
Container.getComponents(Container)
BlockModelRenderer.renderModelBrightness(BlockModelRenderer, IBakedModel, IBlockState, float, boolean)
Constructor.getDeclaredAnnotations(Constructor)
FontRenderer.setColor(FontRenderer, float, float, float, float)
Method.getDefaultValue(Method)
ServerData.copyFrom(ServerData, ServerData)
Enumeration.nextElement(Enumeration)
SoundCategory.valueOf(String)
StatisticsManagerServer.unlockAchievement(StatisticsManagerServer, EntityPlayer, StatBase, int)
Component.clearCurrentFocusCycleRootOnHide(Component)
IntStream.range(int, int)
Block.withRotation(Block, IBlockState, Rotation)
ColorSpace.getNumComponents(ColorSpace)
Logger.traceExit(Logger, Message, Object | Logger, EntryMessage | Logger, EntryMessage, Object | Logger | Logger, String, Object | Logger, Object)
Calendar.setUnnormalized(Calendar)
SampleModel.getTransferType(SampleModel)
AbstractAttributeMap.removeAttributeModifiers(AbstractAttributeMap, Multimap)
BigDecimal.precision(BigDecimal | long, long)
ZoneRules.hashCode(ZoneRules)
JsonReader.close(JsonReader)
SampleModel.getPixel(SampleModel, int, int, double[], DataBuffer | SampleModel, int, int, int[], DataBuffer | SampleModel, int, int, float[], DataBuffer)
Logger.atWarn(Logger)
LocaleExtensions.equals(LocaleExtensions, Object)
MethodType.checkSlotCount(int)
Method.getMethodAccessor(Method)
EntityLivingBase.damageArmor(EntityLivingBase, float)
Quaternion.setFromMat(Quaternion, float, float, float, float, float, float, float, float, float)
ShaderUniform.set(ShaderUniform, float, float, float, float | ShaderUniform, float | ShaderUniform, float, float, float | ShaderUniform, float[] | ShaderUniform, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float | ShaderUniform, int, int, int, int | ShaderUniform, Matrix4f | ShaderUniform, float, float)
ComponentPeer.createImage(ComponentPeer, ImageProducer | ComponentPeer, int, int)
InetAddress.isMCLinkLocal(InetAddress)
DisplayMode.equals(DisplayMode, Object | DisplayMode, DisplayMode)
ChannelHandlerContext.handler(ChannelHandlerContext)
BlockModelShapes.getBlockStateMapper(BlockModelShapes)
World.addWeatherEffect(World, Entity)
Score.decreaseScore(Score, int)
Period.getUnits(Period)
ChannelOutboundBuffer.setUnwritable(ChannelOutboundBuffer, boolean)
EntityLivingBase.dropLoot(EntityLivingBase, boolean, int, DamageSource)
Future.addListeners(Future, GenericFutureListener[])
Toolkit.removePropertyChangeListener(Toolkit, String, PropertyChangeListener)
Entity.getCustomNameTag(Entity)
InetAddressHolder.getOriginalHostName(InetAddressHolder)
String.length(String)
BlockFlower.damageDropped(BlockFlower, IBlockState)
RenderingHints.putAll(RenderingHints, Map)
Name.cloneWithIndex(Name, int)
ZoneRules.isFixedOffset(ZoneRules)
Wrapper.zero(Wrapper, Class | Wrapper)
DayOfWeek.getValue(DayOfWeek)
EntityMinecart.moveMinecartOnRail(EntityMinecart, BlockPos)
Calendar.getFieldStrings(Calendar, int, int, DateFormatSymbols)
Optional.orElse(Optional, Object)
Biome.getDefaultTemperature(Biome)
EntityMinecart.getMaxSpeedAirVertical(EntityMinecart)
AccessibleComponent.getLocation(AccessibleComponent)
ItemStack.isEmpty(ItemStack)
Village.setDefaultPlayerReputation(Village, int)
ComponentPeer.layout(ComponentPeer)
MapColor.getBlockColor(EnumDyeColor)
Window.canContainFocusOwner(Window, Component)
Set.isEmpty(Set)
Vector.toArray(Vector | Vector, Object[])
Region.isRectangular(Region)
Score.setScorePoints(Score, int)
JsonReader.beginArray(JsonReader)
AccessibleRelationSet.add(AccessibleRelationSet, AccessibleRelation)
ImmutableList.lastIndexOf(ImmutableList, Object)
PlayerChunkMap.getFurthestViewableBlock(int)
LocalDate.isEqual(LocalDate, ChronoLocalDate)
Optional.orElseGet(Optional, Supplier)
ChronoPeriod.negated(ChronoPeriod)
Composite.createContext(Composite, ColorModel, ColorModel, RenderingHints)
LootTableManager.reloadLootTables(LootTableManager)
InputEvent.getModifiers(InputEvent)
ByteBuffer._get(ByteBuffer, int)
ScaledResolution.getScaleFactor(ScaledResolution)
Lookup.findGetter(Lookup, Class, String, Class)
HorseArmorType.getByOrdinal(int)
ChronoZonedDateTime.toInstant(ChronoZonedDateTime)
BigInteger.bitLength(int[], int | BigInteger)
MethodType.setForm(MethodType, MethodTypeForm)
CombatTracker.getCombatDuration(CombatTracker)
GlyphVector.setGlyphPosition(GlyphVector, int, Point2D)
Graphics.drawChars(Graphics, char[], int, int, int, int)
Excluder.clone(Excluder | Excluder)
FileTime.from(long, TimeUnit | Instant)
Block.canBeConnectedTo(Block, IBlockAccess, BlockPos, EnumFacing)
LocalDate.monthsUntil(LocalDate, LocalDate)
EntityPlayer.readEntityFromNBT(EntityPlayer, NBTTagCompound)
PlayerAdvancements.startProgress(PlayerAdvancements, Advancement, AdvancementProgress)
LambdaFormBuffer.indexOf(NamedFunction, NamedFunction[] | Name, Name[])
AppContext.remove(AppContext, Object)
IdentityArrayList.contains(IdentityArrayList, Object)
DoubleStream.empty()
BufferedImage.createGraphics(BufferedImage)
Minecraft.getSearchTree(Minecraft, Key)
Executable.getAnnotation(Executable, Class)
GameSettings.getTranslation(String[], int)
Style.setStrikethrough(Style, Boolean)
BigInteger.not(BigInteger)
Framebuffer.setFramebufferFilter(Framebuffer, int)
EntityLivingBase.updateDistance(EntityLivingBase, float, float)
ChannelPromise.addListener(ChannelPromise, GenericFutureListener)
AttributeValues.setTracking(AttributeValues, float)
OffsetTime.writeExternal(OffsetTime, ObjectOutput)
Component.isFontSet(Component)
RenderLivingBase.setBrightness(RenderLivingBase, EntityLivingBase, float, boolean)
StateImplementation.getMapColor(StateImplementation, IBlockAccess, BlockPos)
MouseInfoPeer.isWindowUnderMouse(MouseInfoPeer, Window)
URI.toUpper(char)
Constructor.getConstructorAccessor(Constructor)
Framebuffer.createFramebuffer(Framebuffer, int, int)
MapStorage.saveData(MapStorage, WorldSavedData)
NodeProcessor.findPathOptions(NodeProcessor, PathPoint[], PathPoint, PathPoint, float)
TileEntity.hasWorld(TileEntity)
Packet.writePacketData(Packet, PacketBuffer)
Comparator.lambda$comparing$77a9974f$1(Function, Object, Object)
URLConnection.setUseCaches(URLConnection, boolean)
Window.updateChildFocusableWindowState(Window)
Set.retainAll(Set, Collection)
Package.access$400()
NumericShaper.equals(NumericShaper, Object)
PlayerList.removeAllPlayers(PlayerList)
ImmutableSet.copyOf(Object[] | Collection | Iterator | Iterable)
NetHandlerPlayClient.sendPacket(NetHandlerPlayClient, Packet)
Integer.reverse(int)
EntityItemFrame.getRotation(EntityItemFrame)
ByteBuf.readUnsignedIntLE(ByteBuf)
Block.isPassable(Block, IBlockAccess, BlockPos)
BigDecimal.round(BigDecimal, MathContext)
EntityPlayerMP.unlockRecipes(EntityPlayerMP, List | EntityPlayerMP, ResourceLocation[])
Component.isFocusCycleRoot(Component, Container)
LootTable.fillInventory(LootTable, IInventory, Random, LootContext)
AccessibleComponent.getForeground(AccessibleComponent)
TileEntity.setWorld(TileEntity, World)
LambdaForm.methodType(LambdaForm)
Component.applyCurrentShape(Component)
GraphicsDevice.getAvailableAcceleratedMemory(GraphicsDevice)
Entity.isEntityInsideOpaqueBlock(Entity)
JsonObject.add(JsonObject, String, JsonElement)
AtomicInteger.get(AtomicInteger)
ItemRenderer.renderArm(ItemRenderer, EnumHandSide)
Snooper.addClientStat(Snooper, String, Object)
InputMethodRequests.getLocationOffset(InputMethodRequests, int, int)
Window.clearMostRecentFocusOwnerOnHide(Window)
URI.hashCode(URI)
Double.byteValue(Double)
Tutorial.getMinecraft(Tutorial)
FileLock.release(FileLock)
LocalDateTime.plusWithOverflow(LocalDateTime, LocalDate, long, long, long, long, int)
Minecraft.checkGLError(Minecraft, String)
Potion.hasStatusIcon(Potion)
RecipeBookServer.read(RecipeBookServer, NBTTagCompound)
WorldServer.tick(WorldServer)
ColorModel.getPixelSize(ColorModel)
Collection.iterator(Collection)
Thread.getId(Thread)
ByteBuf.discardSomeReadBytes(ByteBuf)
Duration.addTo(Duration, Temporal)
AxisDirection.toString(AxisDirection)
Path.getPathPointFromIndex(Path, int)
Framebuffer.deleteFramebuffer(Framebuffer)
Style.access$002(Style, Boolean)
ImmutableMultiset.getEntry(ImmutableMultiset, int)
Style.access$000(Style)
ChunkCompileTaskGenerator.setStatus(ChunkCompileTaskGenerator, Status)
LocalDateTime.minus(LocalDateTime, long, TemporalUnit | LocalDateTime, long, TemporalUnit | LocalDateTime, TemporalAmount | LocalDateTime, TemporalAmount | LocalDateTime, TemporalAmount | LocalDateTime, long, TemporalUnit)
DifficultyInstance.getClampedAdditionalDifficulty(DifficultyInstance)
EnumChatVisibility.getChatVisibility(EnumChatVisibility)
BufferBuilder.noColor(BufferBuilder)
ImmutableCollection.asList(ImmutableCollection)
Clipboard.isDataFlavorAvailable(Clipboard, DataFlavor)
Date.setNormalizedDate(Date, int, int, int)
GameType.parseGameTypeWithDefault(String, GameType | int, GameType)
RenderGlobal.getRenderChunkOffset(RenderGlobal, BlockPos, RenderChunk, EnumFacing)
Wrapper.asPrimitiveType(Class)
File.createNewFile(File)
ZoneRules.getDaylightSavings(ZoneRules, Instant)
Container.checkGD(Container, String)
NamedFunction.arity(NamedFunction)
Axis.isHorizontal(Axis)
BufferBuilder.putColorMultiplier(BufferBuilder, float, float, float, int)
FloatBuffer.array(FloatBuffer | FloatBuffer)
Component.deliverEvent(Component, Event)
Executable.getParameters0(Executable)
NamedFunction.arityCheck(int, Class, MethodHandle, Object[] | int, MethodHandle, Object[])
ResourceBundle.getLoader(Class)
UUID.fromString(String)
EntityPlayer.getAlwaysRenderNameTagForRender(EntityPlayer)
AxisAlignedBB.calculateIntercept(AxisAlignedBB, Vec3d, Vec3d)
GlyphMetrics.getLSB(GlyphMetrics)
TextFormatting.getFriendlyName(TextFormatting)
AppContext.isMainContext(AppContext)
Chronology.compareTo(Chronology, Chronology | Chronology, Object)
Scoreboard.getObjective(Scoreboard, String)
Invokers.maybeCustomize(MethodHandle)
ClassLoader.findResources(ClassLoader, String)
IntBuffer.isDirect(IntBuffer)
DragSourceContext.getTrigger(DragSourceContext)
DamageSource.setDamageAllowedInCreativeMode(DamageSource)
FileLock.channel(FileLock)
LocalTime.withMinute(LocalTime, int)
Village.isBlockPosWithinSqVillageRadius(Village, BlockPos)
RenderGlobal.lambda$renderBlockLayer$0(BlockRenderLayer)
Multimap.hashCode(Multimap)
Minecraft.isAmbientOcclusionEnabled()
Gson.doubleAdapter(Gson, boolean)
URLStreamHandler.openConnection(URLStreamHandler, URL | URLStreamHandler, URL, Proxy)
InetAddress.getAllByName0(String, boolean | String | String, InetAddress, boolean)
World.getProviderName(World)
DragGestureRecognizer.getDragSource(DragGestureRecognizer)
Class.getProtectionDomain0(Class)
CharBuffer.get(CharBuffer | CharBuffer, char[] | CharBuffer, int | CharBuffer, char[], int, int)
PathNavigate.removeSunnyPath(PathNavigate)
EntityPlayer.isInBed(EntityPlayer)
EntityRenderer.isShaderActive(EntityRenderer)
VertexFormat.getIntegerSize(VertexFormat)
MethodTypeForm.erasedType(MethodTypeForm)
World.isAirBlock(World, BlockPos)
IBlockState.getPropertyKeys(IBlockState)
Entity.addTrackingPlayer(Entity, EntityPlayerMP)
NBTTagCompound.readType(DataInput, NBTSizeTracker)
LocalDate.get(LocalDate, TemporalField)
BlockPos.offset(BlockPos, EnumFacing, int | BlockPos, EnumFacing)
EntityLivingBase.getFallSound(EntityLivingBase, int)
EntityPlayerMP.isCreative(EntityPlayerMP)
AttributeValues.setFont(AttributeValues, Font)
URI.access$3100()
StackTraceElement.toString(StackTraceElement)
Color.getGreen(Color)
Comparator.comparing(Function, Comparator | Function)
Chunk.removeTileEntity(Chunk, BlockPos)
EntityMinecart.setRollingDirection(EntityMinecart, int)
FontRenderContext.getAntiAliasingHint(FontRenderContext)
OptionalLong.isPresent(OptionalLong)
Window.postWindowEvent(Window, int)
WorldServer.setInitialSpawnLocation(WorldServer)
PotionEffect.getAmplifier(PotionEffect)
NetHandlerPlayClient.handleBlockChange(NetHandlerPlayClient, SPacketBlockChange)
Quaternion.normalise(Quaternion, Quaternion | Quaternion, Quaternion)
GraphicAttribute.getDescent(GraphicAttribute)
Minecraft.isSnooperEnabled(Minecraft)
IPlayerFileData.getAvailablePlayerDat(IPlayerFileData)
Container.applyComponentOrientation(Container, ComponentOrientation)
Item.shouldCauseReequipAnimation(Item, ItemStack, ItemStack, boolean)
Date.from(Instant)
AbstractStringBuilder.hugeCapacity(AbstractStringBuilder, int)
Teleporter.placeInPortal(Teleporter, Entity, float)
OfLong.forEachRemaining(OfLong, Consumer | OfLong, Consumer | OfLong, LongConsumer | OfLong, Object | OfLong, Object | OfLong, LongConsumer)
Instant.nanosUntil(Instant, Instant)
ClassLoader.getBootstrapResources(String)
BasicFileAttributes.isDirectory(BasicFileAttributes)
Chronology.period(Chronology, int, int, int)
ChronoPeriod.multipliedBy(ChronoPeriod, int)
Lookup.toString(Lookup)
Locale.getDisplayCountry(Locale | Locale, Locale)
AtomicInteger.getAndIncrement(AtomicInteger)
Point2D.clone(Point2D)
Entity.isInRangeToRenderDist(Entity, double)
GenLayer.nextLong(GenLayer, long)
Component.updateZOrder(Component)
ZonedDateTime.resolveLocal(ZonedDateTime, LocalDateTime)
CreativeTabs.getSearchbarWidth(CreativeTabs)
GraphicsDevice.getIDstring(GraphicsDevice)
FileSystemProvider.createDirectory(FileSystemProvider, Path, FileAttribute[])
EventQueue.access$100(EventQueue, boolean)
URI.defineString(URI)
ChronoZonedDateTime.compareTo(ChronoZonedDateTime, ChronoZonedDateTime | ChronoZonedDateTime, Object)
Map.replaceAll(Map, BiFunction)
Biome.getFoliageColorAtPos(Biome, BlockPos)
ChannelConfig.setConnectTimeoutMillis(ChannelConfig, int)
Collection.remove(Collection, Object)
PlayerAdvancements.flushDirty(PlayerAdvancements, EntityPlayerMP)
Entity.hasCapability(Entity, Capability, EnumFacing)
WorldInfo.getWorldName(WorldInfo)
WorldServer.isBlockModifiable(WorldServer, EntityPlayer, BlockPos)
BigInteger.square(BigInteger, boolean | BigInteger)
BigInteger.subtract(long, int[] | BigInteger, BigInteger | int[], int[] | int[], long)
Pair.compareTo(Pair, Pair | Pair, Object)
FloatBuffer.isDirect(FloatBuffer)
RenderGlobal.generateStars(RenderGlobal)
UncaughtExceptionHandler.uncaughtException(UncaughtExceptionHandler, Thread, Throwable)
Wrapper.isUnsigned(Wrapper)
Executable.getAnnotatedReturnType(Executable)
ArrayList.removeRange(ArrayList, int, int)
Block.setSoundType(Block, SoundType)
RenderLivingBase.prepareScale(RenderLivingBase, EntityLivingBase, float)
JsonPrimitive.getAsString(JsonPrimitive)
EntityPlayer.travel(EntityPlayer, float, float, float)
DialogPeer.blockWindows(DialogPeer, List)
Spliterator.trySplit(Spliterator)
File.writeObject(File, ObjectOutputStream)
Biome.getModdedBiomeGrassColor(Biome, int)
ThreadGroup.stop(ThreadGroup)
GlyphMetrics.getAdvance(GlyphMetrics)
Clipboard.addFlavorListener(Clipboard, FlavorListener)
NetHandlerPlayClient.handleRecipeBook(NetHandlerPlayClient, SPacketRecipeBook)
LabelPeer.setText(LabelPeer, String)
CompiledChunk.isLayerEmpty(CompiledChunk, BlockRenderLayer)
EntityPlayer.addExperienceLevel(EntityPlayer, int)
FileSystemProvider.deleteIfExists(FileSystemProvider, Path)
IntBuffer.toString(IntBuffer)
EntityLivingBase.isChild(EntityLivingBase)
EntityLiving.getHeldEquipment(EntityLiving)
File.hashCode(File)
RenderChunk.postRenderBlocks(RenderChunk, BlockRenderLayer, float, float, float, BufferBuilder, CompiledChunk)
LootPool.setBonusRolls(LootPool, RandomValueRange)
ScorePlayerTeam.setSuffix(ScorePlayerTeam, String)
PlayerChunkMapEntry.hasPlayerMatching(PlayerChunkMapEntry, Predicate)
RenderGlobal.makeEntityOutlineShader(RenderGlobal)
SpeciesData.extendWith(SpeciesData, byte | SpeciesData, BasicType)
List.set(List, int, Object)
Chronology.date(Chronology, TemporalAccessor | Chronology, int, int, int | Chronology, Era, int, int, int)
Watchable.register(Watchable, WatchService, Kind[], Modifier[] | Watchable, WatchService, Kind[])
File.createTempFile(String, String, File | String, String)
Snooper.access$200(Snooper)
IMinecartCollisionHandler.getMinecartCollisionBox(IMinecartCollisionHandler, EntityMinecart)
Duration.create(boolean, long, long, long, long, int | long, int | BigDecimal)
BasicFileAttributes.isOther(BasicFileAttributes)
ClassRepository.parse(ClassRepository, String | ClassRepository, String)
LongStream.flatMap(LongStream, LongFunction)
EnumRenderType.getByName(String)
DamageSource.setDamageIsAbsolute(DamageSource)
Entity.isRidingSameEntity(Entity, Entity)
ZonedDateTime.ofStrict(LocalDateTime, ZoneOffset, ZoneId)
FontRenderer.renderChar(FontRenderer, char, boolean)
Render.getTeamColor(Render, Entity)
InetAddress.isSiteLocalAddress(InetAddress)
CooldownTracker.notifyOnRemove(CooldownTracker, Item)
Block.getPlayerRelativeBlockHardness(Block, IBlockState, EntityPlayer, World, BlockPos)
ZoneOffset.getTotalSeconds(ZoneOffset)
WorldInfo.setMapFeaturesEnabled(WorldInfo, boolean)
AccessControlContext.getDebug()
CollectorState.combine(CollectorState, CollectorState, BinaryOperator)
Container.minimumSize(Container)
MemberName.getClassLoader(MemberName)
Entity.getMountedYOffset(Entity)
ReflectionFactory.newConstructorForExternalization(ReflectionFactory, Class)
Side.values()
OffsetTime.isEqual(OffsetTime, OffsetTime)
JsonReader.nextQuotedValue(JsonReader, char)
Instant.ofEpochSecond(long | long, long)
Gson.assertFullConsumption(Object, JsonReader)
InetAddress.cacheAddresses(String, InetAddress[], boolean)
Wrapper.hashPrim(Class)
Hashtable.clone(Hashtable)
Font.access$000(Font)
File.getCanonicalFile(File)
Calendar.isSet(Calendar, int)
LocalTime.isSupported(LocalTime, TemporalUnit | LocalTime, TemporalField)
PathNodeType.values()
CompositeByteBuf.markReaderIndex(CompositeByteBuf | CompositeByteBuf)
ThreadGroup.stopOrSuspend(ThreadGroup, boolean)
Executable.getParameterCount(Executable)
ThreadLocal.remove(ThreadLocal)
IBlockState.getBlock(IBlockState)
IAttributeInstance.getAttributeValue(IAttributeInstance)
MenuPeer.addSeparator(MenuPeer)
Builder.toString(Builder)
Hashtable.replace(Hashtable, Object, Object, Object | Hashtable, Object, Object)
ImmutableCollection.retainAll(ImmutableCollection, Collection)
SoundType.getHitSound(SoundType)
Component.removeNotify(Component)
ISound.getCategory(ISound)
JsonReader.nextName(JsonReader)
Scoreboard.getObjectivesFromCriteria(Scoreboard, IScoreCriteria)
Container.hasHeavyweightDescendants(Container)
EntityMinecart.setMaxSpeedAirLateral(EntityMinecart, float)
TextureMap.getTextureExtry(TextureMap, String)
Instant.minus(Instant, TemporalAmount | Instant, long, TemporalUnit | Instant, TemporalAmount | Instant, long, TemporalUnit)
Entity.move(Entity, MoverType, double, double, double)
ZoneRules.isDaylightSavings(ZoneRules, Instant)
LocalDateTime.withHour(LocalDateTime, int)
AxisAlignedBB.toString(AxisAlignedBB)
Random.ints(Random | Random, int, int | Random, long, int, int | Random, long)
Toolkit.initIDs()
ISound.getXPosF(ISound)
DesktopPeer.mail(DesktopPeer, URI)
BlockStateMapper.getBlockstateLocations(BlockStateMapper, Block)
Optional.get(Optional | Optional)
InetAddress.isMCNodeLocal(InetAddress)
BigDecimal.compareMagnitude(BigDecimal, BigDecimal)
Class.getName0(Class)
EntityLiving.getExperiencePoints(EntityLiving, EntityPlayer)
URLStreamHandler.toExternalForm(URLStreamHandler, URL)
Builder.orderRowsBy(Builder, Comparator)
Minecraft.getAmbientMusicType(Minecraft)
Vector.setSize(Vector, int)
Container.paintHeavyweightComponents(Container, Graphics)
SampleModel.setDataElements(SampleModel, int, int, Object, DataBuffer | SampleModel, int, int, int, int, Object, DataBuffer)
Component.isShowing(Component)
Block.fillWithRain(Block, World, BlockPos)
Era.isSupported(Era, TemporalField)
FontLineMetrics.getStrikethroughOffset(FontLineMetrics)
VillageDoorInfo.getDistanceToDoorBlockSq(VillageDoorInfo, BlockPos)
URI.hash(int, String)
OffsetDateTime.minusMinutes(OffsetDateTime, long)
WorldInfo.updateTagCompound(WorldInfo, NBTTagCompound, NBTTagCompound)
Stream.anyMatch(Stream, Predicate)
GuiToast.clear(GuiToast)
LambdaForm.getPreparedForm(String)
Entity.isSpectatedByPlayer(Entity, EntityPlayerMP)
LambdaForm.interpretName(LambdaForm, Name, Object[])
ItemStack.writeToNBT(ItemStack, NBTTagCompound)
Executable.getRoot(Executable)
BoundMethodHandle.speciesData_L()
Field.getChar(Field, Object)
Set.hashCode(Set)
Class.getConstantPool(Class)
Item.canDisableShield(Item, ItemStack, ItemStack, EntityLivingBase, EntityLivingBase)
StateImplementation.isFullBlock(StateImplementation)
LanguageManager.isCurrentLocaleUnicode(LanguageManager)
RecipeBookServer.add(RecipeBookServer, List, EntityPlayerMP)
InputContext.endComposition(InputContext)
MinecraftServer.saveAllWorlds(MinecraftServer, boolean)
AtomicInteger.getAndAdd(AtomicInteger, int)
Component.isMaximumSizeSet(Component)
EntityItem.setAgeToCreativeDespawnTime(EntityItem)
Potion.setBeneficial(Potion)
Window.initGC(Window, GraphicsConfiguration)
NonNullList.size(NonNullList)
Resource.getDataError(Resource)
WorldServer.updateWeather(WorldServer)
AccessibleComponent.getSize(AccessibleComponent)
DataParameter.getId(DataParameter)
CompositeByteBuf.internalComponentAtOffset(CompositeByteBuf, int)
ByteBuf.readIntLE(ByteBuf)
LongStream.sum(LongStream)
NetHandlerPlayClient.handleChat(NetHandlerPlayClient, SPacketChat)
ChronoLocalDate.isEqual(ChronoLocalDate, ChronoLocalDate)
Component.getBackBuffer(Component)
AdvancementProgress.isDone(AdvancementProgress)
World.checkNoEntityCollision(World, AxisAlignedBB | World, AxisAlignedBB, Entity)
GraphicsConfiguration.isTranslucencyCapable(GraphicsConfiguration)
BlockModelShapes.reloadModels(BlockModelShapes)
Container.getAccessibleAt(Container, Point)
MemberName.isResolved(MemberName)
EntityLivingBase.updateFallState(EntityLivingBase, double, boolean, IBlockState, BlockPos)
MethodTypeForm.setCachedMethodHandle(MethodTypeForm, int, MethodHandle)
NetworkSystem.access$000(NetworkSystem)
AxisAlignedBB.equals(AxisAlignedBB, Object)
Class.getGenericInfo(Class)
GameRules.getRules(GameRules)
Attributes.values(Attributes)
NetHandlerPlayClient.handleSoundEffect(NetHandlerPlayClient, SPacketSoundEffect)
Attributes.containsValue(Attributes, Object)
Scoreboard.onScoreObjectiveAdded(Scoreboard, ScoreObjective)
CompiledChunk.isEmpty(CompiledChunk)
TileEntity.access$000()
GameSettings.getKeyBinding(GameSettings, Options)
Window.isAlwaysOnTop(Window)
FloatBuffer.toString(FloatBuffer)
BiomeProvider.getTemperatureAtHeight(BiomeProvider, float, int)
FileNameMap.getContentTypeFor(FileNameMap, String)
MappedByteBuffer.mappingAddress(MappedByteBuffer, long)
Quaternion.setZ(Quaternion, float)
Quaternion.setX(Quaternion, float)
Quaternion.set(Quaternion, float, float, float, float | Quaternion, float, float, float | Quaternion, ReadableVector4f | Quaternion, float, float)
Quaternion.setY(Quaternion, float)
Quaternion.setW(Quaternion, float)
URI.getQuery(URI)
Logger.getLevel(Logger)
TileEntity.shouldRenderInPass(TileEntity, int)
RegistryNamespaced.getNameForObject(RegistryNamespaced, Object)
InetAddress.getCanonicalHostName(InetAddress)
MethodType.toMethodDescriptorString(MethodType)
RenderChunk.deleteGlResources(RenderChunk)
ImmutableSet.writeReplace(ImmutableSet)
Block.getAiPathNodeType(Block, IBlockState, IBlockAccess, BlockPos | Block, IBlockState, IBlockAccess, BlockPos, EntityLiving)
Minecraft.updateDisplay(Minecraft)
Invokers.basicInvoker(Invokers)
CrashReport.getCategory(CrashReport)
IntegratedServer.shareToLAN(IntegratedServer, GameType, boolean)
FileLock.toString(FileLock)
PlayerChunkMapEntry.getWatchingPlayers(PlayerChunkMapEntry)
ZonedDateTime.withLaterOffsetAtOverlap(ZonedDateTime | ZonedDateTime)
Locale.getCompatibilityExtensions(String, String, String, String)
TextureMap.generateMipmaps(TextureMap, IResourceManager, TextureAtlasSprite)
Collection.add(Collection, Object)
World.updateBlockTick(World, BlockPos, Block, int, int)
ZonedDateTime.from(TemporalAccessor)
Lookup.bind(Lookup, Object, String, MethodType)
TileEntity.invalidate(TileEntity)
EnumRenderType.getRenderType(EnumRenderType)
MemberName.getInvocationType(MemberName)
ISaveHandler.getMapFileFromName(ISaveHandler, String)
AtomicInteger.longValue(AtomicInteger)
NamedFunction.invoke_LLLLL_L(MethodHandle, Object[])
ZonedDateTime.parse(CharSequence | CharSequence, DateTimeFormatter)
PlayerList.getOnlinePlayerProfiles(PlayerList)
Font.hasTempPermission()
NamedFunction.invoke_LLLLL_V(MethodHandle, Object[])
FieldAccessor.setShort(FieldAccessor, Object, short)
Debug.isOn(String)
ItemStack.hasTagCompound(ItemStack)
ByteBuffer._put(ByteBuffer, int, byte)
Chunk.removeInvalidTileEntity(Chunk, BlockPos)
UUID.hashCode(UUID)
LocalDateTime.plusWeeks(LocalDateTime, long)
ReflectionFactory.inflationThreshold()
ConstantPool.getLongAt(ConstantPool, int)
ThreadLocal.setInitialValue(ThreadLocal)
CompositeByteBuf.retain(CompositeByteBuf, int | CompositeByteBuf | CompositeByteBuf, int | CompositeByteBuf, int | CompositeByteBuf | CompositeByteBuf)
LocalTime.equals(LocalTime, Object)
ClickEvent.hashCode(ClickEvent)
Point2D.distance(double, double, double, double | Point2D, double, double | Point2D, Point2D)
Region.clipBoxToBounds(Region, int[])
LocaleExtensions.toID(SortedMap)
InputEvent.getModifiersEx(InputEvent)
IntegratedServer.access$000(IntegratedServer)
JsonWriter.replaceTop(JsonWriter, int)
ClassSignature.getFormalTypeParameters(ClassSignature)
EntityItemFrame.setDisplayedItemWithUpdate(EntityItemFrame, ItemStack, boolean)
Window.access$600(Window)
Window.access$602(Window, int)
ImmutableTable.clear(ImmutableTable)
MemberName.getSignature(MemberName)
Scoreboard.getTeam(Scoreboard, String)
Chunk.generateSkylightMap(Chunk)
SoundEventAccessor.cloneEntry(SoundEventAccessor | SoundEventAccessor)
FileDialogPeer.setFilenameFilter(FileDialogPeer, FilenameFilter)
LongStream.rangeClosed(long, long)
ColorModel.getTransparency(ColorModel)
Control.getCandidateLocales(Control, String, Locale)
Cursor.access$300()
Item.isDamaged(Item, ItemStack)
BigInteger.gcd(BigInteger, BigInteger)
MemberName.getDefinition(MemberName)
RenderItem.putQuadNormal(RenderItem, BufferBuilder, BakedQuad)
EntityPlayer.attackTargetEntityWithCurrentItem(EntityPlayer, Entity)
EntityPlayer.canTriggerWalking(EntityPlayer)
Font2D.setUseWeakRefs(Font2D, boolean, int)
Loader.getBaseURL(Loader)
ItemStack.areItemStackTagsEqual(ItemStack, ItemStack)
OffsetDateTime.withYear(OffsetDateTime, int)
ChronoLocalDate.getChronology(ChronoLocalDate)
IntSummaryStatistics.toString(IntSummaryStatistics)
Block.randomTick(Block, World, BlockPos, IBlockState, Random)
ServerStatusResponse.getFavicon(ServerStatusResponse)
Vec3d.crossProduct(Vec3d, Vec3d)
BlockColors.colorMultiplier(BlockColors, IBlockState, IBlockAccess, BlockPos, int)
ThreadGroup.getName(ThreadGroup)
InputEvent.getButtonDownMasks()
Long.byteValue(Long)
LocalDate.getDayOfYear(LocalDate)
AccessibleContext.getAccessibleChild(AccessibleContext, int)
ChronoPeriod.between(ChronoLocalDate, ChronoLocalDate)
Double.valueOf(double | String)
GameProfileRepository.findProfilesByNames(GameProfileRepository, String[], Agent, ProfileLookupCallback)
Toolkit.getNativeContainer(Component)
BoundMethodHandle.internalValues(BoundMethodHandle)
URI.appendEncoded(StringBuffer, char)
Cursor.toString(Cursor)
Chunk.populate(Chunk, IChunkProvider, IChunkGenerator | Chunk, IChunkGenerator)
BigInteger.byteValueExact(BigInteger)
WorldServer.updateBlockTick(WorldServer, BlockPos, Block, int, int)
AccessControlContext.containsAllPDs(ProtectionDomain[], ProtectionDomain[])
BigDecimal.longDigitLength(long)
Optional.filter(Optional, Predicate)
AppContext.access$900()
DragSourceContext.setCursorImpl(DragSourceContext, Cursor)
WorldInfo.setCleanWeatherTime(WorldInfo, int)
Field.get(Field, Object)
ResourceBundle.getKeys(ResourceBundle)
Gson.serializeNulls(Gson)
Method.getGenericParameterTypes(Method)
MethodHandle.asFixedArity(MethodHandle)
EntityItem.searchForOtherItemsNearby(EntityItem)
LambdaForm.normalize(LambdaForm)
World.getLightFor(World, EnumSkyBlock, BlockPos)
Date.compareTo(Date, Object | Date, Date)
Font2D.getStyleMetrics(Font2D, float, float[], int)
AccessibleComponent.getLocationOnScreen(AccessibleComponent)
DropTarget.dragEnter(DropTarget, DropTargetDragEvent)
AxisDirection.getOffset(AxisDirection)
ThreadGroup.activeCount(ThreadGroup)
ChannelOutboundBuffer.forEachFlushedMessage(ChannelOutboundBuffer, MessageProcessor)
DropTargetContext.acceptDrag(DropTargetContext, int)
AttributeValues.setStrikethrough(AttributeValues, boolean)
WorldSavedData.markDirty(WorldSavedData)
EventExecutorGroup.schedule(EventExecutorGroup, Runnable, long, TimeUnit | EventExecutorGroup, Callable, long, TimeUnit)
Constructor.isVarArgs(Constructor)
GameSettings.shouldRenderClouds(GameSettings)
World.isFlammableWithin(World, AxisAlignedBB)
Entity.writeToNBT(Entity, NBTTagCompound)
Stack.push(Stack, Object)
ItemModelMesher.getIndex(ItemModelMesher, Item, int)
Tutorial.onHitBlock(Tutorial, WorldClient, BlockPos, IBlockState, float)
FileLock.acquiredBy(FileLock)
World.getBlockState(World, BlockPos)
Entity.setDead(Entity)
TileEntity.handleUpdateTag(TileEntity, NBTTagCompound)
IMinecartCollisionHandler.getBoundingBox(IMinecartCollisionHandler, EntityMinecart)
NBTTagCompound.getByteArray(NBTTagCompound, String)
Particle.getBlueColorF(Particle)
Function.lambda$compose$0(Function, Function, Object)
Method.getGenericReturnType(Method)
Entity.getLook(Entity, float)
URLClassPath.access$1500()
Component.constructComponentName(Component)
ArrayList.add(ArrayList, Object | ArrayList, int, Object)
PlayerChunkMap.getChunkIterator(PlayerChunkMap)
Graphics2D.getFontRenderContext(Graphics2D)
Container.printComponents(Container, Graphics)
EntityLiving.initEntityAI(EntityLiving)
LocalDate.lengthOfYear(LocalDate)
Hashtable.containsValue(Hashtable, Object)
LongStream.peek(LongStream, LongConsumer)
InputContext.removeNotify(InputContext, Component)
String.compareToIgnoreCase(String, String)
Graphics2D.transform(Graphics2D, AffineTransform)
Component.getFocusCycleRootAncestor(Component)
Chronology.equals(Chronology, Object)
OffsetTime.getHour(OffsetTime)
Locale.composeList(MessageFormat, String[])
AdvancementProgress.getCompletedCriteria(AdvancementProgress)
ValueRange.of(long, long | long, long, long | long, long, long, long)
Map.containsKey(Map, Object)
Path.getCurrentPathIndex(Path)
Object.notifyAll(Object)
File.getName(File)
ZonedDateTime.minusMonths(ZonedDateTime, long)
GuiScreen.drawBackground(GuiScreen, int)
PlayerAdvancements.setSelectedTab(PlayerAdvancements, Advancement)
AtomicInteger.decrementAndGet(AtomicInteger)
CreativeTabs.getIcon(CreativeTabs)
ChunkProviderServer.getNearestStructurePos(ChunkProviderServer, World, String, BlockPos, boolean)
Graphics2D.getRenderingHints(Graphics2D)
Container.lightweightPrint(Container, Graphics)
ThreadLocal.initialValue(ThreadLocal)
Logger.logMessage(Logger, Level, Marker, String, StackTraceElement, Message, Throwable)
ModelRenderer.setRotationPoint(ModelRenderer, float, float, float)
EntityPlayerMP.onUpdateEntity(EntityPlayerMP)
EventQueue.setFwDispatcher(EventQueue, FwDispatcher)
DoubleBuffer.put(DoubleBuffer, int, double | DoubleBuffer, double[] | DoubleBuffer, double | DoubleBuffer, DoubleBuffer | DoubleBuffer, double[], int, int)
Resource.getName(Resource)
ImmutableMapEntry.getNextInValueBucket(ImmutableMapEntry)
BigInteger.modInverse(BigInteger, BigInteger)
WindowPeer.updateIconImages(WindowPeer)
StateImplementation.getProperties(StateImplementation)
ConstantPool.getUTF8At0(ConstantPool, Object, int)
CompositeByteBuf.updateComponentOffsets(CompositeByteBuf, int)
Entity.getForward(Entity)
Double.toString(Double | double)
IBakedModel.isGui3d(IBakedModel)
JsonWriter.open(JsonWriter, int, String)
BigInteger.implMontgomeryMultiplyChecks(int[], int[], int[], int, int[])
Chronology.zonedDateTime(Chronology, Instant, ZoneId | Chronology, TemporalAccessor)
DropTarget.setFlavorMap(DropTarget, FlavorMap)
Field.getAnnotation(Field, Class)
URLConnection.getHeaderFieldLong(URLConnection, String, long)
ZoneId.getDisplayName(ZoneId, TextStyle, Locale)
ScorePlayerTeam.getMembershipCollection(ScorePlayerTeam)
OptionalDouble.equals(OptionalDouble, Object)
MethodHandle.debugString(MethodHandle)
Block.isBlockNormalCube(Block, IBlockState)
Member.getModifiers(Member)
OffsetDateTime.isEqual(OffsetDateTime, OffsetDateTime)
BufferStrategy.getDrawGraphics(BufferStrategy)
Lookup.findVirtualForMH(Lookup, String, MethodType)
NetHandlerPlayClient.handleTeams(NetHandlerPlayClient, SPacketTeams)
BoundMethodHandle.makeReinvoker(MethodHandle)
RetentionPolicy.valueOf(String)
Type.valueOf(String | String | String | String | String | String)
ZonedDateTime.query(ZonedDateTime, TemporalQuery)
EntityPlayerMP.isSpectatedByPlayer(EntityPlayerMP, EntityPlayerMP)
BigDecimal.plus(BigDecimal, MathContext | BigDecimal)
EntityPlayerMP.copyFrom(EntityPlayerMP, EntityPlayerMP, boolean)
Executable.getTypeAnnotationBytes(Executable)
ByteBuf.setBytes(ByteBuf, int, byte[] | ByteBuf, int, ByteBuffer | ByteBuf, int, FileChannel, long, int | ByteBuf, int, ByteBuf | ByteBuf, int, InputStream, int | ByteBuf, int, byte[], int, int | ByteBuf, int, ByteBuf, int | ByteBuf, int, ScatteringByteChannel, int | ByteBuf, int, ByteBuf, int, int)
ImmutableMap.builder()
Graphics2D.getBackground(Graphics2D)
Calendar.setTimeInMillis(Calendar, long)
VillageCollection.tick(VillageCollection)
WorldServer.setEntityState(WorldServer, Entity, byte)
MemberName.isVolatile(MemberName)
LanguageManager.getLanguage(LanguageManager, String)
OffsetTime.equals(OffsetTime, Object)
EntityLivingBase.getHeldItemOffhand(EntityLivingBase)
SpeciesData.access$000(SpeciesData)
SPacketUpdateTileEntity.getNbtCompound(SPacketUpdateTileEntity)
FontMetrics.charsWidth(FontMetrics, char[], int, int)
ItemStack.isItemDamaged(ItemStack)
WorldBorder.getTimeUntilTarget(WorldBorder)
SoundRegistry.createUnderlyingMap(SoundRegistry)
GuiScreen.isFocused(GuiScreen)
Component.printHeavyweightComponents(Component, Graphics)
Style.getClickEvent(Style)
LocalTime.from(TemporalAccessor)
TileEntity.getMaxRenderDistanceSquared(TileEntity)
Gson.atomicLongAdapter(TypeAdapter)
DataSerializer.createKey(DataSerializer, int)
ChannelOutboundBuffer.nioBufferSize(ChannelOutboundBuffer)
ZoneOffset.writeExternal(ZoneOffset, DataOutput)
Calendar.isFullyNormalized(Calendar)
Optional.fromJavaUtil(Optional)
LambdaForm.arityCheck(LambdaForm, Object[])
EventQueue.access$400(EventQueue)
NBTTagCompound.getString(NBTTagCompound, String)
FileSystemProvider.newOutputStream(FileSystemProvider, Path, OpenOption[])
ItemStack.getItemRaw(ItemStack)
ResourceBundle.isValidBundle(ResourceBundle)
IntegratedServer.isDedicatedServer(IntegratedServer)
Visibility.valueOf(String)
NBTTagCompound.merge(NBTTagCompound, NBTTagCompound)
DataFixer.processWalkers(DataFixer, IFixType, NBTTagCompound, int)
MapItemRenderer.getMapInstanceIfExists(MapItemRenderer, String)
ArrayList.outOfBoundsMsg(ArrayList, int)
Entity.isPushedByWater(Entity)
LocalDate.readExternal(DataInput)
Entity.getRotatedYaw(Entity, Rotation)
AppContext.getContextClassLoader(AppContext)
EnumHand.valueOf(String)
Field.isSynthetic(Field)
Chunk.setHeightMap(Chunk, int[])
Font.initIDs()
JsonElement.getAsBigDecimal(JsonElement)
Region.hashCode(Region)
EnumRenderType.values()
IntStream.rangeClosed(int, int)
LambdaFormEditor.foldArgumentsForm(LambdaFormEditor, int, boolean, MethodType)
ReflectionFactory.access$102(int)
Item.itemInteractionForEntity(Item, ItemStack, EntityPlayer, EntityLivingBase, EnumHand)
FloatBuffer.get(FloatBuffer, float[] | FloatBuffer | FloatBuffer, int | FloatBuffer, float[], int, int)
Level.compareTo(Level, Object | Level, Level)
WorldInfo.getSaveVersion(WorldInfo)
NetworkPlayerInfo.getSkinType(NetworkPlayerInfo)
Component.getLocation(Component, Point | Component)
ShaderManager.setupUniforms(ShaderManager)
TextureMap.loadSprites(TextureMap, IResourceManager, ITextureMapPopulator)
AbstractStringBuilder.insert(AbstractStringBuilder, int, boolean | AbstractStringBuilder, int, Object | AbstractStringBuilder, int, char[] | AbstractStringBuilder, int, int | AbstractStringBuilder, int, long | AbstractStringBuilder, int, char[], int, int | AbstractStringBuilder, int, CharSequence, int, int | AbstractStringBuilder, int, char | AbstractStringBuilder, int, double | AbstractStringBuilder, int, String | AbstractStringBuilder, int, CharSequence | AbstractStringBuilder, int, float)
PathNavigate.setPath(PathNavigate, Path, double)
NetHandlerPlayClient.handleCloseWindow(NetHandlerPlayClient, SPacketCloseWindow)
UserListEntry.hasBanExpired(UserListEntry)
CriterionProgress.read(PacketBuffer, AdvancementProgress)
Entity.newFloatNBTList(Entity, float[])
AWTEvent.setSource(AWTEvent, Object)
Logger.isErrorEnabled(Logger, Marker | Logger)
EntityPlayerMP.getPosition(EntityPlayerMP)
LongBuffer.array(LongBuffer | LongBuffer)
CrashReport.getWittyComment()
IntegratedServer.getGameType(IntegratedServer)
NetHandlerPlayClient.handleServerDifficulty(NetHandlerPlayClient, SPacketServerDifficulty)
EntityPlayerMP.resetRecipes(EntityPlayerMP, List)
EntityMinecart.processInitialInteract(EntityMinecart, EntityPlayer, EnumHand)
AdvancementProgress.getPercent(AdvancementProgress)
ShaderGroup.createBindFramebuffers(ShaderGroup, int, int)
World.updateEntityWithOptionalForce(World, Entity, boolean)
EntitySenses.clearSensingCache(EntitySenses)
Entity.applyEnchantments(Entity, EntityLivingBase, Entity)
Future.addListener(Future, GenericFutureListener)
DropTargetContext.acceptDrop(DropTargetContext, int)
AttributeValues.getBackground(AttributeValues)
Container.getMouseEventTargetImpl(Container, int, int, boolean, EventTargetFilter, boolean, boolean)
Constructor.specificToStringHeader(Constructor, StringBuilder)
Handle.guess(Handle)
Toolkit.setLockingKeyState(Toolkit, int, boolean)
Constructor.getGenericParameterTypes(Constructor)
LambdaFormEditor.newSpeciesData(LambdaFormEditor, BasicType)
Block.isEntityInsideMaterial(Block, IBlockAccess, BlockPos, IBlockState, Entity, double, Material, boolean)
Wrapper.hashWrap(Class)
ListenerList.resize(int)
ZoneOffset.ofHours(int)
BufferedImage.getColorModel(BufferedImage)
Field.getFieldAccessor(Field, boolean | Field, Object)
EntityPlayer.getHeldEquipment(EntityPlayer)
ClassLoader.setPackageAssertionStatus(ClassLoader, String, boolean)
ItemStack.attemptDamageItem(ItemStack, int, Random, EntityPlayerMP)
Toolkit.access$202(ResourceBundle)
NetHandlerPlayClient.handleBlockAction(NetHandlerPlayClient, SPacketBlockAction)
LocalDateTime.plusMonths(LocalDateTime, long)
AppContext.getAppContext()
ConstantPool.getMethodAtIfLoaded(ConstantPool, int)
FileSystem.getFileStores(FileSystem)
ZoneOffsetTransition.hashCode(ZoneOffsetTransition)
GameSettings.sendSettingsToServer(GameSettings)
IBakedModel.isBuiltInRenderer(IBakedModel)
OptionalLong.empty()
Date.getMillisOf(Date)
JsonReader.peekNumber(JsonReader)
CompositeByteBuf.readBytes(CompositeByteBuf, ByteBuf | CompositeByteBuf, ByteBuf, int | CompositeByteBuf, ByteBuf | CompositeByteBuf, byte[] | CompositeByteBuf, ByteBuf, int, int | CompositeByteBuf, byte[], int, int | CompositeByteBuf, ByteBuf, int | CompositeByteBuf, ByteBuffer | CompositeByteBuf, byte[] | CompositeByteBuf, byte[], int, int | CompositeByteBuf, ByteBuf, int, int | CompositeByteBuf, OutputStream, int | CompositeByteBuf, OutputStream, int | CompositeByteBuf, ByteBuffer)
Toolkit.getSystemClipboard(Toolkit)
Block.setLightOpacity(Block, int)
WorldSavedData.serializeNBT(WorldSavedData | WorldSavedData)
MethodType.isConvertibleTo(MethodType, MethodType)
BlockStateContainer.write(BlockStateContainer, PacketBuffer)
WorldInfo.isThundering(WorldInfo)
EntityPlayer.getSwimSound(EntityPlayer)
Chronology.toString(Chronology)
OutputStream.close(OutputStream)
Action.valueOf(String | String)
IntStream.average(IntStream)
Vec3d.normalize(Vec3d)
AccessibleStateSet.clear(AccessibleStateSet)
WorldServer.getDefaultTeleporter(WorldServer)
IntStream.flatMap(IntStream, IntFunction)
ISnooperInfo.addServerTypeToSnooper(ISnooperInfo, Snooper)
ItemStack.getMaxStackSize(ItemStack)
WorldInfo.setThundering(WorldInfo, boolean)
AdvancementList.getAdvancement(AdvancementList, ResourceLocation)
Package.loadManifest(String)
CombatTracker.getBestCombatEntry(CombatTracker)
AttributeModifier.getOperation(AttributeModifier)
MemberName.makeMethodHandleInvoke(String, MethodType, int | String, MethodType)
EntityDataManager.isEmpty(EntityDataManager)
SampleModel.initIDs()
Vector3f.scale(Vector3f, float)
Scoreboard.getTeamNames(Scoreboard)
Thread.setPriority(Thread, int)
Gson.toJsonTree(Gson, Object | Gson, Object, Type)
World.updateComparatorOutputLevel(World, BlockPos, Block)
Village.removeDeadAndOutOfRangeDoors(Village)
LocaleExtensions.isEmpty(LocaleExtensions)
StateImplementation.getBlock(StateImplementation)
EntityLivingBase.getAlwaysRenderNameTagForRender(EntityLivingBase)
EntityPlayerMP.sendAllContents(EntityPlayerMP, Container, NonNullList)
ItemStack.getHasSubtypes(ItemStack)
EntityPlayerMP.clearElytraFlying(EntityPlayerMP)
PlayerChunkMap.setPlayerViewRadius(PlayerChunkMap, int)
ChannelPipeline.fireUserEventTriggered(ChannelPipeline, Object)
LongBuffer.isDirect(LongBuffer)
Font.getName(Font)
UUID.variant(UUID)
MethodTypeForm.returnCount(MethodTypeForm)
ScoreObjective.getName(ScoreObjective)
Component.setFocusTraversalKeys(Component, int, Set)
RenderChunk.getPosition(RenderChunk)
ProfileEntry.access$200(ProfileEntry)
PaintContext.getRaster(PaintContext, int, int, int, int)
LongStream.mapToObj(LongStream, LongFunction)
Font.getPSName(Font)
World.getMinecraftServer(World)
MinecraftServer.getMOTD(MinecraftServer)
Village.isMatingSeason(Village)
AxisAlignedBB.collideWithZPlane(AxisAlignedBB, double, Vec3d, Vec3d)
ImmutableTable.isEmpty(ImmutableTable)
CompiledChunk.isLayerStarted(CompiledChunk, BlockRenderLayer)
Window.setOwnedWindowsAlwaysOnTop(Window, boolean)
IntStream.asLongStream(IntStream)
JsonReader.nextUnquotedValue(JsonReader)
Calendar.computeFields(Calendar)
RenderGlobal.drawSelectionBox(RenderGlobal, EntityPlayer, RayTraceResult, int, float)
BigDecimal.scaleByPowerOfTen(BigDecimal, int)
Color.darker(Color)
MethodHandle.rebind(MethodHandle)
TemporalAccessor.query(TemporalAccessor, TemporalQuery)
EventExecutor.newPromise(EventExecutor)
BlockStateContainer.getAllowedValues(BlockStateContainer)
Window.applyCurrentShape(Window)
ITooltipFlag.isAdvanced(ITooltipFlag)
Properties.store(Properties, OutputStream, String | Properties, Writer, String)
DragSource.getDragSourceListeners(DragSource)
AdvancementProgress.revokeCriterion(AdvancementProgress, String)
MapData.readFromNBT(MapData, NBTTagCompound)
ChunkPos.getDistanceSq(ChunkPos, Entity)
NetworkPlayerInfo.setDisplayHealth(NetworkPlayerInfo, int)
Level.intLevel(Level)
ListenerList.resizeLists(ListenerList, int)
ChannelOutboundBuffer.safeSuccess(ChannelPromise)
DataFixer.getTypeList(DataFixer, Map, IFixType)
MethodTypeForm.argSlotToParameter(MethodTypeForm, int)
IntStream.asDoubleStream(IntStream)
NBTTagList.toString(NBTTagList)
Cursor.access$200()
FileStore.getAttribute(FileStore, String)
Comparator.compare(Comparator, Object, Object)
SoundManager.playSound(SoundManager, ISound)
VillageCollection.isWoodDoor(VillageCollection, BlockPos)
BufferStrategy.contentsLost(BufferStrategy)
Item.getIdFromItem(Item)
Attribute.getAndRemove(Attribute)
Hashtable.access$100(Hashtable, int)
JsonNull.deepCopy(JsonNull | JsonNull)
ChannelHandlerContext.fireChannelWritabilityChanged(ChannelHandlerContext)
Entry.getPackFormat(Entry)
URI.compare(String, String)
AttributeValues.getBaselineTransform(Map | AttributeValues)
EntityLookHelper.setLookPositionWithEntity(EntityLookHelper, Entity, float, float)
EntityPlayer.addMovementStat(EntityPlayer, double, double, double)
Debug.getInstance(String, String | String)
PlayerChunkMapEntry.hasPlayerMatchingInRange(PlayerChunkMapEntry, double, Predicate)
EntityLivingBase.setHealth(EntityLivingBase, float)
Stream.peek(Stream, Consumer)
EnumType.valueOf(String)
Component.relocateComponent(Component)
Rectangle.equals(Rectangle, Object)
Range.toRangeMask(Set)
Field.getName(Field)
LambdaForm.identity_V()
RenderGlobal.getVisibleFacings(RenderGlobal, BlockPos)
JsonWriter.close(JsonWriter | JsonWriter, int, int, String)
Render.renderMultipass(Render, Entity, double, double, double, float, float)
EntityPlayer.getYOffset(EntityPlayer)
Graphics2D.getComposite(Graphics2D)
Vec3i.distanceSqToCenter(Vec3i, double, double, double)
ColorModel.getLinearGray16ToOtherGray8LUT(ICC_ColorSpace)
WorldInfo.getDimensionData(WorldInfo, int | WorldInfo, DimensionType)
LambdaForm.identity_I(int)
LambdaForm.identity_F(float)
LambdaForm.identity_L(Object)
AttributeValues.extractYRotation(AffineTransform, boolean)
Pair.getLeft(Pair)
Thread.interrupted()
LambdaForm.identity_J(long)
LocalDateTime.compareTo0(LocalDateTime, LocalDateTime)
LambdaForm.identity_D(double)
AccessControlContext.getNextPC(AccessControlContext)
CompositeByteBuf.touch(CompositeByteBuf | CompositeByteBuf, Object | CompositeByteBuf | CompositeByteBuf, Object | CompositeByteBuf, Object | CompositeByteBuf)
Lookup.revealDirect(Lookup, MethodHandle)
AccessibleComponent.setForeground(AccessibleComponent, Color)
BigInteger.lucasLehmerSequence(int, BigInteger, BigInteger)
MethodType.methodType(Class, MethodType | Class, Class | Class | Class, List | Class, Class, Class[] | Class, Class[])
ReflectionFactory.checkInitted()
LambdaForm.checkInt(Class, Object)
ImageProducer.addConsumer(ImageProducer, ImageConsumer)
Class.getMethods(Class)
NBTTagCompound.read(NBTTagCompound, DataInput, int, NBTSizeTracker)
UUID.version(UUID)
InetAddressImpl.lookupAllHostAddr(InetAddressImpl, String)
Comparator.lambda$comparingDouble$8dcf42ea$1(ToDoubleFunction, Object, Object)
Entity.setFlag(Entity, int, boolean)
DropTarget.addDropTargetListener(DropTarget, DropTargetListener)
RenderGlobal.renderSky(RenderGlobal, float, int | RenderGlobal, BufferBuilder, float, boolean)
Entity.getCollisionBox(Entity, Entity)
EntityLiving.setMoveVertical(EntityLiving, float)
RenderManager.getDistanceToCamera(RenderManager, double, double, double)
Graphics2D.getStroke(Graphics2D)
ChunkCache.getCombinedLight(ChunkCache, BlockPos, int)
ListenerListInst.buildCache(ListenerListInst)
Window.getWindows(AppContext | )
Biome.getGrassColorAtPos(Biome, BlockPos)
Constructor.getExceptionTypes(Constructor)
Session.getSessionID(Session)
Properties.load(Properties, Reader | Properties, InputStream)
EntityPlayerMP.sendStatusMessage(EntityPlayerMP, ITextComponent, boolean)
Rectangle2D.intersects(Rectangle2D, double, double, double, double)
ModalityType.values()
TextFormatting.toString(TextFormatting)
NBTTagCompound.getTagId(NBTTagCompound, String)
WorldType.getBiomeProvider(WorldType, World)
WorldInfo.getSpawnX(WorldInfo)
WorldInfo.getSpawnZ(WorldInfo)
WorldInfo.getSpawnY(WorldInfo)
CompositeByteBuf.setInt(CompositeByteBuf, int, int | CompositeByteBuf, int, int)
ThreadLocal.createInheritedMap(ThreadLocalMap)
BigDecimal.checkScale(BigInteger, long | long, long | BigDecimal, long)
ReflectionFactory.access$202(boolean)
TextureAtlasSprite.generateMipmaps(TextureAtlasSprite, int)
FieldAccessor.getInt(FieldAccessor, Object)
GameSettings.switchModelPartEnabled(GameSettings, EnumPlayerModelParts)
CompositeByteBuf.nioBufferCount(CompositeByteBuf)
Container.getInsets(Container)
EntityLiving.setAIMoveSpeed(EntityLiving, float)
Entry.getResourcePackName(Entry)
Minecraft.getFrameTimer(Minecraft)
MinecraftServer.applyServerIconToResponse(MinecraftServer, ServerStatusResponse)
Optional.empty()
AffineTransform.createTransformedShape(AffineTransform, Shape)
ReflectionFactory.generateConstructor(ReflectionFactory, Class, Constructor)
AttributeValues.setInputMethodHighlight(AttributeValues, InputMethodHighlight | AttributeValues, Annotation)
Optional.flatMap(Optional, Function)
ImmutableSetMultimap.emptySet(Comparator)
ImmutableMap.hashCode(ImmutableMap)
Font.isItalic(Font)
BaseStream.onClose(BaseStream, Runnable)
Minecraft.getDebugFPS()
Raster.getNumDataElements(Raster)
LootPool.freeze(LootPool)
Component.isLightweight(Component)
URI.getAuthority(URI)
Path.isSamePath(Path, Path)
Biome.registerBiome(int, String, Biome)
IntStream.filter(IntStream, IntPredicate)
RenderLivingBase.getColorMultiplier(RenderLivingBase, EntityLivingBase, float, float)
MinecraftSessionService.fillProfileProperties(MinecraftSessionService, GameProfile, boolean)
BlockRendererDispatcher.onResourceManagerReload(BlockRendererDispatcher, IResourceManager)
ZonedDateTime.toOffsetDateTime(ZonedDateTime)
Vector3f.negate(Vector3f | Vector3f, Vector3f)
Class.isAssignableFrom(Class, Class)
EntityLivingBase.onFinishedPotionEffect(EntityLivingBase, PotionEffect)
GlyphVector.setGlyphTransform(GlyphVector, int, AffineTransform)
NetworkManager.hasNoChannel(NetworkManager)
NetworkSystem.addLocalEndpoint(NetworkSystem)
Intrinsic.valueOf(String)
GraphicsDevice.isWindowTranslucencySupported(GraphicsDevice, WindowTranslucency)
Instant.with(Instant, TemporalField, long | Instant, TemporalAdjuster | Instant, TemporalAdjuster | Instant, TemporalField, long)
LocalTime.minus(LocalTime, TemporalAmount | LocalTime, long, TemporalUnit | LocalTime, long, TemporalUnit | LocalTime, TemporalAmount)
ByteBuf.getLongLE(ByteBuf, int)
EntityRenderer.updateFogColor(EntityRenderer, float)
StatisticsManagerServer.dumpJson(Map)
Component.processEvent(Component, AWTEvent)
FwDispatcher.scheduleDispatch(FwDispatcher, Runnable)
ChannelPipeline.flush(ChannelPipeline)
Minecraft.shutdown(Minecraft)
List.contains(List, Object)
Method.getModifiers(Method)
LambdaForm.addArguments(LambdaForm, int, BasicType[] | LambdaForm, int, List)
Component.isOpaque(Component)
Throwable.getStackTrace(Throwable)
DropTargetContext.getDropTargetContextPeer(DropTargetContext)
Chunk.isLoaded(Chunk)
ImmutableMultiset.equals(ImmutableMultiset, Object)
LocalDateTime.plusMinutes(LocalDateTime, long)
EntityDataManager.writeEntries(EntityDataManager, PacketBuffer | List, PacketBuffer)
LootTableManager.getLootTableFromLocation(LootTableManager, ResourceLocation)
Block.onPlayerDestroy(Block, World, BlockPos, IBlockState)
NBTTagCompound.access$000(NBTTagCompound)
SampleModel.setSamples(SampleModel, int, int, int, int, int, float[], DataBuffer | SampleModel, int, int, int, int, int, double[], DataBuffer | SampleModel, int, int, int, int, int, int[], DataBuffer)
RenderingHints.values(RenderingHints)
ClassLoader.getSystemResourceAsStream(String)
URLStreamHandler.setURL(URLStreamHandler, URL, String, String, int, String, String, String, String, String | URLStreamHandler, URL, String, String, int, String, String)
EntityPlayer.wakeUpPlayer(EntityPlayer, boolean, boolean, boolean)
BiomeProvider.getBiomesToSpawnIn(BiomeProvider)
URLClassPath.access$1600()
ClassLoader.setClassAssertionStatus(ClassLoader, String, boolean)
AccessibleEditableText.replaceText(AccessibleEditableText, int, int, String)
ClassLoader.getSystemClassLoader()
Entity.getTeam(Entity)
Chunk.getBiomeArray(Chunk)
AffineTransform.getQuadrantRotateInstance(int | int, double, double)
Score.getPlayerName(Score)
Class.getDeclaredConstructor(Class, Class[])
Random.nextBoolean(Random)
Entity.dropItem(Entity, Item, int)
ConstantPool.getMemberRefInfoAt(ConstantPool, int)
FontStrike.getGlyphAdvance(FontStrike, int)
Region.setOutputAreaXYWH(Region, int, int, int, int)
ShaderGroup.resetProjectionMatrix(ShaderGroup)
Entity.setEntityId(Entity, int)
URL.sameFile(URL, URL)
FontRenderer.listFormattedStringToWidth(FontRenderer, String, int)
MemberName.toString(MemberName)
LocalDateTime.plusNanos(LocalDateTime, long)
EntityLivingBase.getHeldItem(EntityLivingBase, EnumHand)
Thread.dispatchUncaughtException(Thread, Throwable)
OffsetTime.toEpochNano(OffsetTime)
Component.createImage(Component, int, int | Component, ImageProducer)
Entity.copyLocationAndAnglesFrom(Entity, Entity)
Extension.getKey(Extension)
DragGestureEvent.getSourceAsDragGestureRecognizer(DragGestureEvent)
BigDecimal.toPlainString(BigDecimal)
AccessibleTable.getAccessibleCaption(AccessibleTable)
ShaderManager.parseSampler(ShaderManager, JsonElement)
URLConnection.getHeaderField(URLConnection, String | URLConnection, int)
FileTime.toDays(FileTime)
Field.setInt(Field, Object, int)
PlayerChunkMapEntry.getChunk(PlayerChunkMapEntry)
LongStream.sequential(LongStream | LongStream)
Class.checkPackageAccess(Class, ClassLoader, boolean)
Region.setOutputAreaXYXY(Region, int, int, int, int)
Integer.sum(int, int)
Chronology.of(String)
Toolkit.getSystemEventQueue(Toolkit)
Wrapper.isFloating(Wrapper)
EntityRenderer.renderStreamIndicator(EntityRenderer, float)
Entry.closeResourcePack(Entry)
Block.canHarvestBlock(Block, IBlockAccess, BlockPos, EntityPlayer)
World.canMineBlockBody(World, EntityPlayer, BlockPos)
EntityMinecart.performHurtAnimation(EntityMinecart)
EventQueue.access$300(EventQueue)
ByteBuf.setMediumLE(ByteBuf, int, int)
EventQueue.eventToCacheIndex(AWTEvent)
Class.privateGetPublicMethods(Class)
DragSourceContext.readObject(DragSourceContext, ObjectInputStream)
IBakedModel.getItemCameraTransforms(IBakedModel)
Wrapper.asWrapperType(Class)
NetworkManager.enableEncryption(NetworkManager, SecretKey)
IntegratedServer.getOpPermissionLevel(IntegratedServer)
Permission.newPermissionCollection(Permission)
JavaSecurityAccess.doIntersectionPrivilege(JavaSecurityAccess, PrivilegedAction, AccessControlContext, AccessControlContext | JavaSecurityAccess, PrivilegedAction, AccessControlContext)
LayoutManager.minimumLayoutSize(LayoutManager, Container)
URI.maybeAddLeadingDot(char[], int[])
EntityPlayer.isUser(EntityPlayer)
Proxy.toString(Proxy)
ListPeer.removeAll(ListPeer)
ChunkProviderServer.provideChunk(ChunkProviderServer, int, int)
TileEntity.getTileData(TileEntity)
Entity.canBeAttackedWithItem(Entity)
BufferedImage.getData(BufferedImage | BufferedImage, Rectangle)
Container.hasLightweightDescendants(Container)
Class.resolveName(Class, String)
FontLineMetrics.getUnderlineOffset(FontLineMetrics)
Dialog.readObject(Dialog, ObjectInputStream)
URLConnection.addRequestProperty(URLConnection, String, String)
Entity.getCapability(Entity, Capability, EnumFacing)
List.sort(List, Comparator)
Class.getRawTypeAnnotations(Class)
LambdaForm.lastUseIndex(LambdaForm, Name)
LambdaFormBuffer.renameParameter(LambdaFormBuffer, int, Name)
ProgressivePromise.awaitUninterruptibly(ProgressivePromise)
Component.setComponentOrientation(Component, ComponentOrientation)
LocalDate.daysUntil(LocalDate, LocalDate)
ImmutableList.subList(ImmutableList, int, int | ImmutableList, int, int)
ImmutableTable.cellOf(Object, Object, Object)
Thread.isCCLOverridden(Class)
Biome.getTemperature(Biome, BlockPos)
EntityLivingBase.fall(EntityLivingBase, float, float)
NBTTagCompound.setUniqueId(NBTTagCompound, String, UUID)
FrameType.valueOf(String)
Component.isForegroundSet(Component)
AnnotationType.isInherited(AnnotationType)
Vec3i.getX(Vec3i)
Vec3i.getY(Vec3i)
Vec3i.getZ(Vec3i)
ColorModel.getsRGB8ToLinearRGB8LUT()
FramePeer.emulateActivation(FramePeer, boolean)
IntStream.forEach(IntStream, IntConsumer)
RenderGlobal.spawnParticle0(RenderGlobal, int, boolean, double, double, double, double, double, double, int[] | RenderGlobal, int, boolean, boolean, double, double, double, double, double, double, int[])
World.isSideSolid(World, BlockPos, EnumFacing, boolean | World, BlockPos, EnumFacing)
Entity.handleStatusUpdate(Entity, byte)
Class.getEnumConstants(Class)
ClassTypeSignature.getPath(ClassTypeSignature)
PlayerList.syncPlayerInventory(PlayerList, EntityPlayerMP)
LambdaFormBuffer.resultIndex(LambdaFormBuffer)
ImmutableMultimap.createAsMap(ImmutableMultimap)
NetHandlerPlayClient.handleAnimation(NetHandlerPlayClient, SPacketAnimation)
Toolkit.access$100(ResourceBundle)
Class.getMethod0(Class, String, Class[], boolean)
Path.equals(Path, Object)
IsoChronology.isLeapYear(IsoChronology, long)
Duration.readExternal(DataInput)
EntityPlayerMP.addExperienceLevel(EntityPlayerMP, int)
Point.equals(Point, Object)
ResourceBundle.handleKeySet(ResourceBundle)
FontRenderer.renderString(FontRenderer, String, float, float, int, boolean)
PlayerAdvancements.reload(PlayerAdvancements)
ResourcePackRepository.clearResourcePack(ResourcePackRepository)
Component.isEnabledImpl(Component)
Window.isFocusCycleRoot(Window)
Component.getFocusListeners(Component)
Long.reverseBytes(long)
ChannelPipeline.addAfter(ChannelPipeline, EventExecutorGroup, String, String, ChannelHandler | ChannelPipeline, String, String, ChannelHandler)
LambdaForm.zero_L()
AppContext.dispose(AppContext)
ExtendedBlockStorage.setSkyLight(ExtendedBlockStorage, NibbleArray | ExtendedBlockStorage, int, int, int, int)
LambdaForm.zero_F()
LambdaForm.zero_D()
FloatBuffer.order(FloatBuffer)
LambdaForm.zero_J()
BigDecimal.fractionOnly(BigDecimal)
World.getSpawnPoint(World)
LambdaForm.zero_I()
Duration.of(long, TemporalUnit)
ConstantPool.getClassAtIfLoaded(ConstantPool, int)
LambdaForm.zero_V()
Component.location_NoClientCode(Component)
Map.compute(Map, Object, BiFunction)
Point2D.distanceSq(Point2D, Point2D | Point2D, double, double | double, double, double, double)
BlockPos.fromLong(long)
Entity.removeTrackingPlayer(Entity, EntityPlayerMP)
Window.access$500(Window)
InetAddressHolder.getAddress(InetAddressHolder)
StateImplementation.buildPropertyValueTable(StateImplementation, Map)
NumericShaper.shape(NumericShaper, char[], int, int | NumericShaper, char[], int, int, int | NumericShaper, char[], int, int, Range)
SpeciesData.constructor(SpeciesData)
Optional.ofNullable(Object)
FileTime.toInstant(FileTime)
CompositeByteBuf.setLong(CompositeByteBuf, int, long | CompositeByteBuf, int, long)
Period.minusMonths(Period, long)
ColorModel.equals(ColorModel, Object)
ByteBuf.alloc(ByteBuf)
Field.setShort(Field, Object, short)
Enum.valueOf(Class, String)
Particle.renderParticle(Particle, BufferBuilder, Entity, float, float, float, float, float, float)
Rectangle.createIntersection(Rectangle, Rectangle2D)
PlatformLogger.isLoggable(PlatformLogger, Level)
Component.transferFocusUpCycle(Component)
Multiset.removeAll(Multiset, Collection)
EventDispatchThread.pumpEventsForHierarchy(EventDispatchThread, Conditional, Component | EventDispatchThread, int, Conditional, Component)
Component.getToolkitImpl(Component)
ItemOverrideList.handleItemState(ItemOverrideList, IBakedModel, ItemStack, World, EntityLivingBase)
LambdaForm.signatureReturn(String)
LocalDateTime.plus(LocalDateTime, TemporalAmount | LocalDateTime, long, TemporalUnit | LocalDateTime, TemporalAmount | LocalDateTime, long, TemporalUnit | LocalDateTime, long, TemporalUnit | LocalDateTime, TemporalAmount)
WindowPeer.updateAlwaysOnTopState(WindowPeer)
VillageCollection.getVillageList(VillageCollection)
TextFieldPeer.setEchoChar(TextFieldPeer, char)
Vec3d.scale(Vec3d, double)
Function.compose(Function, Function)
WorldInfo.setBorderLerpTarget(WorldInfo, double)
EntityPlayer.attackEntityFrom(EntityPlayer, DamageSource, float)
Dialog.constructComponentName(Dialog)
GameRules.getString(GameRules, String)
Component.setRequestFocusController(RequestFocusController)
ColorModel.isLinearGRAYspace(ColorSpace)
URLStreamHandler.parseURL(URLStreamHandler, URL, String, int, int)
Container.getFocusTraversalPolicy(Container)
PlatformLogger.getName(PlatformLogger)
WorldInfo.getBorderWarningDistance(WorldInfo)
OffsetTime.withNano(OffsetTime, int)
Collection.removeAll(Collection, Collection)
PotionEffect.writeCurativeItems(PotionEffect, NBTTagCompound)
Particle.multiplyVelocity(Particle, float)
AffineTransform.getShearX(AffineTransform)
AffineTransform.getShearY(AffineTransform)
DragSourceContext.writeObject(DragSourceContext, ObjectOutputStream)
Class.isInstance(Class, Object)
Entity.setEntityInvulnerable(Entity, boolean)
OffsetTime.now(ZoneId |  | Clock)
Item.isRepairable(Item)
DoubleStream.collect(DoubleStream, Supplier, ObjDoubleConsumer, BiConsumer)
SoundHandler.isSoundPlaying(SoundHandler, ISound)
EntityLiving.setNoAI(EntityLiving, boolean)
ZonedDateTime.getMonthValue(ZonedDateTime)
Raster.getNumBands(Raster)
Class.getDeclaredConstructors(Class)
EntityLiving.isAIDisabled(EntityLiving)
Scoreboard.getSortedScores(Scoreboard, ScoreObjective)
JsonReader.locationString(JsonReader)
Set.containsAll(Set, Collection)
CharBuffer.lambda$chars$0(CharBuffer)
EnumRarity.valueOf(String)
Item.canHarvestBlock(Item, IBlockState | Item, IBlockState, ItemStack)
Biome.createBiomeDecorator(Biome)
AffineTransform._matround(double)
LambdaForm.createIdentityForms()
Class.setSigners(Class, Object[])
World.canSnowAt(World, BlockPos, boolean)
EntityMoveHelper.strafe(EntityMoveHelper, float, float)
EntityLivingBase.setAIMoveSpeed(EntityLivingBase, float)
LocalDate.atTime(LocalDate, int, int | LocalDate, LocalTime | LocalDate, OffsetTime | LocalDate, LocalTime | LocalDate, int, int, int | LocalDate, int, int, int, int)
JsonElement.getAsNumber(JsonElement)
DesktopPeer.print(DesktopPeer, File)
Particle.move(Particle, double, double, double)
LambdaForm.signatureArity(String)
Constructor.getModifiers(Constructor)
ShaderGroup.parseGroup(ShaderGroup, TextureManager, ResourceLocation)
EnclosingMethodInfo.isPartial(EnclosingMethodInfo)
EntityLiving.setCanPickUpLoot(EntityLiving, boolean)
IChunkLoader.chunkTick(IChunkLoader)
Font2D.getStyle(Font2D)
ImageProducer.startProduction(ImageProducer, ImageConsumer)
CompositeByteBuf.writeBytes(CompositeByteBuf, byte[], int, int | CompositeByteBuf, ByteBuf, int, int | CompositeByteBuf, ByteBuf, int, int | CompositeByteBuf, byte[] | CompositeByteBuf, ByteBuf | CompositeByteBuf, ByteBuf | CompositeByteBuf, ByteBuf, int | CompositeByteBuf, ByteBuffer | CompositeByteBuf, byte[] | CompositeByteBuf, ByteBuffer | CompositeByteBuf, ByteBuf, int | CompositeByteBuf, byte[], int, int)
Entity.addVelocity(Entity, double, double, double)
EnumType.values()
Framebuffer.bindFramebuffer(Framebuffer, boolean)
VillageDoorInfo.isInsideSide(VillageDoorInfo, BlockPos)
MemberName.testFlags(MemberName, int, int)
Window.access$802(Window, double)
EventQueue.cacheEQItem(EventQueue, EventQueueItem)
Constructor.copy(Constructor)
MinecraftServer.canStructuresSpawn(MinecraftServer)
LocalTime.writeExternal(LocalTime, DataOutput)
Vector.iterator(Vector)
NetHandlerPlayClient.handleCombatEvent(NetHandlerPlayClient, SPacketCombatEvent)
Particle.setParticleTextureIndex(Particle, int)
LangReflectAccess.copyMethod(LangReflectAccess, Method)
ImmutableTable.values(ImmutableTable | ImmutableTable)
Path.getCurrentPathLength(Path)
JsonObject.entrySet(JsonObject)
Attribute.remove(Attribute)
Color.hashCode(Color)
CheckboxMenuItemPeer.setState(CheckboxMenuItemPeer, boolean)
Chunk.getPos(Chunk)
ShaderManager.endShader(ShaderManager)
DropTargetContextPeer.isTransferableJVMLocal(DropTargetContextPeer)
EntityLivingBase.isElytraFlying(EntityLivingBase)
EntityLivingBase.updateActiveHand(EntityLivingBase)
Chunk.getEntitiesWithinAABBForEntity(Chunk, Entity, AxisAlignedBB, List, Predicate)
Class.isSynthetic(Class)
String.regionMatches(String, int, String, int, int | String, boolean, int, String, int, int)
NBTTagCompound.getDouble(NBTTagCompound, String)
OffsetDateTime.minusMonths(OffsetDateTime, long)
EntityLivingBase.getRevengeTarget(EntityLivingBase)
Object.clone(Object)
ChannelPipeline.toMap(ChannelPipeline)
JsonWriter.endArray(JsonWriter)
Entity.onUpdate(Entity)
DoubleStream.map(DoubleStream, DoubleUnaryOperator)
Map.merge(Map, Object, Object, BiFunction)
VertexBuffer.unbindBuffer(VertexBuffer)
WorldServer.newExplosion(WorldServer, Entity, double, double, double, float, boolean, boolean)
Style.equals(Style, Object)
URLClassPath.addURL(URLClassPath, URL)
Region.clipAdd(int, int)
Chronology.localDateTime(Chronology, TemporalAccessor)
DataSerializer.copyValue(DataSerializer, Object)
MemberName.asSpecial(MemberName)
Block.isAABBInsideLiquid(Block, World, BlockPos, AxisAlignedBB)
SoundCategory.getSoundCategoryNames()
Component.removeMouseListener(Component, MouseListener)
ListIterator.hasNext(ListIterator)
AtomicInteger.floatValue(AtomicInteger)
Tutorial.update(Tutorial)
Toolkit.isModalExclusionTypeSupported(Toolkit, ModalExclusionType)
Class.toGenericString(Class)
Block.getItem(Block, World, BlockPos, IBlockState)
BufferBuilder.putPosition(BufferBuilder, double, double, double)
Block.isBeaconBase(Block, IBlockAccess, BlockPos, BlockPos)
Logger.isFatalEnabled(Logger | Logger, Marker)
Potion.getPotionFromResourceLocation(String)
LocalTime.plus(LocalTime, TemporalAmount | LocalTime, long, TemporalUnit | LocalTime, long, TemporalUnit | LocalTime, TemporalAmount)
EventQueue.push(EventQueue, EventQueue)
Biome.getBiomeName(Biome)
Window.deliverMouseWheelToAncestor(Window, MouseWheelEvent)
EntityLivingBase.isEntityAlive(EntityLivingBase)
Method.specificToStringHeader(Method, StringBuilder)
TextFormatting.valueOf(String)
ValueRange.isFixed(ValueRange)
ImmutableMultiset.copyOf(Object[] | Iterable | Iterator)
PrintJob.getPageDimension(PrintJob)
ListenerListInst.dispose(ListenerListInst)
Clipboard.getFlavorListeners(Clipboard)
Entity.getBrightnessForRender(Entity)
Instant.truncatedTo(Instant, TemporalUnit)
TextureAtlasSprite.getFrameTextureData(TextureAtlasSprite, int | int[][], int, int, int)
WorldBorder.getWarningTime(WorldBorder)
MethodTypeForm.cachedMethodHandle(MethodTypeForm, int)
Block.getCreativeTab(Block)
ChunkCache.isEmpty(ChunkCache)
Thread.sleep(long, int | long)
IsoChronology.resolveYearOfEra(IsoChronology, Map, ResolverStyle | IsoChronology, Map, ResolverStyle)
Block.getMapColor(Block, IBlockState, IBlockAccess, BlockPos)
Random.internalNextInt(Random, int, int)
EventQueue.postEventPrivate(EventQueue, AWTEvent)
ChronoLocalDateTime.isBefore(ChronoLocalDateTime, ChronoLocalDateTime)
List.spliterator(List)
AttributeModifier.getID(AttributeModifier)
Stream.mapToLong(Stream, ToLongFunction)
NetHandlerPlayClient.handleUpdateHealth(NetHandlerPlayClient, SPacketUpdateHealth)
StackTraceElement.isNativeMethod(StackTraceElement)
Vector.lengthSquared(Vector)
IntegratedServer.shouldBroadcastConsoleToOps(IntegratedServer)
NBTTagCompound.setByte(NBTTagCompound, String, byte)
PotionEffect.writeCustomPotionEffectToNBT(PotionEffect, NBTTagCompound)
WorldType.canBeCreated(WorldType)
EntityLiving.spawnExplosionParticle(EntityLiving)
MinecraftServer.setAllowPvp(MinecraftServer, boolean)
AffineTransform.deltaTransform(AffineTransform, double[], int, double[], int, int | AffineTransform, Point2D, Point2D)
NBTTagList.copy(NBTTagList | NBTTagList)
Calendar.toStandaloneStyle(Calendar, int)
RenderItem.renderQuad(RenderItem, BufferBuilder, BakedQuad, int)
OptionalDouble.getAsDouble(OptionalDouble)
World.markTileEntityForRemoval(World, TileEntity)
EnumPacketDirection.values()
NetHandlerPlayClient.handleEntityMetadata(NetHandlerPlayClient, SPacketEntityMetadata)
ComponentPeer.handleEvent(ComponentPeer, AWTEvent)
LocalTime.format(LocalTime, DateTimeFormatter)
MinecraftServer.getServer(MinecraftServer)
Item.getIsRepairable(Item, ItemStack, ItemStack)
DataParameter.hashCode(DataParameter)
Minecraft.getSaveLoader(Minecraft)
RenderGlobal.markBlockRangeForRenderUpdate(RenderGlobal, int, int, int, int, int, int)
EntityPlayerMP.startRiding(EntityPlayerMP, Entity, boolean)
Minecraft.setDimensionAndSpawnPlayer(Minecraft, int)
Hashtable.keySet(Hashtable)
AffineTransform.setTransform(AffineTransform, double, double, double, double, double, double | AffineTransform, AffineTransform)
ImmutableSetMultimap.inverse(ImmutableSetMultimap | ImmutableSetMultimap)
Executable.getParameterAnnotations(Executable)
EntityLivingBase.curePotionEffects(EntityLivingBase, ItemStack)
Thread.stop(Thread | Thread, Throwable)
WorldInfo.populateFromWorldSettings(WorldInfo, WorldSettings)
World.getCombinedLight(World, BlockPos, int)
Package.getPackage(String | Class)
Toolkit.createMenuBar(Toolkit, MenuBar)
IScoreCriteria.isReadOnly(IScoreCriteria)
Component.getCursor_NoClientCode(Component)
Render.doRender(Render, Entity, double, double, double, float, float)
Entity.getRenderBoundingBox(Entity)
ChunkProviderServer.chunkExists(ChunkProviderServer, int, int)
DoubleStream.min(DoubleStream)
EntityPlayer.createCooldownTracker(EntityPlayer)
EntityPlayer.getLeftShoulderEntity(EntityPlayer)
EventDispatchThread.pumpOneEventForFilters(EventDispatchThread, int)
OutputStream.write(OutputStream, int | OutputStream, byte[] | OutputStream, byte[], int, int)
Rectangle2D.equals(Rectangle2D, Object)
AtomicInteger.compareAndSet(AtomicInteger, int, int)
JsonReader.endArray(JsonReader)
ReflectionFactory.getMethodAccessor(ReflectionFactory, Method)
ServerCommandManager.getServer(ServerCommandManager)
Calendar.internalSet(Calendar, int, int)
DoubleBuffer.hashCode(DoubleBuffer)
World.getMapStorage(World)
DataFixer.registerFix(DataFixer, IFixType, IFixableData)
GuiScreen.handleInput(GuiScreen)
DoubleSummaryStatistics.getSum(DoubleSummaryStatistics)
Properties.save(Properties, OutputStream, String)
NBTTagList.getTagType(NBTTagList)
MinecraftServer.enableProfiling(MinecraftServer)
PlayerList.serverUpdateMovingPlayer(PlayerList, EntityPlayerMP)
DoubleStream.max(DoubleStream)
JsonPrimitive.getAsInt(JsonPrimitive)
Component.subtractAndApplyShapeBelowMe(Component)
LocalDateTime.from(TemporalAccessor)
AttributeKey.exists(String)
MinecraftSessionService.hasJoinedServer(MinecraftSessionService, GameProfile, String, InetAddress)
DifficultyInstance.getAdditionalDifficulty(DifficultyInstance)
NBTTagCompound.getKeySet(NBTTagCompound)
PathNavigate.getEntityPosition(PathNavigate)
Component.update(Component, Graphics)
PlayerList.getHostPlayerData(PlayerList)
OffsetDateTime.minusHours(OffsetDateTime, long)
PlayerList.sendPacketToAllPlayers(PlayerList, Packet)
Dialog.getTitle(Dialog)
Component.applyCompoundShape(Component, Region)
BlockStateContainer.getValidStates(BlockStateContainer)
Dialog.doDispose(Dialog)
Item.getAnimationParameters(Item, ItemStack, World, EntityLivingBase)
ColorModel.getLinearRGB8TosRGB8LUT()
OptionalLong.of(long)
CompositeByteBuf.deallocate(CompositeByteBuf)
EnumDifficulty.values()
WorldGenAbstractTree.setDirtAt(WorldGenAbstractTree, World, BlockPos)
NodeProcessor.setCanOpenDoors(NodeProcessor, boolean)
ChannelFuture.addListeners(ChannelFuture, GenericFutureListener[])
Method.getAnnotatedReturnType(Method)
ByteBuf.setCharSequence(ByteBuf, int, CharSequence, Charset)
Manifest.parseName(Manifest, byte[], int)
BigInteger.implMontgomeryMultiply(int[], int[], int[], int, long, int[])
Block.isFullCube(Block, IBlockState)
EntityLivingBase.updateElytra(EntityLivingBase)
File.getPrefixLength(File)
ImmutableTable.cellSet(ImmutableTable | ImmutableTable)
Style.setUnderlined(Style, Boolean)
StringBuilder.writeObject(StringBuilder, ObjectOutputStream)
Constructor.getFactory(Constructor)
Loader.access$400(Loader)
Graphics.draw3DRect(Graphics, int, int, int, int, boolean)
IntBuffer.allocate(int)
Locale.getUnicodeLocaleType(Locale, String)
DoubleStream.anyMatch(DoubleStream, DoublePredicate)
IProperty.getValueClass(IProperty)
Window.paint(Window, Graphics)
EntityLivingBase.updatePotionMetadata(EntityLivingBase)
Component.canBeFocusOwnerRecursively(Component)
ChannelPromise.unvoid(ChannelPromise)
Iterator.forEachRemaining(Iterator, Consumer)
Dialog.setBackground(Dialog, Color)
EntityLivingBase.isEntityUndead(EntityLivingBase)
Item.onEntitySwing(Item, EntityLivingBase, ItemStack)
Calendar.setZoneShared(Calendar, boolean)
ColorModel.getComponentSize(ColorModel, int | ColorModel)
AccessibleStateSet.remove(AccessibleStateSet, AccessibleState)
Window.removeWindowStateListener(Window, WindowStateListener)
OptionalLong.orElseGet(OptionalLong, LongSupplier)
MapItemRenderer.clearLoadedMaps(MapItemRenderer)
Wrapper.forceType(Class, Class)
Raster.createCompatibleWritableRaster(Raster | Raster, int, int, int, int | Raster, Rectangle | Raster, int, int)
LambdaForm.editor(LambdaForm)
Component.freeIfNecessary(Component)
Class.getDeclaredAnnotation(Class, Class)
BigDecimal.pow(BigDecimal, int | BigDecimal, int, MathContext)
ZonedDateTime.plus(ZonedDateTime, long, TemporalUnit | ZonedDateTime, TemporalAmount | ZonedDateTime, TemporalAmount | ZonedDateTime, long, TemporalUnit | ZonedDateTime, long, TemporalUnit | ZonedDateTime, TemporalAmount)
Method.invoke(Method, Object, Object[])
AttributeValues.i_get(AttributeValues, EAttribute)
Item.isShield(Item, ItemStack, EntityLivingBase)
CreativeTabs.getTranslationKey(CreativeTabs)
LocalDateTime.until(LocalDateTime, Temporal, TemporalUnit)
ChannelPipeline.fireChannelReadComplete(ChannelPipeline)
Biome.getBiomeForId(int)
Era.getDisplayName(Era, TextStyle, Locale)
EntityMinecart.attackEntityFrom(EntityMinecart, DamageSource, float)
DragSourceContext.getDragSource(DragSourceContext)
NetHandlerPlayClient.handleScoreboardObjective(NetHandlerPlayClient, SPacketScoreboardObjective)
FlavorMap.getNativesForFlavors(FlavorMap, DataFlavor[])
ShaderManager.getProgram(ShaderManager)
Particle.setBoundingBox(Particle, AxisAlignedBB)
EntityLiving.setEquipmentBasedOnDifficulty(EntityLiving, DifficultyInstance)
Locale.getDisplayVariantArray(Locale, Locale)
EntityPlayer.sendStatusMessage(EntityPlayer, ITextComponent, boolean)
LambdaForm.computeInitialPreparedForms()
Container.getComponentCount(Container)
SpeciesData.fieldTypeChar(SpeciesData, int)
ByteBuf.getBytes(ByteBuf, int, ByteBuf, int | ByteBuf, int, byte[] | ByteBuf, int, ByteBuf | ByteBuf, int, ByteBuf, int, int | ByteBuf, int, ByteBuffer | ByteBuf, int, OutputStream, int | ByteBuf, int, byte[], int, int | ByteBuf, int, GatheringByteChannel, int | ByteBuf, int, FileChannel, long, int)
ValueRange.equals(ValueRange, Object)
Item.getEquipmentSlot(Item, ItemStack)
ChunkProviderServer.isChunkGeneratedAt(ChunkProviderServer, int, int)
String.equals(String, Object)
EntityMoveHelper.setMoveTo(EntityMoveHelper, double, double, double, double)
TextureAtlasSprite.getIconWidth(TextureAtlasSprite)
Scoreboard.broadcastTeamRemove(Scoreboard, ScorePlayerTeam)
ZonedDateTime.getDayOfWeek(ZonedDateTime)
WatchService.take(WatchService)
Entity.createRunningParticles(Entity)
LongBuffer.put(LongBuffer, long | LongBuffer, LongBuffer | LongBuffer, long[] | LongBuffer, int, long | LongBuffer, long[], int, int)
EnumBlockRenderType.values()
World.sendPacketToServer(World, Packet)
ReentrantLock.unlock(ReentrantLock)
ChronoLocalDate.isBefore(ChronoLocalDate, ChronoLocalDate)
Thread.suspend(Thread)
LineMetrics.getDescent(LineMetrics)
GameSettings.onGuiClosed(GameSettings)
SoundHandler.addListener(SoundHandler, ISoundEventListener)
Window.setGraphicsConfiguration(Window, GraphicsConfiguration)
ItemStack.areItemsEqual(ItemStack, ItemStack)
UserPrincipalLookupService.lookupPrincipalByGroupName(UserPrincipalLookupService, String)
OffsetDateTime.getDayOfMonth(OffsetDateTime)
Raster.getSampleModelTranslateX(Raster)
Raster.getSampleModelTranslateY(Raster)
DataBuffer.setElemFloat(DataBuffer, int, float | DataBuffer, int, int, float)
Chunk.read(Chunk, PacketBuffer, int, boolean)
ComponentPeer.updateGraphicsData(ComponentPeer, GraphicsConfiguration)
DropTargetContextPeer.getTransferable(DropTargetContextPeer)
NetHandlerPlayClient.handleConfirmTransaction(NetHandlerPlayClient, SPacketConfirmTransaction)
Lookup.getDirectField(Lookup, byte, Class, MemberName)
AccessibleTable.getAccessibleRowDescription(AccessibleTable, int)
AppContext.access$700()
WindowPeer.setOpaque(WindowPeer, boolean)
Path.getFileSystem(Path)
IsoChronology.dateEpochDay(IsoChronology, long | IsoChronology, long)
Throwable.readObject(Throwable, ObjectInputStream)
ISaveFormat.renameWorld(ISaveFormat, String, String)
ImmutableMap.isPartialView(ImmutableMap)
ZoneOffset.range(ZoneOffset, TemporalField)
AdvancementManager.getAdvancements(AdvancementManager)
Toolkit.prepareImage(Toolkit, Image, int, int, ImageObserver)
Predicate.equals(Predicate, Object)
GuiScreen.setText(GuiScreen, String, boolean)
Graphics2D.fill3DRect(Graphics2D, int, int, int, int, boolean)
Channel.alloc(Channel)
ConstructorRepository.parse(ConstructorRepository, String | ConstructorRepository, String)
NamedFunction.memberDeclaringClassOrNull(NamedFunction)
EntityPlayer.isPlayerFullyAsleep(EntityPlayer)
URL.openStream(URL)
ShaderManager.getShaderUniform(ShaderManager, String)
EntityPlayer.addMountedMovementStat(EntityPlayer, double, double, double)
EntityLivingBase.onLivingUpdate(EntityLivingBase)
ByteBuf.readMedium(ByteBuf)
JsonElement.getAsString(JsonElement)
Comparator.reverseOrder()
TextHitInfo.beforeOffset(int)
MemberName.isAccessibleFrom(MemberName, Class)
StringBuilder.setCharAt(StringBuilder, int, char)
Pair.of(Object, Object)
EnumFacing.toString(EnumFacing)
EntityLiving.applyEntityAttributes(EntityLiving)
Toolkit.access$000()
PlatformLogger.finest(PlatformLogger, String | PlatformLogger, String, Throwable | PlatformLogger, String, Object[])
MemberName.getName(Object | MemberName)
Toolkit.access$002(Toolkit)
Hashtable.reconstitutionPut(Hashtable, Entry[], Object, Object)
Control.needsReload(Control, String, Locale, String, ClassLoader, ResourceBundle, long)
BlockFlower.getBlockType(BlockFlower)
ByteBuf.setLongLE(ByteBuf, int, long)
EntityPlayer.collideWithPlayer(EntityPlayer, Entity)
Container.deliverEvent(Container, Event)
URLConnection.getRequestProperty(URLConnection, String)
Calendar.clone(Calendar)
IChunkLoader.isChunkGeneratedAt(IChunkLoader, int, int)
LambdaFormEditor.filterReturnForm(LambdaFormEditor, BasicType, boolean)
ByteBuf.writeInt(ByteBuf, int)
JsonWriter.push(JsonWriter, int)
Enum.equals(Enum, Object)
RandomValueRange.generateFloat(RandomValueRange, Random)
BigInteger.squareToLen(int[], int, int[])
LocalTime.getSecond(LocalTime)
NBTTagCompound.getId(NBTTagCompound)
Template.writeInts(Template, int[])
Spliterator.estimateSize(Spliterator)
EventDispatchThread.filterAndCheckEvent(EventDispatchThread, AWTEvent)
ChannelFuture.awaitUninterruptibly(ChannelFuture)
Particle.setSize(Particle, float, float)
Shape.getBounds(Shape)
SoundHandler.stopSounds(SoundHandler)
Block.getStateForPlacement(Block, World, BlockPos, EnumFacing, float, float, float, int, EntityLivingBase, EnumHand | Block, World, BlockPos, EnumFacing, float, float, float, int, EntityLivingBase)
LocalDate.equals(LocalDate, Object)
Dialog.paramString(Dialog)
EventQueue.access$600(EventQueue)
ImmutableMap.replaceAll(ImmutableMap, BiFunction)
Minecraft.getSkinManager(Minecraft)
AccessibleContext.getAccessibleIndexInParent(AccessibleContext)
StatisticsManagerServer.parseJson(StatisticsManagerServer, String)
Block.isTopSolid(Block, IBlockState)
EntityPlayer.playShoulderEntityAmbientSound(EntityPlayer, NBTTagCompound)
SoundHandler.validateSoundResource(SoundHandler, Sound, ResourceLocation)
FieldRepository.getGenericType(FieldRepository)
World.updateObservingBlocksAt(World, BlockPos, Block)
Logger.isDebugEnabled(Logger, Marker | Logger)
ImmutableMultimap.createValues(ImmutableMultimap | ImmutableMultimap)
ScorePlayerTeam.getAllowFriendlyFire(ScorePlayerTeam)
ImmutableTable.get(ImmutableTable, Object, Object)
StackTraceElement.getLineNumber(StackTraceElement)
EventExecutorGroup.iterator(EventExecutorGroup)
Thread.getDefaultUncaughtExceptionHandler()
TextureAtlasSprite.hasCustomLoader(TextureAtlasSprite, IResourceManager, ResourceLocation)
NumericShaper.shapeNonContextually(NumericShaper, char[], int, int)
FontStrike.getGlyphImagePtr(FontStrike, int)
FocusTraversalPolicy.getDefaultComponent(FocusTraversalPolicy, Container)
List.get(List, int)
EntityMinecart.setDisplayTile(EntityMinecart, IBlockState)
Method.setMethodAccessor(Method, MethodAccessor)
ImmutableList.addAll(ImmutableList, int, Collection)
URLConnection.getLastModified(URLConnection)
ArrayList.iterator(ArrayList)
Predicate.test(Predicate, Object)
TileEntity.onChunkUnload(TileEntity)
Class.getAnnotationsByType(Class, Class)
Item.onItemUseFinish(Item, ItemStack, World, EntityLivingBase)
Entity.setFire(Entity, int)
JsonWriter.getSerializeNulls(JsonWriter)
ByteBuf.readRetainedSlice(ByteBuf, int)
EntityPlayer.getXPSeed(EntityPlayer)
AWTEvent.paramString(AWTEvent)
EntityLiving.handleStatusUpdate(EntityLiving, byte)
Result.valueOf(String)
Throwable.toString(Throwable)
Village.getPlayerReputation(Village, String | Village, UUID)
MinecraftServer.isSinglePlayer(MinecraftServer)
DamageSource.getDamageLocation(DamageSource)
ByteBuffer.putDouble(ByteBuffer, int, double | ByteBuffer, double)
ColorModel.getBlue(ColorModel, Object | ColorModel, int)
EntityRenderer.setupOverlayRendering(EntityRenderer)
SoundCategory.getByName(String)
Component.numListening(Component, long)
Component.isInstanceOf(Object, String)
Font.getFont2D(Font)
StringBuilder.append(StringBuilder, int | StringBuilder, double | StringBuilder, CharSequence, int, int | StringBuilder, double | StringBuilder, char | StringBuilder, float | StringBuilder, char[], int, int | StringBuilder, CharSequence | StringBuilder, String | StringBuilder, char[], int, int | StringBuilder, float | StringBuilder, char | StringBuilder, StringBuffer | StringBuilder, char[] | StringBuilder, char[] | StringBuilder, CharSequence | StringBuilder, char | StringBuilder, CharSequence, int, int | StringBuilder, Object | StringBuilder, long | StringBuilder, CharSequence, int, int | StringBuilder, boolean | StringBuilder, CharSequence | StringBuilder, long | StringBuilder, StringBuffer | StringBuilder, boolean | StringBuilder, int | StringBuilder, String | StringBuilder, Object)
GraphicsConfiguration.getBounds(GraphicsConfiguration)
Class.searchMethods(Method[], String, Class[])
WorldInfo.setThunderTime(WorldInfo, int)
Template.transformedSize(Template, Rotation)
EntityLiving.createNavigator(EntityLiving, World)
Excluder.withExclusionStrategy(Excluder, ExclusionStrategy, boolean, boolean)
ArrayList.ensureCapacityInternal(ArrayList, int)
Block.isFireSource(Block, World, BlockPos, EnumFacing)
GlyphVector.getFontRenderContext(GlyphVector)
Vector.removeIf(Vector, Predicate)
Vector3f.getZ(Vector3f)
Point.getLocation(Point)
Font2D.getTableBytes(Font2D, int)
Locale.setDefault(Locale | Category, Locale)
Vector3f.getX(Vector3f)
Vector3f.getY(Vector3f)
ConstantPool.getMemberRefInfoAt0(ConstantPool, Object, int)
NBTTagCompound.setDouble(NBTTagCompound, String, double)
Rectangle2D.add(Rectangle2D, double, double | Rectangle2D, Rectangle2D | Rectangle2D, Point2D)
Gson.toJson(Gson, Object, Type, JsonWriter | Gson, JsonElement, JsonWriter | Gson, Object, Type | Gson, JsonElement | Gson, Object | Gson, Object, Appendable | Gson, Object, Type, Appendable | Gson, JsonElement, Appendable)
Instant.secondsUntil(Instant, Instant)
LongStream.forEachOrdered(LongStream, LongConsumer)
TileEntity.isInvalid(TileEntity)
URL.getAuthority(URL)
MemberName.isBridge(MemberName)
Calendar.hashCode(Calendar)
IAttribute.getDefaultValue(IAttribute)
JsonObject.getAsJsonPrimitive(JsonObject, String)
Toolkit.createDialog(Toolkit, Dialog)
Executable.privateGetParameters(Executable)
BaseLocale.getVariant(BaseLocale)
ItemStack.setItemDamage(ItemStack, int)
AtomicInteger.updateAndGet(AtomicInteger, IntUnaryOperator)
IsoChronology.eraOf(IsoChronology, int | IsoChronology, int)
LocalDate.ofEpochDay(long)
PotionEffect.getEffectName(PotionEffect)
EntityMinecart.getCurrentCartSpeedCapOnRail(EntityMinecart)
BufferCapabilities.isFullScreenRequired(BufferCapabilities)
StateImplementation.getPlayerRelativeBlockHardness(StateImplementation, EntityPlayer, World, BlockPos)
TextureAtlasSprite.loadSpriteFrames(TextureAtlasSprite, IResource, int)
BigDecimal.hashCode(BigDecimal)
ComponentPeer.isFocusable(ComponentPeer)
Minecraft.setConnectedToRealms(Minecraft, boolean)
ReferenceQueue.enqueue(ReferenceQueue, Reference)
Calendar.compareTo(Calendar, Calendar | Calendar, Object | Calendar, long)
Class.reflectionData(Class)
Color.testColorValueRange(int, int, int, int | float, float, float, float)
RegistryNamespaced.getObject(RegistryNamespaced, Object)
UUID.digits(long, int)
CodeSource.convertCertArrayToSignerArray(CodeSource, Certificate[])
EntityPlayer.damageShield(EntityPlayer, float)
MinecraftServer.getActiveAnvilConverter(MinecraftServer)
NonNullList.add(NonNullList, int, Object)
BufferCapabilities.isPageFlipping(BufferCapabilities)
BufferStrategy.dispose(BufferStrategy)
Entity.getUniqueID(Entity)
EntityLivingBase.getArrowCountInEntity(EntityLivingBase)
ResourceBundle.access$200()
OptionalDouble.ifPresent(OptionalDouble, DoubleConsumer)
LambdaForm.permutedTypesMatch(int[], BasicType[], Name[], int)
NetHandlerPlayClient.handleParticles(NetHandlerPlayClient, SPacketParticles)
ChronoZonedDateTime.minus(ChronoZonedDateTime, long, TemporalUnit | ChronoZonedDateTime, TemporalAmount | ChronoZonedDateTime, long, TemporalUnit | ChronoZonedDateTime, TemporalAmount)
Toolkit.getMaximumCursorColors(Toolkit)
DragSource.getDragSourceMotionListeners(DragSource)
ChronoLocalDateTime.toLocalTime(ChronoLocalDateTime)
Item.canItemEditBlocks(Item)
WorldServer.onEntityAdded(WorldServer, Entity)
IResourcePack.getInputStream(IResourcePack, ResourceLocation)
Window.setIconImage(Window, Image)
TileEntity.getBlockType(TileEntity)
LocalTime.readExternal(DataInput)
ByteBuffer.asFloatBuffer(ByteBuffer)
Item.canContinueUsing(Item, ItemStack, ItemStack)
Entity.registerFixes(DataFixer)
Minecraft.storeTEInStack(Minecraft, ItemStack, TileEntity)
JsonArray.remove(JsonArray, int | JsonArray, JsonElement)
AttributeValues.getWeight(AttributeValues)
Locale.getISO3Code(String, String)
ByteBuf.writeZero(ByteBuf, int)
Biome.decorate(Biome, World, Random, BlockPos)
Vector.replaceAll(Vector, UnaryOperator)
Calendar.getCalendarType(Calendar)
NamedFunction.resolve(NamedFunction)
IntegratedServer.isSnooperEnabled(IntegratedServer)
Component.toString(Component)
BigDecimal.expandBigIntegerTenPowers(int)
DragSource.processDragDropEnd(DragSource, DragSourceDropEvent)
WorldBorder.setDamageBuffer(WorldBorder, double)
OffsetTime.getNano(OffsetTime)
ChunkPos.getZStart(ChunkPos)
EntityRenderer.isDrawBlockOutline(EntityRenderer)
ChunkProviderServer.saveChunkExtraData(ChunkProviderServer, Chunk)
Entity.getRotationYawHead(Entity)
Entity.shouldRenderInPass(Entity, int)
String.toString(String)
File.setLastModified(File, long)
Potion.getPotionDurationString(PotionEffect, float)
Window.access$700(Window)
MemberName.isPublic(MemberName)
Window.access$702(Window, int)
World.tickUpdates(World, boolean)
InetAddressImpl.anyLocalAddress(InetAddressImpl)
CollisionRule.values()
IntSummaryStatistics.combine(IntSummaryStatistics, IntSummaryStatistics)
ScorePlayerTeam.setColor(ScorePlayerTeam, TextFormatting)
ArrayList.ensureCapacity(ArrayList, int)
Material.setRequiresTool(Material)
BigInteger.subN(int[], int[], int)
VillageDoorInfo.getDoorOpeningRestrictionCounter(VillageDoorInfo)
Cursor.access$400()
EntityPlayerMP.createCooldownTracker(EntityPlayerMP)
Block.setHardness(Block, float)
RenderChunk.resortTransparency(RenderChunk, float, float, float, ChunkCompileTaskGenerator)
Snooper.addMemoryStatsToSnooper(Snooper)
PlatformLogger.isEnabled(PlatformLogger)
SpawnListEntry.toString(SpawnListEntry)
Item.showDurabilityBar(Item, ItemStack)
LanguageManager.getCurrentLanguage(LanguageManager)
ThreadLocal.set(ThreadLocal, Object)
Duration.ofSeconds(long, long | long)
IChunkLoader.loadChunk(IChunkLoader, World, int, int)
GuiScreen.keyTyped(GuiScreen, char, int)
Field.getModifiers(Field)
EntityLivingBase.onNewPotionEffect(EntityLivingBase, PotionEffect)
Vec3i.distanceSq(Vec3i, Vec3i | Vec3i, double, double, double)
World.isSidePowered(World, BlockPos, EnumFacing)
Item.getHorseArmorTexture(Item, EntityLiving, ItemStack)
RenderChunk.getLockCompileTask(RenderChunk)
ImmutableMultimap.lambda$entrySpliterator$1(Entry)
URL.writeObject(URL, ObjectOutputStream)
DayOfWeek.plus(DayOfWeek, long)
LocalTime.now(Clock | ZoneId | )
BufferedImage.copyData(BufferedImage, WritableRaster)
IntegratedServer.canStructuresSpawn(IntegratedServer)
Vector.addAll(Vector, int, Collection | Vector, Collection)
Pair.getValue(Pair)
InputStream.close(InputStream)
Component.getListeners(Component, Class)
Window.connectOwnedWindow(Window, Window)
MethodType.checkRtype(Class)
Container.findTraversalRoot(Container)
ChunkCompileTaskGenerator.getType(ChunkCompileTaskGenerator)
AttributeValues.clone(AttributeValues | AttributeValues)
IntSummaryStatistics.getAverage(IntSummaryStatistics)
Component.keyDown(Component, Event, int)
DoubleStream.mapToInt(DoubleStream, DoubleToIntFunction)
LocalDateTime.plusSeconds(LocalDateTime, long)
MemberName.vminfoIsConsistent(MemberName)
AccessibleComponent.contains(AccessibleComponent, Point)
MethodType.asCollectorType(MethodType, Class, int)
Chunk.getLowestHeight(Chunk)
Potion.shouldRenderInvText(Potion, PotionEffect)
Properties.getProperty(Properties, String, String | Properties, String)
DataBuffer.getElem(DataBuffer, int | DataBuffer, int, int)
Minecraft.displayInGameMenu(Minecraft)
MinecraftServer.getOnlinePlayerProfiles(MinecraftServer)
DamageSource.isDamageAbsolute(DamageSource)
Calendar.isPartiallyNormalized(Calendar)
Vector.removeAll(Vector, Collection)
Score.getScoreScoreboard(Score)
WorldInfo.getTerrainType(WorldInfo)
ImmutableList.copyOf(Iterable | Object[] | Collection | Iterator)
World.onEntityAdded(World, Entity)
String.toLowerCase(String | String, Locale)
Point2D.setLocation(Point2D, double, double | Point2D, Point2D)
BoundMethodHandle.copyWithExtendL(BoundMethodHandle, MethodType, LambdaForm, Object)
BoundMethodHandle.copyWithExtendJ(BoundMethodHandle, MethodType, LambdaForm, long)
BoundMethodHandle.copyWithExtendI(BoundMethodHandle, MethodType, LambdaForm, int)
Axis.getName2(Axis)
BoundMethodHandle.copyWithExtendF(BoundMethodHandle, MethodType, LambdaForm, float)
BoundMethodHandle.copyWithExtendD(BoundMethodHandle, MethodType, LambdaForm, double)
ByteBuf.setBoolean(ByteBuf, int, boolean)
Permission.implies(Permission, Permission)
ByteBuf.readByte(ByteBuf)
BaselineResizeBehavior.valueOf(String)
IBakedModel.isAmbientOcclusion(IBakedModel, IBlockState | IBakedModel)
StateImplementation.getRenderType(StateImplementation)
NBTTagCompound.setBoolean(NBTTagCompound, String, boolean)
Village.getExistedDoor(Village, BlockPos)
NBTTagCompound.setString(NBTTagCompound, String, String)
AnnotationType.getInstance(Class)
Month.minus(Month, long)
Container.paramString(Container)
Month.of(int)
FunctionManager.loadFunctions(FunctionManager)
EntityRenderer.switchUseShader(EntityRenderer)
Properties.loadConvert(Properties, char[], int, int, char[])
ByteBuf.writeMedium(ByteBuf, int)
ShaderGroup.addShader(ShaderGroup, String, Framebuffer, Framebuffer)
ByteBufAllocator.compositeDirectBuffer(ByteBufAllocator | ByteBufAllocator, int)
StateImplementation.isTranslucent(StateImplementation)
Vector.insertElementAt(Vector, Object, int)
PlayerList.setGameType(PlayerList, GameType)
ShaderLoader.deleteShader(ShaderLoader, ShaderManager)
BufferedImage.getTileGridXOffset(BufferedImage)
Class.getClassLoader(Class)
Component.postsOldMouseEvents(Component)
Scoreboard.getObjectiveInDisplaySlot(Scoreboard, int)
Hashtable.equals(Hashtable, Object)
Explosion.getAffectedBlockPositions(Explosion)
Component.dispatchEventImpl(Component, AWTEvent)
HoverEvent.equals(HoverEvent, Object)
Component.setCursor(Component, Cursor)
MethodType.rtype(MethodType)
LocalDateTime.withDayOfYear(LocalDateTime, int)
ModelBiped.render(ModelBiped, Entity, float, float, float, float, float, float)
Graphics2D.drawImage(Graphics2D, Image, AffineTransform, ImageObserver | Graphics2D, BufferedImage, BufferedImageOp, int, int)
Duration.ofNanos(long)
OffsetDateTime.adjustInto(OffsetDateTime, Temporal)
Item.setCreativeTab(Item, CreativeTabs)
MinecraftServer.getCurrentTimeMillis()
CompositeByteBuf.discardReadBytes(CompositeByteBuf | CompositeByteBuf)
InetAddress.isLoopbackAddress(InetAddress)
Date.setMinutes(Date, int)
Toolkit.createWindow(Toolkit, Window)
URLConnection.setDoOutput(URLConnection, boolean)
FontMetrics.toString(FontMetrics)
Axis.getPlane(Axis)
ZonedDateTime.writeReplace(ZonedDateTime)
DoubleSummaryStatistics.combine(DoubleSummaryStatistics, DoubleSummaryStatistics)
MethodHandle.isInvokeSpecial(MethodHandle)
SampleModel.getDataElements(SampleModel, int, int, int, int, Object, DataBuffer | SampleModel, int, int, Object, DataBuffer)
BigInteger.intArrayCmpToLen(int[], int[], int)
EntityLiving.canPassengerSteer(EntityLiving)
BigInteger.intValueExact(BigInteger)
URL.getUserInfo(URL)
ReentrantLock.getHoldCount(ReentrantLock)
Container.startLWModal(Container)
EntityLivingBase.getJumpUpwardsMotion(EntityLivingBase)
AttributeSet.containsAttributes(AttributeSet, AttributeSet)
EntityPlayer.getFallSound(EntityPlayer, int)
Raster.createTranslatedChild(Raster, int, int)
Executable.synthesizeAllParams(Executable)
ImmutableSetMultimap.valueComparator(ImmutableSetMultimap)
Minecraft.isSingleplayer(Minecraft)
Manifest.getMainAttributes(Manifest)
AccessibleText.getSelectionStart(AccessibleText)
Block.canPlaceTorchOnTop(Block, IBlockState, IBlockAccess, BlockPos)
ItemRenderer.transformSideFirstPerson(ItemRenderer, EnumHandSide, float)
World.tick(World)
GraphicsConfiguration.getNormalizingTransform(GraphicsConfiguration)
AbstractStringBuilder.appendCodePoint(AbstractStringBuilder, int)
CompositeByteBuf.numComponents(CompositeByteBuf)
RenderGlobal.getViewVector(RenderGlobal, Entity, double)
Lookup.unreflectField(Lookup, Field, boolean)
VolatileImage.getTransparency(VolatileImage)
ChannelPipeline.fireChannelInactive(ChannelPipeline)
URLConnection.getPermission(URLConnection)
EntityMinecart.writeEntityToNBT(EntityMinecart, NBTTagCompound)
NBTTagCompound.writeEntry(String, NBTBase, DataOutput)
GuiScreen.initGui(GuiScreen)
LocalDate.adjustInto(LocalDate, Temporal)
URLConnection.getDefaultUseCaches(URLConnection)
Container.getMousePosition(Container, boolean)
GlyphMetrics.getType(GlyphMetrics)
Container.mixOnHiding(Container, boolean)
ImmutableMap.clear(ImmutableMap)
OffsetDateTime.withNano(OffsetDateTime, int)
StringBuilder.deleteCharAt(StringBuilder, int | StringBuilder, int)
Component.checkWindowClosingException(Component)
Builder.combine(Builder, Builder | Builder, ArrayBasedBuilder | Builder, Builder | Builder, ArrayBasedBuilder | Builder, ArrayBasedBuilder | Builder, Builder | Builder, Builder | Builder, Builder | Builder, ArrayBasedBuilder)
ComponentPeer.canDetermineObscurity(ComponentPeer)
RenderGlobal.calculateParticleLevel(RenderGlobal, boolean)
Particle.getBrightnessForRender(Particle, float)
Chunk.getLightFor(Chunk, EnumSkyBlock, BlockPos)
Long.remainderUnsigned(long, long)
Dialog.setTitle(Dialog, String)
Class.asSubclass(Class, Class)
TimeZone.getDisplayNames(String, Locale)
EntityPlayer.takeStat(EntityPlayer, StatBase)
MemberName.getModifiers(MemberName)
Name.debugString(Name)
Class.getRawAnnotations(Class)
ReflectionFactory.access$002(boolean)
Cursor.getSystemCustomCursor(String)
EventLoopGroup.next(EventLoopGroup)
State.getVertexCount(State)
Block.captureDrops(Block, boolean)
ReflectionFactory.getReplaceResolveForSerialization(ReflectionFactory, Class, String)
Marker.equals(Marker, Object)
ChronoLocalDateTime.atZone(ChronoLocalDateTime, ZoneId)
Block.onNeighborChange(Block, IBlockAccess, BlockPos, BlockPos)
ConstructorRepository.make(String, GenericsFactory)
IProperty.parseValue(IProperty, String)
Graphics.fillRect(Graphics, int, int, int, int)
DoubleStream.forEachOrdered(DoubleStream, DoubleConsumer)
MobSpawnerBaseLogic.isActivated(MobSpawnerBaseLogic)
Item.setMaxStackSize(Item, int)
Class.copyConstructors(Constructor[])
IntegratedServer.getDataDirectory(IntegratedServer)
EntityMinecart.isPoweredCart(EntityMinecart)
DropTarget.setActive(DropTarget, boolean)
AppContext.access$800(AppContext)
ImmutableCollection.iterator(ImmutableCollection | ImmutableCollection)
NetHandlerPlayClient.handleAdvancementInfo(NetHandlerPlayClient, SPacketAdvancementInfo)
URL.checkSpecifyHandler(URL, SecurityManager)
Minecraft.getTextureManager(Minecraft)
EntityLiving.registerFixesMob(DataFixer, Class)
BlockPos.south(BlockPos | BlockPos, int)
EventQueue.access$500(EventQueue, AWTEvent, Object)
Class.forName(String, boolean, ClassLoader | String)
BigInteger.bitLengthForInt(int)
RenderGlobal.setWorldAndLoadRenderers(RenderGlobal, WorldClient)
DropTarget.readObject(DropTarget, ObjectInputStream)
EnumVisible.valueOf(String)
Multimap.containsKey(Multimap, Object)
PlatformLogger.severe(PlatformLogger, String, Object[] | PlatformLogger, String, Throwable | PlatformLogger, String)
Biome.addDefaultFlowers(Biome)
ChannelConfig.getWriteBufferWaterMark(ChannelConfig)
DragGestureRecognizer.readObject(DragGestureRecognizer, ObjectInputStream)
Component.isFocusTraversableOverridden(Component)
LocalDate.getDayOfMonth(LocalDate)
EntityPlayer.setRenderOffsetForSleep(EntityPlayer, EnumFacing)
BlockPos.add(BlockPos, double, double, double | BlockPos, Vec3i | BlockPos, int, int, int)
Integer.toUnsignedLong(int)
AsynchronousFileChannel.force(AsynchronousFileChannel, boolean)
ByteBuf.writeDouble(ByteBuf, double)
String.format(Locale, String, Object[] | String, Object[])
Entity.canFitPassenger(Entity, Entity)
AbstractAttributeMap.getAttributeInstanceByName(AbstractAttributeMap, String)
AdvancementList.setListener(AdvancementList, Listener)
Region.getBoundsIntersectionXYXY(Region, int, int, int, int)
EntityPlayer.setSpawnDimension(EntityPlayer, Integer)
URI.getPort(URI)
Entity.isSneaking(Entity)
CriterionProgress.obtain(CriterionProgress)
Integer.toUnsignedString0(int, int)
CombatTracker.getBestAttacker(CombatTracker)
Item.getHighlightTip(Item, ItemStack, String)
BufferCapabilities.clone(BufferCapabilities)
BigDecimal.stripZerosToMatchScale(BigInteger, long, int, int)
World.canBlockFreezeBody(World, BlockPos, boolean)
RenderGlobal.cleanupDamagedBlocks(RenderGlobal, Iterator)
Entry.$deserializeLambda$(SerializedLambda)
AffineTransform.rotate(AffineTransform, double, double, double | AffineTransform, double, double | AffineTransform, double | AffineTransform, double, double, double, double)
ChannelConfig.getWriteBufferLowWaterMark(ChannelConfig)
OffsetTime.with(OffsetTime, TemporalAdjuster | OffsetTime, TemporalAdjuster | OffsetTime, TemporalField, long | OffsetTime, TemporalField, long | OffsetTime, LocalTime, ZoneOffset)
Template.calculateConnectedPos(Template, PlacementSettings, BlockPos, PlacementSettings, BlockPos)
EntityRenderer.updateShaderGroupSize(EntityRenderer, int, int)
CreativeTabs.getBackgroundImage(CreativeTabs)
Region.getBoundsIntersectionXYWH(Region, int, int, int, int)
Minecraft.refreshResources(Minecraft)
JsonArray.getAsByte(JsonArray)
StateImplementation.getBoundingBox(StateImplementation, IBlockAccess, BlockPos)
Render.getWorldFromRenderManager(Render)
EntityLivingBase.updateItemUse(EntityLivingBase, ItemStack, int)
Calendar.getActualMinimum(Calendar, int)
AtomicInteger.set(AtomicInteger, int)
TileEntity.onLoad(TileEntity)
EntityPlayer.getFireImmuneTicks(EntityPlayer)
ColorModel.getUnnormalizedComponents(ColorModel, float[], int, int[], int)
Vec3i.getDistance(Vec3i, int, int, int)
LambdaForm.namesOK(int, Name[])
Duration.toNanos(Duration)
Container.transferFocusDownCycle(Container)
AdvancementManager.getAdvancement(AdvancementManager, ResourceLocation)
RenderingHints.keySet(RenderingHints)
Instant.hashCode(Instant)
Minecraft.toggleFullscreen(Minecraft)
Collection.equals(Collection, Object)
RenderLivingBase.setScoreTeamColor(RenderLivingBase, EntityLivingBase)
Gson.newJsonReader(Gson, Reader)
ShaderGroup.addFramebuffer(ShaderGroup, String, int, int)
Package.getSpecificationVendor(Package)
Package.getAnnotationsByType(Package, Class)
CompositeByteBuf.componentAtOffset(CompositeByteBuf, int)
Constructor.getDeclaringClass(Constructor)
BlockModelRenderer.fillQuadBounds(BlockModelRenderer, IBlockState, int[], EnumFacing, float[], BitSet)
ResourceBundle.handleGetObject(ResourceBundle, String)
ByteBuf.writeShort(ByteBuf, int)
EnumFacing.getXOffset(EnumFacing)
Invokers.makeExactOrGeneralInvoker(Invokers, boolean)
ZoneOffsetTransition.readObject(ZoneOffsetTransition, ObjectInputStream)
CompositeByteBuf.setBytes(CompositeByteBuf, int, byte[], int, int | CompositeByteBuf, int, ByteBuf, int | CompositeByteBuf, int, FileChannel, long, int | CompositeByteBuf, int, byte[] | CompositeByteBuf, int, ScatteringByteChannel, int | CompositeByteBuf, int, ByteBuf | CompositeByteBuf, int, InputStream, int | CompositeByteBuf, int, ByteBuf, int, int | CompositeByteBuf, int, byte[] | CompositeByteBuf, int, byte[], int, int | CompositeByteBuf, int, ByteBuffer | CompositeByteBuf, int, ByteBuf, int | CompositeByteBuf, int, ByteBuf, int, int | CompositeByteBuf, int, ByteBuf | CompositeByteBuf, int, ByteBuffer)
PlayerList.initializeConnectionToPlayer(PlayerList, NetworkManager, EntityPlayerMP, NetHandlerPlayServer)
Graphics.getFont(Graphics)
EntityRenderer.loadShader(EntityRenderer, ResourceLocation)
Duration.hashCode(Duration)
DamageSource.isFireDamage(DamageSource)
Field.copy(Field)
NetworkManager.createNetworkManagerAndConnect(InetAddress, int, boolean)
HorseArmorType.getProtection(HorseArmorType)
ChannelFuture.isVoid(ChannelFuture)
DataEntry.getKey(DataEntry)
Entity.isBurning(Entity)
Wrapper.newClassCastException(Class, Class)
GameProfile.isLegacy(GameProfile)
MinecraftServer.getEntityFromUuid(MinecraftServer, UUID)
Chronology.isLeapYear(Chronology, long)
TextureManager.onResourceManagerReload(TextureManager, IResourceManager)
Future.isDone(Future)
ReentrantLock.getOwner(ReentrantLock)
ArrayList.remove(ArrayList, Object | ArrayList, int)
NetHandlerPlayClient.handleSpawnGlobalEntity(NetHandlerPlayClient, SPacketSpawnGlobalEntity)
Handle.reset(Handle, ChannelConfig)
EntityJumpHelper.setJumping(EntityJumpHelper)
Wrapper.convert(Wrapper, Object, Class, boolean | Wrapper, Object, Class)
AttributeValues.setSuperscript(AttributeValues, int)
FileLock.close(FileLock)
Minecraft.isJava64bit(Minecraft)
Integer.longValue(Integer)
ClassTypeSignature.make(List)
GenericsFactory.makeChar(GenericsFactory)
CompositeContext.compose(CompositeContext, Raster, Raster, WritableRaster)
Entry.getCount(Entry)
EntityLivingBase.travel(EntityLivingBase, float, float, float)
MinecraftServer.setKeyPair(MinecraftServer, KeyPair)
Unsafe.voidPromise(Unsafe)
BoundMethodHandle.speciesData_LL()
EntityPlayer.shouldHeal(EntityPlayer)
Minecraft.runTickMouse(Minecraft)
ComponentPeer.setZOrder(ComponentPeer, ComponentPeer)
Lookup.restrictProtectedReceiver(Lookup, MemberName)
Village.hasCapability(Village, Capability, EnumFacing)
Event.isConsumed(Event)
Block.rayTrace(Block, BlockPos, Vec3d, Vec3d, AxisAlignedBB)
ProgressivePromise.syncUninterruptibly(ProgressivePromise)
MinecraftServer.isServerInOnlineMode(MinecraftServer)
Manifest.getAttributes(Manifest, String)
Calendar.getMaximum(Calendar, int)
ReflectionFactory.copyField(ReflectionFactory, Field)
ItemStack.updateAnimation(ItemStack, World, Entity, int, boolean)
Reference.clear(Reference)
Class.getInterfaces0(Class)
ResourceLocation.compareTo(ResourceLocation, ResourceLocation | ResourceLocation, Object)
WorldGenAbstractTree.canGrowInto(WorldGenAbstractTree, Block)
LocalDate.getYear(LocalDate)
MemberName.testAnyFlags(MemberName, int)
Vector3f.normalise(Vector3f, Vector3f)
ImageProducer.isConsumer(ImageProducer, ImageConsumer)
Village.getDoorInfo(Village, BlockPos)
World.onEntityRemoved(World, Entity)
ThreadGroup.threadStartFailed(ThreadGroup, Thread)
FileSystem.getUserPrincipalLookupService(FileSystem)
ByteBuf.readInt(ByteBuf)
OffsetTime.of(LocalTime, ZoneOffset | int, int, int, int, ZoneOffset)
GameSettings.loadOptions(GameSettings)
Component.checkImage(Component, Image, ImageObserver | Component, Image, int, int, ImageObserver)
AccessibleContext.getAccessibleDescription(AccessibleContext)
WorldInfo.registerFixes(DataFixer)
NetworkManager.channel(NetworkManager)
GenericsFactory.makeNamedType(GenericsFactory, String)
ChannelOutboundBuffer.getUserDefinedWritability(ChannelOutboundBuffer, int)
PathPoint.makeHash(int, int, int)
Wrapper.values()
World.getSeaLevel(World)
Integer.bitCount(int)
Container.getTraversalRoot(Container)
URLClassPath.findResources(URLClassPath, String, boolean)
IntBuffer.get(IntBuffer | IntBuffer, int[] | IntBuffer, int[], int, int | IntBuffer, int)
EntityLivingBase.heal(EntityLivingBase, float)
Stream.distinct(Stream)
Entity.setGlowing(Entity, boolean)
EntityLiving.getDropItem(EntityLiving)
Advancement.hashCode(Advancement)
StateImplementation.getPropertyValueTable(StateImplementation)
Template.registerFixes(DataFixer)
EventDispatchThread.getEventQueue(EventDispatchThread)
EntityLivingBase.setSprinting(EntityLivingBase, boolean)
AccessibleText.getCaretPosition(AccessibleText)
EventDispatchThread.setEventQueue(EventDispatchThread, EventQueue)
ChronoLocalDate.atTime(ChronoLocalDate, LocalTime)
Duration.equals(Duration, Object)
Window.isFocusableWindow(Window)
LocalDateTime.writeExternal(LocalDateTime, DataOutput)
Field.setFieldAccessor(Field, FieldAccessor, boolean)
AccessibleText.getSelectedText(AccessibleText)
Component.setName(Component, String)
WorldServer.getFunctionManager(WorldServer)
Calendar.setFirstDayOfWeek(Calendar, int)
EntityLivingBase.getRotationYawHead(EntityLivingBase)
Container.getListeners(Container, Class)
ImmutableMap.merge(ImmutableMap, Object, Object, BiFunction)
LootEntry.getEffectiveWeight(LootEntry, float)
VertexFormat.getNormalOffset(VertexFormat)
ByteBuf.writeChar(ByteBuf, int)
WorldType.voidFadeMagnitude(WorldType)
AttributeValues.setSize(AttributeValues, float)
MenuBarPeer.addMenu(MenuBarPeer, Menu)
Vector.writeObject(Vector, ObjectOutputStream)
BigDecimal.movePointRight(BigDecimal, int)
Long.compare(long, long)
CompositeByteBuf.setFloat(CompositeByteBuf, int, float | CompositeByteBuf, int, float)
BigInteger.primitiveRightShift(int[], int, int)
Executable.hasRealParameterData(Executable)
IntBuffer.hasArray(IntBuffer)
Particle.setParticleTexture(Particle, TextureAtlasSprite)
CharBuffer.put(CharBuffer, String, int, int | CharBuffer, char[] | CharBuffer, CharBuffer | CharBuffer, String | CharBuffer, int, char | CharBuffer, char[], int, int | CharBuffer, char)
Particle.getGreenColorF(Particle)
Spliterator.getComparator(Spliterator)
EntityPlayer.bedInRange(EntityPlayer, BlockPos, EnumFacing)
Stream.forEach(Stream, Consumer)
InetAddress.isMCOrgLocal(InetAddress)
Stack.pop(Stack)
ModelRenderer.renderWithRotation(ModelRenderer, float)
Entity.writeEntityToNBT(Entity, NBTTagCompound)
GameProfile.isComplete(GameProfile)
CriterionProgress.fromDateTime(AdvancementProgress, String)
JsonWriter.newline(JsonWriter)
BoundMethodHandle.getSpeciesData(String)
ZonedDateTime.plusWeeks(ZonedDateTime, long)
ChannelOutboundBuffer.progress(ChannelOutboundBuffer, long)
Stream.flatMapToInt(Stream, Function)
GlyphVector.getGlyphJustificationInfo(GlyphVector, int)
ChannelHandlerContext.flush(ChannelHandlerContext)
DamageSource.getHungerDamage(DamageSource)
Month.maxLength(Month)
ScoreObjective.getScoreboard(ScoreObjective)
Window.getDocumentRoot(Window)
Item.isBookEnchantable(Item, ItemStack, ItemStack)
ResourceLocation.equals(ResourceLocation, Object)
LongStream.distinct(LongStream)
ClassLoader.setDefaultAssertionStatus(ClassLoader, boolean)
LocalTime.truncatedTo(LocalTime, TemporalUnit)
BigDecimal.setScale(BigDecimal, int | BigDecimal, int, int | BigDecimal, int, RoundingMode)
Minecraft.getRenderItem(Minecraft)
ImmutableSet.equals(ImmutableSet, Object)
ModelManager.getBlockModelShapes(ModelManager)
EntityLivingBase.applyArmorCalculations(EntityLivingBase, DamageSource, float)
Multiset.size(Multiset)
EntityLivingBase.setArrowCountInEntity(EntityLivingBase, int)
PlayerProfileCache.getProfileByUUID(PlayerProfileCache, UUID)
GenericsFactory.makeTypeVariable(GenericsFactory, String, FieldTypeSignature[])
EntityEquipmentSlot.getIndex(EntityEquipmentSlot)
Builder.put(Builder, Object, Object | Builder, Entry | Builder, Object, Object | Builder, Entry | Builder, Entry | Builder, Cell | Builder, Object, Object | Builder, Object, Object | Builder, Entry | Builder, Object, Object, Object)
WorldInfo.getLastTimePlayed(WorldInfo)
Chunk.setBlockState(Chunk, BlockPos, IBlockState)
ChronoPeriod.getUnits(ChronoPeriod)
URLConnection.getContentType(URLConnection)
Container.setLayout(Container, LayoutManager)
Component.printAll(Component, Graphics)
Class.getSuperclass(Class)
ItemStack.getMetadata(ItemStack)
Boolean.equals(Boolean, Object)
Thread.getAllStackTraces()
Attributes.putAll(Attributes, Map)
LongBuffer.wrap(long[], int, int | long[])
DoubleSummaryStatistics.getMin(DoubleSummaryStatistics)
GraphicAttribute.getBounds(GraphicAttribute)
EntityLivingBase.getTotalArmorValue(EntityLivingBase)
WorldInfo.getWorldTotalTime(WorldInfo)
ScorePlayerTeam.setDeathMessageVisibility(ScorePlayerTeam, EnumVisible)
GlyphMetrics.isWhitespace(GlyphMetrics)
AccessibleTable.getSelectedAccessibleColumns(AccessibleTable)
NetHandlerPlayClient.handleDisplayObjective(NetHandlerPlayClient, SPacketDisplayObjective)
IToast.getType(IToast)
ListenerList.extendMasterList(ListenerList)
ImmutableSet.chooseTableSize(int)
AccessibleText.getAtIndex(AccessibleText, int, int)
TextureAtlasSprite.getIconHeight(TextureAtlasSprite)
ChronoZonedDateTime.hashCode(ChronoZonedDateTime)
Unsafe.connect(Unsafe, SocketAddress, SocketAddress, ChannelPromise)
GraphicsDevice.getDisplayModes(GraphicsDevice)
LongSummaryStatistics.getAverage(LongSummaryStatistics)
AdvancementList.getAdvancements(AdvancementList)
Method.getDeclaringClass(Method)
ItemRenderer.renderItem(ItemRenderer, EntityLivingBase, ItemStack, TransformType)
AccessibleContext.getLocale(AccessibleContext)
Image.flush(Image)
TemporalAccessor.getLong(TemporalAccessor, TemporalField)
Container.addContainerListener(Container, ContainerListener)
JsonToken.values()
NetworkPlayerInfo.setLastHealthTime(NetworkPlayerInfo, long)
EntityLiving.getArmorInventoryList(EntityLiving)
OffsetDateTime.toInstant(OffsetDateTime)
AccessibleContext.getAccessibleParent(AccessibleContext)
World.getWorldTime(World)
JsonWriter.nullValue(JsonWriter)
ImmutableTable.columnKeySet(ImmutableTable | ImmutableTable)
Vector.removeElementAt(Vector, int)
Plane.valueOf(String)
EventQueue.removeSourceEvents(EventQueue, Object, boolean)
NamedFunction.methodType(NamedFunction)
Chunk.getBlockLightOpacity(Chunk, int, int, int | Chunk, BlockPos)
RenderLivingBase.unsetScoreTeamColor(RenderLivingBase)
EntityPlayerMP.canUseCommand(EntityPlayerMP, int, String)
Resource.getByteBuffer(Resource)
TextureAtlasSprite.setIconHeight(TextureAtlasSprite, int)
ByteBuf.writerIndex(ByteBuf | ByteBuf, int)
FlavorMap.getFlavorsForNatives(FlavorMap, String[])
Double.floatValue(Double)
ImmutableTable.createSerializedForm(ImmutableTable)
ListPeer.add(ListPeer, String, int)
Region.getExclusiveOr(Region, Region)
AppContext.access$500()
World.unloadEntities(World, Collection)
Period.getYears(Period)
Point2D.getY(Point2D)
ResourceBundle.getBundle(String | String, Locale | String, Locale, ClassLoader, Control | String, Control | String, Locale, ClassLoader | String, Locale, Control)
Unsafe.deregister(Unsafe, ChannelPromise)
Point2D.getX(Point2D)
File.setExecutable(File, boolean | File, boolean, boolean)
Framebuffer.unbindFramebuffer(Framebuffer)
Rectangle.outcode(Rectangle, double, double)
CompiledChunk.addTileEntity(CompiledChunk, TileEntity)
MethodHandleInfo.getMethodType(MethodHandleInfo)
Status.valueOf(String)
ClassRepository.make(String, GenericsFactory)
GuiScreen.setWorldAndResolution(GuiScreen, Minecraft, int, int)
Locale.formatList(String[], String, String)
Component.getOpaqueShape(Component)
ByteBufAllocator.compositeBuffer(ByteBufAllocator | ByteBufAllocator, int)
PlayerList.getEntityViewDistance(PlayerList)
String.getBytes(String, Charset | String | String, int, int, byte[], int | String, String)
Vec3d.length(Vec3d)
ImmutableMap.putAll(ImmutableMap, Map)
FontRenderer.drawSplitString(FontRenderer, String, int, int, int, int)
EntityItemFrame.entityInit(EntityItemFrame)
EntityPlayerMP.canAttackPlayer(EntityPlayerMP, EntityPlayer)
AdvancementProgress.countCompletedRequirements(AdvancementProgress)
AccessControlContext.getDomainCombiner(AccessControlContext)
MinecraftServer.setDifficultyForAllWorlds(MinecraftServer, EnumDifficulty)
ImmutableMultiset.lambda$toImmutableMultiset$3(Multiset)
ImmutableMultiset.lambda$toImmutableMultiset$2(Multiset, Multiset)
ClassLoader.resolveClass(ClassLoader, Class)
Item.canApplyAtEnchantingTable(Item, ItemStack, Enchantment)
ImmutableMultiset.lambda$toImmutableMultiset$1(Function, ToIntFunction, Multiset, Object)
Vector.toString(Vector)
ImmutableMultiset.lambda$toImmutableMultiset$0(Object)
AccessibleComponent.getAccessibleAt(AccessibleComponent, Point)
Entity.setRotation(Entity, float, float)
InputEvent.initIDs()
Component.isMinimumSizeSet(Component)
Unsafe.outboundBuffer(Unsafe)
Attribute.setIfAbsent(Attribute, Object)
NamedFunction.toString(NamedFunction)
AccessibleContext.setAccessibleDescription(AccessibleContext, String)
InetAddress.readResolve(InetAddress)
Date.equals(Date, Object)
StringBuilder.replace(StringBuilder, int, int, String | StringBuilder, int, int, String)
UUID.compareTo(UUID, Object | UUID, UUID)
Entity.toString(Entity)
FontRenderer.getColorCode(FontRenderer, char)
OffsetDateTime.withDayOfYear(OffsetDateTime, int)
DropTarget.doSetDefaultActions(DropTarget, int)
DoubleStream.allMatch(DoubleStream, DoublePredicate)
Chunk.setStorageArrays(Chunk, ExtendedBlockStorage[])
RenderItem.getItemModelMesher(RenderItem)
Chunk.getPrecipitationHeight(Chunk, BlockPos)
EventQueue.uncacheEQItem(EventQueue, EventQueueItem)
Biome.getModdedBiomeDecorator(Biome, BiomeDecorator)
DoubleStream.distinct(DoubleStream)
ChannelConfig.setMessageSizeEstimator(ChannelConfig, MessageSizeEstimator)
Component.processFocusEvent(Component, FocusEvent)
ZonedDateTime.withDayOfMonth(ZonedDateTime, int)
EntityLivingBase.addPotionEffect(EntityLivingBase, PotionEffect)
WatchKey.isValid(WatchKey)
Template.getAuthor(Template)
ClassLoader.checkPackageAccess(ClassLoader, Class, ProtectionDomain)
Collection.retainAll(Collection, Collection)
Container.isRecursivelyVisibleUpToHeavyweightContainer(Container)
DataBuffer.getOffset(DataBuffer)
Level.intValue(Level)
WriteBufferWaterMark.toString(WriteBufferWaterMark)
OffsetDateTime.withHour(OffsetDateTime, int)
EntityPlayerMP.readEntityFromNBT(EntityPlayerMP, NBTTagCompound)
LocalTime.isBefore(LocalTime, LocalTime)
Comparator.lambda$comparing$ea9a8b3a$1(Comparator, Function, Object, Object)
GameRules.hasRule(GameRules, String)
SoundHandler.loadSoundResource(SoundHandler, ResourceLocation, SoundList)
ByteBuf.clear(ByteBuf)
WorldBorder.removeListener(WorldBorder, IBorderListener)
AxisAlignedBB.intersect(AxisAlignedBB, AxisAlignedBB)
PermissionCollection.setReadOnly(PermissionCollection)
ByteBuf.setZero(ByteBuf, int, int)
EntityLiving.getLeashed(EntityLiving)
RenderManager.isRenderMultipass(RenderManager, Entity)
Entity.setPositionAndRotationDirect(Entity, double, double, double, float, float, int, boolean)
Minecraft.addGraphicsAndWorldToCrashReport(Minecraft, CrashReport)
ClassLoader.getPackage(ClassLoader, String)
IdentityArrayList.addAll(IdentityArrayList, Collection | IdentityArrayList, int, Collection)
ITextComponent.appendText(ITextComponent, String)
GraphicsDevice.getConfigurations(GraphicsDevice)
LambdaForm.returnType(LambdaForm)
NBTBase.write(NBTBase, DataOutput)
BlockRenderLayer.toString(BlockRenderLayer)
NetHandlerPlayClient.cleanup(NetHandlerPlayClient)
Container.isAncestorOf(Container, Component)
Graphics.setPaintMode(Graphics)
ReferenceQueue.forEach(ReferenceQueue, Consumer)
World.init(World)
Function.andThen(Function, Function)
AccessibleRelationSet.contains(AccessibleRelationSet, String)
NetworkManager.getRemoteAddress(NetworkManager)
Item.getDestroySpeed(Item, ItemStack, IBlockState)
LambdaForm.signatureType(String)
BigDecimal.subtract(BigDecimal, BigDecimal, MathContext | BigDecimal, BigDecimal)
PlatformLogger.access$000()
ConstantPool.getMethodAt0(ConstantPool, Object, int)
ZonedDateTime.plusNanos(ZonedDateTime, long)
UUID.clockSequence(UUID)
Marker.getParents(Marker)
ByteBuf.readLongLE(ByteBuf)
Instant.atZone(Instant, ZoneId)
Container.recursiveShowHeavyweightChildren(Container)
WorldInfo.getBorderLerpTime(WorldInfo)
ContentHandler.getContent(ContentHandler, URLConnection | ContentHandler, URLConnection, Class[])
Potion.shouldRenderHUD(Potion, PotionEffect)
Particle.getRedColorF(Particle)
ISaveHandler.saveWorldInfoWithPlayer(ISaveHandler, WorldInfo, NBTTagCompound)
Component.applyComponentOrientation(Component, ComponentOrientation)
LocalDate.range(LocalDate, TemporalField)
EntityItemFrame.setRotation(EntityItemFrame, int, boolean)
Component.getComponentAt(Component, Point | Component, int, int)
Component.enableInputMethods(Component, boolean)
WorldInfo.access$1500(WorldInfo)
AttributeValues.getStrikethrough(AttributeValues)
ByteBuf.readShort(ByteBuf)
Chunk.onTick(Chunk, boolean)
MinecraftServer.getPreventProxyConnections(MinecraftServer)
Vector.clear(Vector)
WorldServer.spawnEntity(WorldServer, Entity)
EntityLiving.getMaxSpawnedInChunk(EntityLiving)
ByteBuf.getUnsignedIntLE(ByteBuf, int)
Promise.addListeners(Promise, GenericFutureListener[])
Calendar.updateTime(Calendar)
EventExecutorGroup.scheduleAtFixedRate(EventExecutorGroup, Runnable, long, long, TimeUnit)
Minecraft.draw(Minecraft, int, int, int, int, int, int, int, int, int, int)
AttributeValues.setUnderline(AttributeValues, int)
ScoreObjective.setDisplayName(ScoreObjective, String)
Field.getDeclaringClass(Field)
CrashReport.saveToFile(CrashReport, File)
CompositeByteBuf._setShortLE(CompositeByteBuf, int, int)
Entity.onRemovedFromWorld(Entity)
EntityRenderer.enableLightmap(EntityRenderer)
World.getEntityByID(World, int)
ModelManager.getMissingModel(ModelManager)
ChunkProviderServer.loadChunk(ChunkProviderServer, int, int, Runnable | ChunkProviderServer, int, int)
Component.setBackground(Component, Color)
Object.finalize(Object)
ClassLoader.findClass(ClassLoader, String)
RenderChunk.getWorld(RenderChunk)
Logger.isInfoEnabled(Logger, Marker | Logger)
Component.setAutoFocusTransferOnDisposal(Component, boolean)
URLConnection.setReadTimeout(URLConnection, int)
CharSequence.subSequence(CharSequence, int, int)
Entity.isRidingOrBeingRiddenBy(Entity, Entity)
LongStream.builder()
CompositeByteBuf.unwrap(CompositeByteBuf)
Gson.toString(Gson)
LongStream.filter(LongStream, LongPredicate)
MethodTypeSignature.make(FormalTypeParameter[], TypeSignature[], ReturnType, FieldTypeSignature[])
Duration.ofHours(long)
IAttributeInstance.hasModifier(IAttributeInstance, AttributeModifier)
File.isAbsolute(File)
FileSystemProvider.installedProviders()
Render.canRenderName(Render, Entity)
Lookup.restrictReceiver(Lookup, MemberName, DirectMethodHandle, Class)
DataParameter.getSerializer(DataParameter)
MinecraftServer.getCanSpawnAnimals(MinecraftServer)
PlayerAdvancements.dispose(PlayerAdvancements)
BufferBuilder.color(BufferBuilder, float, float, float, float | BufferBuilder, int, int, int, int)
LootTableManager.access$200(LootTableManager)
MinecraftServer.setDemo(MinecraftServer, boolean)
ClassLoader.getSystemResource(String)
EntityLivingBase.setRenderYawOffset(EntityLivingBase, float)
Builder.orderColumnsBy(Builder, Comparator)
Instant.now(Clock | )
EventQueue.access$800(EventQueue)
Level.toLevel(String, Level | String)
Advancement.getChildren(Advancement)
Double.isInfinite(double | Double)
BoundMethodHandle.bindSingle(MethodType, LambdaForm, Object | MethodType, LambdaForm, BasicType, Object)
NetworkManager.setNetHandler(NetworkManager, INetHandler)
ResourceLocation.getPath(ResourceLocation)
Toolkit.createDragSourceContextPeer(Toolkit, DragGestureEvent)
WorldInfo.setDifficultyLocked(WorldInfo, boolean)
RenderManager.shouldRender(RenderManager, Entity, ICamera, double, double, double)
Map.keySet(Map)
Hashtable.access$400(Hashtable)
Point.translate(Point, int, int)
EnumCreatureType.getPeacefulCreature(EnumCreatureType)
LocalTime.isAfter(LocalTime, LocalTime)
FileSystemProvider.checkPermission()
EntityLivingBase.moveRelative(EntityLivingBase, float, float, float, float)
Component.resize(Component, int, int | Component, Dimension)
Channel.unsafe(Channel)
Raster.createInterleavedRaster(int, int, int, int, Point | int, int, int, int, int, int[], Point | DataBuffer, int, int, int, int, int[], Point)
AdvancementManager.hasErrored(AdvancementManager)
Path.toFile(Path)
IntegratedServer.shouldUseNativeTransport(IntegratedServer)
ImmutableMultimap.containsValue(ImmutableMultimap, Object)
CharBuffer.hashCode(CharBuffer)
FileChannel.force(FileChannel, boolean)
ArrayList.replaceAll(ArrayList, UnaryOperator)
WorldInfo.setDimensionData(WorldInfo, int, NBTTagCompound | WorldInfo, DimensionType, NBTTagCompound)
Block.getBlockById(int)
World.isRaining(World)
Class.copyFields(Field[])
CharSequence.charAt(CharSequence, int)
Block.isLeaves(Block, IBlockState, IBlockAccess, BlockPos)
ZonedDateTime.plusDays(ZonedDateTime, long)
TileEntity.markDirty(TileEntity)
Manifest.getEntries(Manifest)
JsonElement.getAsJsonPrimitive(JsonElement)
Period.parse(CharSequence)
URI.relativize(URI, URI | URI, URI)
CodeSource.readObject(CodeSource, ObjectInputStream)
ZonedDateTime.hashCode(ZonedDateTime)
URLConnection.setFileNameMap(FileNameMap)
AccessibleContext.getAccessibleSelection(AccessibleContext)
EntityLivingBase.setRevengeTarget(EntityLivingBase, EntityLivingBase)
BlockRendererDispatcher.renderBlockDamage(BlockRendererDispatcher, IBlockState, BlockPos, TextureAtlasSprite, IBlockAccess)
LocalDateTime.toLocalTime(LocalDateTime)
LambdaFormEditor.makeArgumentCombinationForm(LambdaFormEditor, int, MethodType, boolean, boolean)
Block.getPackedLightmapCoords(Block, IBlockState, IBlockAccess, BlockPos)
Toolkit.createCustomCursor(Toolkit, Image, Point, String)
CharBuffer.length(CharBuffer)
RenderGlobal.notifyLightSet(RenderGlobal, BlockPos)
Potion.setPotionName(Potion, String)
GenericsFactory.makeFloat(GenericsFactory)
ElementType.valueOf(String)
Window.addOwnedWindow(Window, WeakReference)
ClassRepository.getSuperInterfaces(ClassRepository)
Biome.getSkyColorByTemp(Biome, float)
ScoreObjective.getDisplayName(ScoreObjective)
BlockPos.up(BlockPos, int | BlockPos)
MinecraftServer.setCanSpawnNPCs(MinecraftServer, boolean)
Toolkit.createDesktopPeer(Toolkit, Desktop)
CreativeTabs.displayAllRelevantItems(CreativeTabs, NonNullList)
Appendable.append(Appendable, CharSequence | Appendable, CharSequence, int, int | Appendable, char)
EntityLivingBase.getIdleTime(EntityLivingBase)
PlayerList.updateTimeAndWeatherForPlayer(PlayerList, EntityPlayerMP, WorldServer)
TileEntity.getRenderBoundingBox(TileEntity)
Status.values()
ChunkCompileTaskGenerator.getRenderChunk(ChunkCompileTaskGenerator)
Set.toArray(Set, Object[] | Set)
Entity.getEyeHeight(Entity)
EntityMinecart.getCollisionBox(EntityMinecart, Entity)
World.markBlockRangeForRenderUpdate(World, BlockPos, BlockPos | World, int, int, int, int, int, int)
ImmutableTable.toString(ImmutableTable)
PathNavigate.updatePath(PathNavigate)
ChronoLocalDate.query(ChronoLocalDate, TemporalQuery)
Long.getChars(long, int, char[])
Toolkit.createList(Toolkit, List)
ScorePlayerTeam.setSeeFriendlyInvisiblesEnabled(ScorePlayerTeam, boolean)
ByteBuf.skipBytes(ByteBuf, int)
IsoEra.getValue(IsoEra)
AttributeValues.getTransform(AttributeValues)
LambdaFormBuffer.lastIndexOf(LambdaFormBuffer, Name)
ImmutableMap.createValues(ImmutableMap)
World.setAllowedSpawnTypes(World, boolean, boolean)
Excluder.disableInnerClassSerialization(Excluder)
Rectangle2D.outcode(Rectangle2D, double, double | Rectangle2D, Point2D)
URLConnection.setDoInput(URLConnection, boolean)
GraphicAttribute.draw(GraphicAttribute, Graphics2D, float, float)
Window.access$902(Window, double)
Font.isTransformed(Font)
EntityDataManager.register(EntityDataManager, DataParameter, Object)
LayoutManager.addLayoutComponent(LayoutManager, String, Component)
TypeVariable.getName(TypeVariable)
NamedFunction.invoke_LLL_V(MethodHandle, Object[])
ScrollPanePeer.childResized(ScrollPanePeer, int, int)
Duration.ofMinutes(long)
NamedFunction.invoke_LLL_L(MethodHandle, Object[])
TextFormatting.getValueByName(String)
WorldServer.initialize(WorldServer, WorldSettings)
EntityLivingBase.blockUsingShield(EntityLivingBase, EntityLivingBase)
Class.getConstructor(Class, Class[])
BlockRendererDispatcher.getBlockModelShapes(BlockRendererDispatcher)
OptionalInt.toString(OptionalInt)
AffineTransform.getScaleInstance(double, double)
ChannelPromise.await(ChannelPromise)
Container.getMinimumSize(Container)
EntityLivingBase.setJumping(EntityLivingBase, boolean)
InputEvent.isAltDown(InputEvent)
IsoEra.values()
EnclosingMethodInfo.isMethod(EnclosingMethodInfo)
AccessibleTable.setAccessibleColumnHeader(AccessibleTable, AccessibleTable)
ZoneRules.getTransitionRules(ZoneRules)
Package.getSystemPackages0()
GraphicsDevice.setFullScreenWindow(GraphicsDevice, Window)
Component.getDropTarget(Component)
GameSettings.getKeyDisplayString(int)
RenderLivingBase.renderLivingAt(RenderLivingBase, EntityLivingBase, double, double, double)
WorldInfo.setServerInitialized(WorldInfo, boolean)
RenderChunk.getDistanceSq(RenderChunk)
MinecraftServer.getWorldName(MinecraftServer)
Axis.values()
LogBuilder.log(LogBuilder, String, Object | LogBuilder, String, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object | LogBuilder, String, Object, Object, Object, Object | LogBuilder, String, Object, Object, Object, Object, Object | LogBuilder, String, Object, Object | LogBuilder | LogBuilder, Message | LogBuilder, String, Object, Object, Object | LogBuilder, CharSequence | LogBuilder, String, Object, Object, Object, Object, Object, Object | LogBuilder, String, Object, Object, Object, Object, Object, Object, Object, Object | LogBuilder, String, Object, Object, Object, Object, Object, Object, Object | LogBuilder, String, Supplier[] | LogBuilder, String, Object[] | LogBuilder, Object | LogBuilder, Supplier | LogBuilder, String, Object, Object, Object, Object, Object, Object, Object, Object, Object | LogBuilder, String)
ImmutableMap.computeIfPresent(ImmutableMap, Object, BiFunction)
Region.getBoundsIntersection(Region, Rectangle | Region, Region)
Attributes.putValue(Attributes, String, String)
Entity.onEntityUpdate(Entity)
Dimension.setSize(Dimension, int, int | Dimension, double, double | Dimension, Dimension)
BigDecimal.unscaledValue(BigDecimal)
World.getLastLightningBolt(World)
List.toArray(List, Object[] | List)
PlayerList.getPlayerByUUID(PlayerList, UUID)
Vec3d.rotateYaw(Vec3d, float)
RenderManager.setDebugBoundingBox(RenderManager, boolean)
Toolkit.setDynamicLayout(Toolkit, boolean)
Framebuffer.enableStencil(Framebuffer)
Entity.getVectorForRotation(Entity, float, float)
EntityLivingBase.handleStatusUpdate(EntityLivingBase, byte)
ByteBuf.getLong(ByteBuf, int)
AccessibleTable.getAccessibleColumnDescription(AccessibleTable, int)
Material.isSolid(Material)
Tutorial.getGameType(Tutorial)
EventExecutorGroup.shutdownGracefully(EventExecutorGroup, long, long, TimeUnit | EventExecutorGroup)
EntityPlayer.openEditStructure(EntityPlayer, TileEntityStructure)
Rectangle.getSize(Rectangle)
DragSource.isDragImageSupported()
Region.getInstance(int[] | Region, Shape, AffineTransform | Shape, AffineTransform | Rectangle | int, int, int, int, int[] | Region, boolean, Shape, AffineTransform)
URL.getPort(URL)
String.concat(String, String)
PlayerProfileCache.getUsernames(PlayerProfileCache)
ServerData.getBase64EncodedIconData(ServerData)
Village.readVillageDataFromNBT(Village, NBTTagCompound)
ThreadGroup.add(ThreadGroup, ThreadGroup | ThreadGroup, Thread)
ShortBuffer.put(ShortBuffer, short[] | ShortBuffer, ShortBuffer | ShortBuffer, short[], int, int | ShortBuffer, short | ShortBuffer, int, short)
ISaveHandler.checkSessionLock(ISaveHandler)
AttributeValues.get(AttributeValues, EAttribute)
ShaderGroup.deleteShaderGroup(ShaderGroup)
Package.getSystemPackage(String)
ServerData.setBase64EncodedIconData(ServerData, String)
ListenableFuture.addListener(ListenableFuture, Runnable, Executor)
Entity.startRiding(Entity, Entity, boolean | Entity, Entity)
Entity.copyDataFromOld(Entity, Entity)
SkinManager.loadSkinFromCache(SkinManager, GameProfile)
Font2D.getLayoutTableCache(Font2D)
CompositeByteBuf._setByte(CompositeByteBuf, int, int)
Village.getNumVillagers(Village)
GuiScreen.onGuiClosed(GuiScreen)
Package.isSealed(Package | Package, URL)
Component.requestFocusInWindow(Component, boolean, Cause | Component, boolean | Component, Cause | Component)
Component.list(Component, PrintStream | Component, PrintWriter, int | Component, PrintWriter | Component | Component, PrintStream, int)
Hashtable.entrySet(Hashtable)
FieldAccessor.setChar(FieldAccessor, Object, char)
IntStream.summaryStatistics(IntStream)
Block.isExceptBlockForAttachWithPiston(Block)
LocalDate.toEpochDay(LocalDate)
AccessibleComponent.isEnabled(AccessibleComponent)
Entity.getFireImmuneTicks(Entity)
AppContext.addPropertyChangeListener(AppContext, String, PropertyChangeListener)
Entity.getPersistentID(Entity)
ExtendedBlockStorage.isEmpty(ExtendedBlockStorage)
AttributeValues.getSuperscript(AttributeValues)
Invokers.checkCustomized(Object)
World.getCollisionBoxes(World, Entity, AxisAlignedBB, boolean, List | World, Entity, AxisAlignedBB)
BigInteger.stripLeadingZeroInts(int[])
Attributes.clear(Attributes)
RayTraceResult.getBlockPos(RayTraceResult)
Font.getNumGlyphs(Font)
Boolean.toString(boolean | Boolean)
LocalDateTime.toString(LocalDateTime)
LocalTime.minusNanos(LocalTime, long)
Block.getFireSpreadSpeed(Block, IBlockAccess, BlockPos, EnumFacing)
ImmutableTable.columnMap(ImmutableTable | ImmutableTable)
EntityMinecart.setDragAir(EntityMinecart, double)
PathIterator.currentSegment(PathIterator, double[] | PathIterator, float[])
ClassLoader.checkClassLoaderPermission(ClassLoader, Class)
AbstractAttributeMap.registerAttribute(AbstractAttributeMap, IAttribute)
WorldServer.updateBlocks(WorldServer)
Container.processContainerEvent(Container, ContainerEvent)
ServerResourceMode.getMotd(ServerResourceMode)
SoundManager.getVolume(SoundManager, SoundCategory)
EnumCreatureType.getCreatureClass(EnumCreatureType)
Font.getFamily_NoClientCode(Font)
Calendar.roll(Calendar, int, int | Calendar, int, boolean)
EventExecutor.newFailedFuture(EventExecutor, Throwable)
Block.isReplaceable(Block, IBlockAccess, BlockPos)
ByteBuffer.duplicate(ByteBuffer)
PathFinder.createPath(PathFinder, PathPoint, PathPoint)
Object.hashCode(Object)
CommandResultStats.removeScoreBoardStat(CommandResultStats, Type)
Vector3f.cross(Vector3f, Vector3f, Vector3f)
ReflectionFactory.writeObjectForSerialization(ReflectionFactory, Class)
Window.isAlwaysOnTopSupported(Window)
Potion.isReady(Potion, int, int)
Toolkit.createTextField(Toolkit, TextField)
Invokers.exactInvoker(Invokers)
DragSource.removeDragSourceListener(DragSource, DragSourceListener)
String.valueOf(char[] | float | long | char | boolean | char[], int, int | Object | int | double)
BigInteger.leftShift(int[], int, int)
Particle.setRBGColorF(Particle, float, float, float)
Chunk.getTileEntityMap(Chunk)
ComponentPeer.isObscured(ComponentPeer)
Duration.plusNanos(Duration, long)
Block.onBlockClicked(Block, World, BlockPos, EntityPlayer)
Component.getLocationOnScreen_NoTreeLock(Component)
CompositeByteBuf.nioBuffers(CompositeByteBuf | CompositeByteBuf, int, int)
Minecraft.getSessionService(Minecraft)
EntityPlayerMP.isEntityInvulnerable(EntityPlayerMP, DamageSource)
Block.getIdFromBlock(Block)
ImmutableList.asImmutableList(Object[], int | Object[])
EntityPlayer.openBook(EntityPlayer, ItemStack, EnumHand)
WorldServer.areAllPlayersAsleep(WorldServer)
Style.setHoverEvent(Style, HoverEvent)
StackTraceElement.getClassName(StackTraceElement)
CapabilityDispatcher.deserializeNBT(CapabilityDispatcher, NBTTagCompound | CapabilityDispatcher, NBTBase)
ReentrantLock.isLocked(ReentrantLock)
AccessibleTable.getAccessibleAt(AccessibleTable, int, int)
EnumFacing.getAxis(EnumFacing)
AffineTransform.concatenate(AffineTransform, AffineTransform)
ImageProducer.removeConsumer(ImageProducer, ImageConsumer)
EntityMoveHelper.limitAngle(EntityMoveHelper, float, float, float)
Excluder.create(Excluder, Gson, TypeToken)
EntityPlayer.getOfflineUUID(String)
NBTTagCompound.hasKey(NBTTagCompound, String | NBTTagCompound, String, int)
Vector.contains(Vector, Object)
LongStream.empty()
EntityPlayerMP.wakeUpPlayer(EntityPlayerMP, boolean, boolean, boolean)
URLClassPath.findResource(URLClassPath, String, boolean)
Minecraft.registerMetadataSerializers(Minecraft)
NBTTagList.getIntAt(NBTTagList, int)
LocalDate.getMonth(LocalDate)
EntityPlayer.dismountRidingEntity(EntityPlayer)
LocalDate.withDayOfYear(LocalDate, int)
WorldInfo.getWorldTime(WorldInfo)
Component.isPreferredSizeSet(Component)
GlyphVector.getFont(GlyphVector)
Block.onPlantGrow(Block, IBlockState, World, BlockPos, BlockPos)
World.setInitialSpawnLocation(World)
ModelBase.setLivingAnimations(ModelBase, EntityLivingBase, float, float, float)
AppContext.access$600()
Comparator.lambda$comparingLong$6043328a$1(ToLongFunction, Object, Object)
ChronoZonedDateTime.getZone(ChronoZonedDateTime)
WorldInfo.access$000(WorldInfo)
NetHandlerPlayClient.handleEntityHeadLook(NetHandlerPlayClient, SPacketEntityHeadLook)
WorldServer.canCreatureTypeSpawnHere(WorldServer, EnumCreatureType, SpawnListEntry, BlockPos)
IntBuffer.duplicate(IntBuffer)
MinecraftServer.isAnvilFileSet(MinecraftServer)
DirectoryStream.iterator(DirectoryStream)
NetworkPlayerInfo.setGameType(NetworkPlayerInfo, GameType)
Chronology.from(TemporalAccessor)
EntityLivingBase.getHurtSound(EntityLivingBase, DamageSource)
Chunk.isAtLocation(Chunk, int, int)
Double.shortValue(Double)
ImmutableMultimap.entries(ImmutableMultimap | ImmutableMultimap)
Item.getShareTag(Item)
OptionalDouble.orElseGet(OptionalDouble, DoubleSupplier)
Region.filterSpans(Region, Region, Region, int)
ScaledResolution.getScaledHeight_double(ScaledResolution)
WorldType.getVersion(WorldType)
WorldInfo.setBorderSafeZone(WorldInfo, double)
Region.getHeight(Region)
Advancement.getId(Advancement)
Throwable.initCause(Throwable, Throwable)
BigInteger.signum(BigInteger)
Class.getEnclosingMethod0(Class)
EnumUsage.valueOf(String)
EnumCreatureType.values()
NetworkManager.getExitMessage(NetworkManager)
StateImplementation.isNormalCube(StateImplementation)
Container.canContainFocusOwner(Container, Component)
StackTraceElement.equals(StackTraceElement, Object)
LocalTime.withSecond(LocalTime, int)
ImmutableTable.copyOf(Iterable | Table)
EntityLivingBase.updatePotionEffects(EntityLivingBase)
FileStore.getFileStoreAttributeView(FileStore, Class)
GraphicsConfiguration.getDefaultTransform(GraphicsConfiguration)
EntityMinecart.getType(EntityMinecart)
Font.getLineMetrics(Font, String, int, int, FontRenderContext | Font, CharacterIterator, int, int, FontRenderContext | Font, char[], int, int, FontRenderContext | Font, String, FontRenderContext)
World.removeEntity(World, Entity)
CompositeByteBuf._setIntLE(CompositeByteBuf, int, int)
AccessibleRelationSet.toString(AccessibleRelationSet)
BlockStateMapper.registerBuiltInBlocks(BlockStateMapper, Block[])
PlayerList.transferEntityToWorld(PlayerList, Entity, int, WorldServer, WorldServer | PlayerList, Entity, int, WorldServer, WorldServer, ITeleporter | PlayerList, Entity, int, WorldServer, WorldServer, Teleporter)
Toolkit.getScreenResolution(Toolkit)
LambdaForm.isEmpty(LambdaForm)
Path.register(Path, WatchService, Kind[] | Path, WatchService, Kind[], Modifier[])
ZoneOffset.get(ZoneOffset, TemporalField)
IAttribute.getShouldWatch(IAttribute)
ResourceBundle.keySet(ResourceBundle)
BlockModelShapes.getTexture(BlockModelShapes, IBlockState)
World.loadEntities(World, Collection)
DragGestureRecognizer.unregisterListeners(DragGestureRecognizer)
EntityLivingBase.resetActiveHand(EntityLivingBase)
MinecraftServer.isCallingFromMinecraftThread(MinecraftServer)
Item.initCapabilities(Item, ItemStack, NBTTagCompound)
Lookup.unreflectForMH(Lookup, Method)
EntityMinecart.getMaxCartSpeedOnRail(EntityMinecart)
ZonedDateTime.create(long, int, ZoneId)
GameProfile.hashCode(GameProfile)
ByteBuffer.slice(ByteBuffer)
World.calculateSkylightSubtracted(World, float)
NonNullList.remove(NonNullList, int)
ShaderGroup.getShaderGroupName(ShaderGroup)
LongBuffer.order(LongBuffer)
MinecraftServer.systemExitNow(MinecraftServer)
Class.getSimpleBinaryName(Class)
LocalTime.adjustInto(LocalTime, Temporal)
URLClassPath.access$1200()
Block.setTickRandomly(Block, boolean)
Future.get(Future | Future, long, TimeUnit)
Hashtable.access$508(Hashtable)
PotionEffect.hashCode(PotionEffect)
WorldServer.canSpawnNPCs(WorldServer)
Component.subtractAndApplyShape(Component, Region)
Class.checkInitted()
Hashtable.access$500(Hashtable)
PlayerList.setViewDistance(PlayerList, int)
ClassLoader.definePackage(ClassLoader, String, String, String, String, String, String, String, URL)
Biome.getWaterColorMultiplier(Biome)
ScorePlayerTeam.getSuffix(ScorePlayerTeam)
MemberName.getType(MemberName)
Class.getName(Class)
RenderLivingBase.unsetBrightness(RenderLivingBase)
IdentityArrayList.toArray(IdentityArrayList | IdentityArrayList, Object[])
JsonWriter.isLenient(JsonWriter)
ImmutableMultiset.writeReplace(ImmutableMultiset)
Level.hashCode(Level)
StateImplementation.neighborChanged(StateImplementation, World, BlockPos, Block, BlockPos)
DoubleBuffer.asReadOnlyBuffer(DoubleBuffer)
Component.getBackground(Component)
BigInteger.implMontgomerySquare(int[], int[], int, long, int[])
FileSystemProvider.newFileSystem(FileSystemProvider, URI, Map | FileSystemProvider, Path, Map)
Entity.setCommandStat(Entity, Type, int)
Minecraft.getItemColors(Minecraft)
Dialog.blockWindows(Dialog, List)
Entity.readFromNBT(Entity, NBTTagCompound)
ISound.createAccessor(ISound, SoundHandler)
UUID.node(UUID)
LambdaFormBuffer.verifyArity(LambdaFormBuffer)
BigDecimal.signum(BigDecimal)
EntityLiving.onInitialSpawn(EntityLiving, DifficultyInstance, IEntityLivingData)
ThreadGroup.threadTerminated(ThreadGroup, Thread)
Biome.addFlower(Biome, IBlockState, int)
Collection.stream(Collection)
EventQueue.getCurrentEventImpl(EventQueue)
EntityPlayer.addExhaustion(EntityPlayer, float)
BufferedImage.getTileHeight(BufferedImage)
EntityLivingBase.playHurtSound(EntityLivingBase, DamageSource)
Rectangle2D.intersect(Rectangle2D, Rectangle2D, Rectangle2D)
Random.nextLong(Random)
Component.getSiblingIndexAbove(Component)
InetAddress.readObjectNoData(InetAddress, ObjectInputStream)
ZoneOffset.equals(ZoneOffset, Object)
DamageSource.causeThornsDamage(Entity)
EventQueue.access$700()
Entity.isAddedToWorld(Entity)
EntityLivingBase.damageEntity(EntityLivingBase, DamageSource, float)
Double.longValue(Double)
ZonedDateTime.now( | Clock | ZoneId)
ChunkProviderServer.getLoadedChunkCount(ChunkProviderServer)
Item.getHasSubtypes(Item)
CollectorState.toTable(CollectorState)
Entry.toString(Entry | Entry)
AWTEvent.copyPrivateDataInto(AWTEvent, AWTEvent)
EnumFlowerType.values()
ResourceBundle.getBundleImpl(String, Locale, ClassLoader, Control)
Font.getItalicAngle(Font | Font, FontRenderContext)
EntityItemFrame.onBroken(EntityItemFrame, Entity)
Thread.setPriority0(Thread, int)
OptionalInt.getAsInt(OptionalInt)
Graphics2D.scale(Graphics2D, double, double)
MemberName.isVarargs(MemberName)
PathNavigate.onUpdateNavigation(PathNavigate)
ComponentPeer.getPreferredSize(ComponentPeer)
StackTraceElement.getFileName(StackTraceElement)
Vector.retainAll(Vector, Collection)
BigDecimal.compareTo(BigDecimal, BigDecimal | BigDecimal, Object)
ImmutableSetMultimap.removeAll(ImmutableSetMultimap, Object | ImmutableSetMultimap, Object | ImmutableSetMultimap, Object | ImmutableSetMultimap, Object)
ScoreObjective.getRenderType(ScoreObjective)
Reference.get(Reference)
URLClassPath.getResources(URLClassPath, String | URLClassPath, String, boolean)
LocalDateTime.now( | Clock | ZoneId)
NBTTagList.getCompoundTagAt(NBTTagList, int)
Name.initIndex(Name, int)
WorldInfo.access$1400(WorldInfo)
Quaternion.lengthSquared(Quaternion)
LootTableManager.access$100()
FileTime.append(FileTime, StringBuilder, int, int)
IntStream.generate(IntSupplier)
NetworkManager.getNetHandler(NetworkManager)
Level.isLessSpecificThan(Level, Level)
Entity.getCommandSenderEntity(Entity)
GuiScreen.drawHoveringText(GuiScreen, List, int, int | GuiScreen, String, int, int | GuiScreen, List, int, int, FontRenderer)
Name.access$000(Name)
Component.isDisplayable(Component)
World.isInsideWorldBorder(World, Entity)
ShaderManager.useShader(ShaderManager)
Vector.normalise(Vector)
OffsetTime.isBefore(OffsetTime, OffsetTime)
DoubleStream.builder()
ImmutableMultiset.remove(ImmutableMultiset, Object, int)
CodeSource.getLocation(CodeSource)
RenderChunk.rebuildWorldView(RenderChunk)
AbstractStringBuilder.getValue(AbstractStringBuilder)
Executable.verifyParameters(Executable, Parameter[])
PathPoint.distanceToSquared(PathPoint, PathPoint)
DamageSource.causeFireballDamage(EntityFireball, Entity)
BigInteger.multiplyByInt(int[], int, int)
PlayerList.readPlayerDataFromFile(PlayerList, EntityPlayerMP)
JsonArray.size(JsonArray)
Dialog.setVisible(Dialog, boolean)
RenderGlobal.stopChunkUpdates(RenderGlobal)
JsonArray.getAsCharacter(JsonArray)
JsonReader.checkLenient(JsonReader)
ByteBufAllocator.directBuffer(ByteBufAllocator, int, int | ByteBufAllocator, int | ByteBufAllocator)
ComponentPeer.prepareImage(ComponentPeer, Image, int, int, ImageObserver)
DayOfWeek.adjustInto(DayOfWeek, Temporal)
Entity.getYOffset(Entity)
Lookup.resolveOrFail(Lookup, byte, Class, String, MethodType | Lookup, byte, MemberName | Lookup, byte, Class, String, Class)
ScorePlayerTeam.setAllowFriendlyFire(ScorePlayerTeam, boolean)
IntStream.parallel(IntStream | IntStream)
Rectangle2D.union(Rectangle2D, Rectangle2D, Rectangle2D)
MemberName.initResolved(MemberName, boolean)
Channel.pipeline(Channel)
BufferedImage.getNumYTiles(BufferedImage)
Hashtable.access$200(Hashtable)
EntityLivingBase.removeActivePotionEffect(EntityLivingBase, Potion)
Hashtable.access$210(Hashtable)
MinecraftServer.startServerThread(MinecraftServer)
RenderItem.getItemModelWithOverrides(RenderItem, ItemStack, World, EntityLivingBase)
Style.createShallowCopy(Style)
Multimap.put(Multimap, Object, Object)
Template.transformedVec3d(Vec3d, Mirror, Rotation)
Minecraft.getItemRenderer(Minecraft)
OffsetTime.plusNanos(OffsetTime, long)
ReentrantLock.hasQueuedThreads(ReentrantLock)
AttributeModifier.toString(AttributeModifier)
Promise.removeListeners(Promise, GenericFutureListener[])
Collector.characteristics(Collector)
LangReflectAccess.getExecutableTypeAnnotationBytes(LangReflectAccess, Executable)
Future.removeListener(Future, GenericFutureListener)
IdentityArrayList.clear(IdentityArrayList)
Toolkit.createTextArea(Toolkit, TextArea)
AffineTransform.translate(AffineTransform, double, double)
ThreadGroup.toString(ThreadGroup)
Font2D.supportsEncoding(Font2D, String)
EntityPlayer.displayGuiCommandBlock(EntityPlayer, TileEntityCommandBlock)
EntityItemFrame.getWidthPixels(EntityItemFrame)
DamageSource.isCreativePlayer(DamageSource)
RenderGlobal.postRenderDamagedBlocks(RenderGlobal)
LangReflectAccess.getMethodAccessor(LangReflectAccess, Method)
MapStorage.loadIdCounts(MapStorage)
ZoneId.getRules(ZoneId)
NamedFunction.intrinsicName(NamedFunction)
MethodType.canConvertParameters(MethodType, Class[], Class[])
UserListOps.getGameProfileFromName(UserListOps, String)
AppContext.getExecutionAppContext()
Potion.registerPotionAttributeModifier(Potion, IAttribute, String, double, int)
ItemStack.getTooltip(ItemStack, EntityPlayer, ITooltipFlag)
InventoryEnderChest.closeInventory(InventoryEnderChest, EntityPlayer)
Scoreboard.broadcastTeamCreated(Scoreboard, ScorePlayerTeam)
BlockStateContainer.get(BlockStateContainer, int, int, int | BlockStateContainer, int)
ItemModelMesher.getParticleIcon(ItemModelMesher, Item, int | ItemModelMesher, Item)
Window.removeWindowListener(Window, WindowListener)
UserListIPBansEntry.onSerialization(UserListIPBansEntry, JsonObject)
ResourceBundle.setExpirationTime(CacheKey, Control)
EntityPlayerMP.writeEntityToNBT(EntityPlayerMP, NBTTagCompound)
ImmutableMapEntry.getNextInKeyBucket(ImmutableMapEntry)
Block.onLanded(Block, World, Entity)
ChannelHandler.handlerRemoved(ChannelHandler, ChannelHandlerContext)
Throwable.getMessage(Throwable)
WorldServer.createSpawnPosition(WorldServer, WorldSettings)
Potion.setEffectiveness(Potion, double)
Block.isFoliage(Block, IBlockAccess, BlockPos)
AnnotationType.invocationHandlerReturnType(Class)
LongStream.summaryStatistics(LongStream)
ShortBuffer.compareTo(ShortBuffer, Object | ShortBuffer, ShortBuffer)
LongStream.iterate(long, LongUnaryOperator)
EntityPlayer.addStat(EntityPlayer, StatBase, int | EntityPlayer, StatBase)
BigDecimal.ulp(BigDecimal)
IPlayerFileData.writePlayerData(IPlayerFileData, EntityPlayer)
ZoneRules.readObject(ZoneRules, ObjectInputStream)
AccessibleComponent.setBounds(AccessibleComponent, Rectangle)
EntityPlayer.hasReducedDebug(EntityPlayer)
DragGestureRecognizer.removeDragGestureListener(DragGestureRecognizer, DragGestureListener)
Period.withMonths(Period, int)
ZoneRules.writeExternal(ZoneRules, DataOutput)
Raster.getMinY(Raster)
CompositeByteBuf.setIndex(CompositeByteBuf, int, int | CompositeByteBuf, int, int)
Hashtable.readObject(Hashtable, ObjectInputStream)
Raster.getMinX(Raster)
EnumFacing.getDirectionVec(EnumFacing)
Entity.isInRangeToRender3d(Entity, double, double, double)
BaseStream.iterator(BaseStream)
HorseArmorType.isHorseArmor(ItemStack | Item)
Font.getStringBounds(Font, String, FontRenderContext | Font, CharacterIterator, int, int, FontRenderContext | Font, char[], int, int, FontRenderContext | Font, String, int, int, FontRenderContext)
AffineTransform.equals(AffineTransform, Object)
PlayerChunkMapEntry.providePlayerChunk(PlayerChunkMapEntry, boolean)
LocalDate.compareTo(LocalDate, Object | LocalDate, ChronoLocalDate)
BufferBuilder.normal(BufferBuilder, float, float, float)
FileSystemProvider.newByteChannel(FileSystemProvider, Path, Set, FileAttribute[])
WorldInfo.setBorderWarningTime(WorldInfo, int)
LambdaForm.identityForm(BasicType)
ChronoLocalDateTime.toEpochSecond(ChronoLocalDateTime, ZoneOffset)
AttributeSet.getAttributeCount(AttributeSet)
BufferBuilder.setVertexState(BufferBuilder, State)
FontRenderer.trimStringToWidth(FontRenderer, String, int, boolean | FontRenderer, String, int)
Random.longs(Random, long | Random | Random, long, long, long | Random, long, long)
BasicType.basicTypeSlots(BasicType)
Channel.config(Channel)
World.initCapabilities(World)
World.calculateInitialWeatherBody(World)
ImmutableCollection.clear(ImmutableCollection)
ChunkProviderServer.flushToDisk(ChunkProviderServer)
ClientAdvancementManager.getAdvancementList(ClientAdvancementManager)
Window.getFocusOwner(Window)
Rectangle2D.createUnion(Rectangle2D, Rectangle2D)
FloatBuffer.compare(float, float)
Hashtable.addEntry(Hashtable, int, Object, Object, int)
World.getChunk(World, int, int | World, BlockPos)
WorldInfo.setBorderWarningDistance(WorldInfo, int)
FoodStats.readNBT(FoodStats, NBTTagCompound)
EnumFlowerType.getBlockType(EnumFlowerType)
Logger.atTrace(Logger)
Color.RGBtoHSB(int, int, int, float[])
MinecraftServer.getCommandManager(MinecraftServer)
CompositeByteBuf.checkComponentIndex(CompositeByteBuf, int, int | CompositeByteBuf, int)
Entity.isOnScoreboardTeam(Entity, Team)
Score.incrementScore(Score)
Entity.getEntityBoundingBox(Entity)
ClassLoader.getSystemResources(String)
URLStreamHandler.hostsEqual(URLStreamHandler, URL, URL)
VillageDoorInfo.getFaceDirection(int, int)
Style.setBold(Style, Boolean)
List.retainAll(List, Collection)
CharBuffer.slice(CharBuffer)
GraphicsDevice.isWindowShapingSupported()
Lookup.getDirectConstructor(Lookup, Class, MemberName)
StringBuilder.offsetByCodePoints(StringBuilder, int, int)
String.contains(String, CharSequence)
Proxy.address(Proxy)
BaseCalendar.isLeapYear(BaseCalendar, int | BaseCalendar, CalendarDate)
EntityLookHelper.getLookPosZ(EntityLookHelper)
EntityLookHelper.getLookPosY(EntityLookHelper)
EntityLookHelper.getLookPosX(EntityLookHelper)
Multimap.equals(Multimap, Object)
ByteBuf.nioBuffer(ByteBuf | ByteBuf, int, int)
EntityPlayerMP.frostWalk(EntityPlayerMP, BlockPos)
MinecraftServer.addScheduledTask(MinecraftServer, Runnable)
MinecraftServer.isFlightAllowed(MinecraftServer)
StateImplementation.causesSuffocation(StateImplementation)
Entity.removePassengers(Entity)
Style.getUnderlined(Style)
MobSpawnerBaseLogic.getMobRotation(MobSpawnerBaseLogic)
MemberName.isFinal(MemberName)
DoubleStream.findFirst(DoubleStream)
LambdaForm.parameterConstraint(LambdaForm, int)
BigDecimal.matchScale(BigDecimal[])
PlayerList.sendScoreboard(PlayerList, ServerScoreboard, EntityPlayerMP)
EntityLivingBase.getActivePotionEffect(EntityLivingBase, Potion)
GlyphVector.getGlyphPositions(GlyphVector, int, int, float[])
World.createExplosion(World, Entity, double, double, double, float, boolean)
Particle.shouldDisableDepth(Particle)
ArrayList.size(ArrayList)
Chunk.getTileEntity(Chunk, BlockPos, EnumCreateEntityType)
AxisAlignedBB.shrink(AxisAlignedBB, double)
FileSystemProvider.getFileSystem(FileSystemProvider, URI)
ReferenceQueue.remove(ReferenceQueue | ReferenceQueue, long)
Container.mixOnShowing(Container)
RayTraceResult.toString(RayTraceResult)
Quaternion.setFromAxisAngle(Quaternion, Vector4f)
LocalDate.of(int, Month, int | int, int, int)
Language.getJavaLocale(Language)
ServerData.isOnLAN(ServerData)
VertexFormatElement.equals(VertexFormatElement, Object)
ImmutableMultimap.asMap(ImmutableMultimap | ImmutableMultimap)
CompositeByteBuf.writeLong(CompositeByteBuf, long | CompositeByteBuf, long)
ArrayList.clone(ArrayList)
EntityPlayer.isPlayer(EntityPlayer)
Level.getLevel(String)
Container.recursiveApplyCurrentShape(Container, int | Container, int, int | Container)
NetHandlerPlayClient.handleSpawnPosition(NetHandlerPlayClient, SPacketSpawnPosition)
EntityDataManager.writeEntry(PacketBuffer, DataEntry)
InputMethodRequests.getTextLocation(InputMethodRequests, TextHitInfo)
EntityLivingBase.getLastAttackedEntity(EntityLivingBase)
FrameTimer.getLagometerValue(FrameTimer, long, int)
ClassLoader.initializeJavaAssertionMaps(ClassLoader)
AccessibleSelection.getAccessibleSelection(AccessibleSelection, int)
ByteBuffer.hasArray(ByteBuffer)
ItemStack.onBlockDestroyed(ItemStack, World, IBlockState, BlockPos, EntityPlayer)
TextureAtlasSprite.getFrameCount(TextureAtlasSprite)
CreativeTabs.isAlignedRight(CreativeTabs)
ChannelOutboundBuffer.total(Object)
RegionIterator.nextXBand(RegionIterator, int[])
EnumFacing.fromAngle(double)
BigDecimal.shortValueExact(BigDecimal)
Calendar.getTime(Calendar)
Date.getYear(Date)
World.checkBlockCollision(World, AxisAlignedBB)
FontStrike.getGlyphImagePtrs(FontStrike, int[], long[], int)
BufferBuilder.getVertexState(BufferBuilder)
FramePeer.setBoundsPrivate(FramePeer, int, int, int, int)
FileDialogPeer.setDirectory(FileDialogPeer, String)
BigDecimal.doRound(long, int, MathContext | BigInteger, int, MathContext | BigDecimal, MathContext)
Visibility.values()
InetAddress.checkLookupTable(String)
StringBuilder.substring(StringBuilder, int | StringBuilder, int, int)
FontRenderer.enableAlpha(FontRenderer)
Graphics.finalize(Graphics)
Class.privateGetDeclaredMethods(Class, boolean)
Color.getColor(String, Color | String, int | String)
NBTBase.isEmpty(NBTBase)
NetworkManager.channelRead0(NetworkManager, ChannelHandlerContext, Object | NetworkManager, ChannelHandlerContext, Packet)
ByteBuf.readUnsignedShort(ByteBuf)
DoubleStream.mapToObj(DoubleStream, DoubleFunction)
ZoneId.toString(ZoneId)
FloatBuffer.wrap(float[] | float[], int, int)
Level.getStandardLevel(Level)
StrikeMetrics.getDescent(StrikeMetrics)
Window.getBufferStrategy(Window)
TextureMap.getAtlasSprite(TextureMap, String)
Calendar.appendValue(StringBuilder, String, boolean, long)
NetHandlerPlayClient.handleResourcePack(NetHandlerPlayClient, SPacketResourcePackSend)
AttributeValues.setRunDirection(AttributeValues, int)
URLConnection.getReadTimeout(URLConnection)
StandardLevel.intLevel(StandardLevel)
ZoneId.of(String, boolean | String | String, Map)
MinecraftServer.getServerOwner(MinecraftServer)
AttributeValues.toSerializableHashtable(AttributeValues)
ImmutableMultimap.putAll(ImmutableMultimap, Object, Iterable | ImmutableMultimap, Multimap)
ChunkPos.asLong(int, int)
ColorModel.loadLibraries()
DamageSource.getImmediateSource(DamageSource)
LongStream.mapToDouble(LongStream, LongToDoubleFunction)
Component.areBoundsValid(Component)
EntityLivingBase.dismountEntity(EntityLivingBase, Entity)
LocalDateTime.truncatedTo(LocalDateTime, TemporalUnit)
ChronoPeriod.plus(ChronoPeriod, TemporalAmount)
EnumBorderStatus.valueOf(String)
EntityRenderer.updateTorchFlicker(EntityRenderer)
Score.increaseScore(Score, int)
Object.getClass(Object)
Window.setOpacity(Window, float)
Entry.getElement(Entry)
Block.tickRate(Block, World)
Container.checkAddToSelf(Container, Component)
ImmutableList.add(ImmutableList, int, Object)
IntStream.map(IntStream, IntUnaryOperator)
Class.enumConstantDirectory(Class)
Long.toUnsignedString0(long, int)
CharToGlyphMapper.charToGlyph(CharToGlyphMapper, char | CharToGlyphMapper, int)
Minecraft.isGuiEnabled()
Component.getAccessControlContext(Component)
Builder.build(Builder | Builder | Builder | Builder | Builder | Builder, ResourceLocation | Builder | Builder | Builder | Builder | Builder | Builder | Builder | Builder | Builder | Builder | Builder)
WorldInfo.access$100(WorldInfo)
Region.equals(Region, Object)
Block.canBeReplacedByLeaves(Block, IBlockState, IBlockAccess, BlockPos)
Logger.entry(Logger | Logger, Object[])
IBakedModel.getParticleTexture(IBakedModel)
AWTEvent.consume(AWTEvent)
IntStream.max(IntStream)
RenderItem.renderItemOverlays(RenderItem, FontRenderer, ItemStack, int, int)
GlyphVector.getLayoutFlags(GlyphVector)
ISaveHandler.getStructureTemplateManager(ISaveHandler)
Channel.id(Channel)
WritableRaster.createWritableTranslatedChild(WritableRaster, int, int)
Rectangle.getY(Rectangle)
Rectangle.getX(Rectangle)
EnumFlowerColor.valueOf(String)
Minecraft.getMusicTicker(Minecraft)
RenderManager.renderDebugBoundingBox(RenderManager, Entity, double, double, double, float, float)
EntityLiving.processInitialInteract(EntityLiving, EntityPlayer, EnumHand)
ColorModel.getNumComponents(ColorModel)
ProgressivePromise.setSuccess(ProgressivePromise, Object)
VillageDoorInfo.getInsideBlockPos(VillageDoorInfo)
WorldServer.addScheduledTask(WorldServer, Runnable)
Block.getSoundType(Block | Block, IBlockState, World, BlockPos, Entity)
RenderManager.setRenderShadow(RenderManager, boolean)
ByteBufAllocator.calculateNewCapacity(ByteBufAllocator, int, int)
EventQueue.coalescePaintEvent(EventQueue, PaintEvent)
Spliterator.getExactSizeIfKnown(Spliterator)
CodeSource.matchLocation(CodeSource, CodeSource)
ReflectionFactory.newField(ReflectionFactory, Class, String, Class, int, int, String, byte[])
EntityRenderer.renderWorld(EntityRenderer, float, long)
CompositeByteBuf.memoryAddress(CompositeByteBuf)
Control.toResourceName0(Control, String, String)
SoundHandler.lambda$onResourceManagerReload$0(SoundHandler, ProgressBar, Tuple)
Integer.reverseBytes(int)
MethodHandleInfo.getDeclaringClass(MethodHandleInfo)
DragGestureRecognizer.resetRecognizer(DragGestureRecognizer)
SpeciesData.get(String)
Map.clear(Map)
LootTable.shuffleItems(LootTable, List, int, Random)
NonNullList.get(NonNullList, int)
RenderGlobal.markBlocksForUpdate(RenderGlobal, int, int, int, int, int, int, boolean)
SpeciesData.access$200(String)
DayOfWeek.isSupported(DayOfWeek, TemporalField)
OffsetTime.atDate(OffsetTime, LocalDate)
OffsetDateTime.readObject(OffsetDateTime, ObjectInputStream)
EntityPlayer.getInventoryEnderChest(EntityPlayer)
Duration.parseFraction(CharSequence, String, int)
Template.writeToNBT(Template, NBTTagCompound)
LocalDateTime.getHour(LocalDateTime)
Minecraft.scheduleResourcesRefresh(Minecraft)
Graphics2D.getDeviceConfiguration(Graphics2D)
Control.newBundle(Control, String, Locale, String, ClassLoader, boolean)
Component.clearMostRecentFocusOwnerOnHide(Component)
TimeZone.getDefault()
LambdaFormBuffer.inTrans(LambdaFormBuffer)
Render.bindEntityTexture(Render, Entity)
TextureMap.lambda$loadTexture$0(TextureMap, ResourceLocation)
ZoneId.equals(ZoneId, Object)
ThreadGroup.isDestroyed(ThreadGroup)
ZonedDateTime.getMinute(ZonedDateTime)
CompositeByteBuf.addComponent0(CompositeByteBuf, boolean, int, ByteBuf)
Entity.spawnRunningParticles(Entity)
Entity.fall(Entity, float, float)
EntityItem.onUpdate(EntityItem)
Biome.generateBiomeTerrain(Biome, World, Random, ChunkPrimer, int, int, double)
FunctionManager.reload(FunctionManager)
BigInteger.getRadixConversionCache(int, int)
Throwable.getStackTraceDepth(Throwable)
Item.isEnchantable(Item, ItemStack)
OptionalInt.orElseThrow(OptionalInt, Supplier)
URLConnection.guessContentTypeFromName(String)
EntityLiving.onEntityUpdate(EntityLiving)
Path.getVectorFromIndex(Path, Entity, int)
Window.getContainer(Window)
ZoneId.systemDefault()
ImmutableMultimap.isPartialView(ImmutableMultimap)
ResourceBundle.getLocale(ResourceBundle)
ModelRenderer.setTextureSize(ModelRenderer, int, int)
LambdaForm.shortenSignature(String)
EntityLiving.getItemStackFromSlot(EntityLiving, EntityEquipmentSlot)
AxisAlignedBB.hasNaN(AxisAlignedBB)
ISearchTree.search(ISearchTree, String)
File.getFreeSpace(File)
Thread.interrupt(Thread)
OffsetDateTime.minus(OffsetDateTime, long, TemporalUnit | OffsetDateTime, TemporalAmount | OffsetDateTime, long, TemporalUnit | OffsetDateTime, TemporalAmount)
PotionEffect.getPotionRaw(PotionEffect)
Class.isInterface(Class)
Instant.from(TemporalAccessor)
BigDecimal.divideSmallFastPath(long, int, long, int, long, MathContext)
String.split(String, String, int | String, String)
Biome.pickRandomFlower(Biome, Random, BlockPos)
Stream.sorted(Stream, Comparator | Stream)
CompositeByteBuf.addComponents(CompositeByteBuf, boolean, ByteBuf[] | CompositeByteBuf, int, ByteBuf[] | CompositeByteBuf, int, Iterable | CompositeByteBuf, boolean, Iterable | CompositeByteBuf, Iterable | CompositeByteBuf, ByteBuf[])
World.isSpawnChunk(World, int, int)
Rectangle2D.getBounds2D(Rectangle2D)
ISaveHandler.getWorldDirectory(ISaveHandler)
Component.getTreeLock(Component)
Temporal.minus(Temporal, TemporalAmount | Temporal, long, TemporalUnit)
BufferBuilder.endVertex(BufferBuilder)
Minecraft.isJvm64bit()
ComponentPeer.getFontMetrics(ComponentPeer, Font)
PlatformLogger.warning(PlatformLogger, String | PlatformLogger, String, Object[] | PlatformLogger, String, Throwable)
EntityLivingBase.getActiveHand(EntityLivingBase)
Random.nextFloat(Random)
PathNavigate.canEntityStandOnPos(PathNavigate, BlockPos)
WindowPeer.toFront(WindowPeer)
Toolkit.getImage(Toolkit, String | Toolkit, URL)
WorldInfo.setGameType(WorldInfo, GameType)
AppContext.access$300()
ZoneOffsetTransition.readExternal(DataInput)
FileTime.toString(FileTime)
World.findNearestStructure(World, String, BlockPos, boolean)
StringBuilder.codePointBefore(StringBuilder, int)
Block.onBlockActivated(Block, World, BlockPos, IBlockState, EntityPlayer, EnumHand, EnumFacing, float, float, float)
Window.createBufferStrategy(Window, int | Window, int, BufferCapabilities)
EntityRenderer.loadEntityShader(EntityRenderer, Entity)
IntStream.min(IntStream)
ImmutableTable.valuesIterator(ImmutableTable)
PlatformLogger.level(PlatformLogger)
ResourceBundle.checkList(List)
Minecraft.getSearchTreeManager(Minecraft)
BufferedImage.getTile(BufferedImage, int, int)
Long.toString(long, int | long | Long)
LocalDate.withMonth(LocalDate, int)
Item.getItemById(int)
WorldBorder.setSize(WorldBorder, int)
ChannelOutboundBuffer.close(ChannelOutboundBuffer, ClosedChannelException)
Component.areInputMethodsEnabled(Component)
LongStream.allMatch(LongStream, LongPredicate)
ReflectionFactory.newConstructor(ReflectionFactory, Class, Class[], Class[], int, int, String, byte[], byte[])
TileEntity.onlyOpsCanSetNbt(TileEntity)
WorldInfo.setTerrainType(WorldInfo, WorldType)
Graphics2D.draw(Graphics2D, Shape)
Color.getAlpha(Color)
Block.toString(Block)
Region.getSpanIterator(Region | Region, int[])
FileSystemProvider.getScheme(FileSystemProvider)
Block.getPushReaction(Block, IBlockState)
AbstractAttributeMap.onAttributeModified(AbstractAttributeMap, IAttributeInstance)
Toolkit.getFontPeer(Toolkit, String, int)
EntityItem.readEntityFromNBT(EntityItem, NBTTagCompound)
OffsetDateTime.getSecond(OffsetDateTime)
BufferedImage.getProperty(BufferedImage, String, ImageObserver | BufferedImage, String)
CrashReportCategory.getCoordinateInfo(double, double, double | int, int, int | BlockPos)
FloatBuffer.compact(FloatBuffer)
LambdaForm.zeroForm(BasicType)
FieldAccessor.getLong(FieldAccessor, Object)
Explosion.clearAffectedBlockPositions(Explosion)
DragSource.load(String)
MemberName.testAllFlags(MemberName, int)
Locale.getExtension(Locale, char)
CompositeByteBuf._setInt(CompositeByteBuf, int, int)
Container.recursiveHideHeavyweightChildren(Container)
StringBuilder.capacity(StringBuilder)
Calendar.adjustStamp(Calendar)
Calendar.before(Calendar, Object)
Block.modifyAcceleration(Block, World, BlockPos, Entity, Vec3d)
VertexFormatElement.getElementCount(VertexFormatElement)
Container.mixOnReshaping(Container)
LabelPeer.setAlignment(LabelPeer, int)
Region.isInsideXYWH(Region, int, int, int, int)
Component.setFocusTraversalKeys_NoIDCheck(Component, int, Set)
ByteBuf.forEachByte(ByteBuf, ByteProcessor | ByteBuf, int, int, ByteProcessor)
World.getFogColor(World, float)
NetHandlerPlayClient.handleMultiBlockChange(NetHandlerPlayClient, SPacketMultiBlockChange)
Window.getLocationOnWindow(Window)
LineMetrics.getUnderlineOffset(LineMetrics)
Item.getItemBurnTime(Item, ItemStack)
Style.getHoverEvent(Style)
EntityPlayerMP.sendSlotContents(EntityPlayerMP, Container, int, ItemStack)
DropTargetContextPeer.rejectDrop(DropTargetContextPeer)
EntityLivingBase.frostWalk(EntityLivingBase, BlockPos)
LongStream.toArray(LongStream)
Template.takeBlocksFromWorld(Template, World, BlockPos, BlockPos, boolean, Block)
RecipeBookServer.getRecipes(RecipeBookServer)
Container.getContainerListeners(Container)
LangReflectAccess.getConstructorAnnotations(LangReflectAccess, Constructor)
OffsetTime.withHour(OffsetTime, int)
Region.isInsideXYXY(Region, int, int, int, int)
ByteBuf.setMedium(ByteBuf, int, int)
Debug.println(Debug, String | Debug | String, String)
MusicTicker.playMusic(MusicTicker, MusicType)
FileSystem.getPath(FileSystem, String, String[])
EntityMinecart.getDisplayTile(EntityMinecart)
Long.numberOfLeadingZeros(long)
ResourceBundle.getStringArray(ResourceBundle, String)
Village.getCapability(Village, Capability, EnumFacing)
Component.setDropTarget(Component, DropTarget)
Comparator.thenComparingLong(Comparator, ToLongFunction)
BlockPos.crossProduct(BlockPos, Vec3i | BlockPos, Vec3i)
FieldAccessor.getShort(FieldAccessor, Object)
Item.getCreativeTabs(Item)
MinecraftServer.refreshStatusNextTick(MinecraftServer)
Minecraft.getSystemTime()
MethodTypeForm.canonicalizeAll(Class[], int)
FloatBuffer.equals(float, float | FloatBuffer, Object)
LambdaFormBuffer.copyNamesInto(LambdaFormBuffer, Name[])
SeekableByteChannel.position(SeekableByteChannel | SeekableByteChannel, long)
StateImplementation.canProvidePower(StateImplementation)
CodeSource.matchCerts(CodeSource, CodeSource, boolean)
ChannelPromise.awaitUninterruptibly(ChannelPromise)
Entity.getPickedResult(Entity, RayTraceResult)
ResourcePackRepository.getServerResourcePack(ResourcePackRepository)
CrashReportCategory.getStackTrace(CrashReportCategory)
World.loadData(World, Class, String)
ShaderManager.getFragmentShaderLoader(ShaderManager)
IntegratedServer.shouldBroadcastRconToOps(IntegratedServer)
EntityLivingBase.handleJumpWater(EntityLivingBase)
CooldownTracker.removeCooldown(CooldownTracker, Item)
Executable.getTypeParameters(Executable)
Method.hasGenericInformation(Method)
OffsetDateTime.minusNanos(OffsetDateTime, long)
ConstantPool.getFieldAt0(ConstantPool, Object, int)
ByteBuf.writeBoolean(ByteBuf, boolean)
ArrayList.writeObject(ArrayList, ObjectOutputStream)
Font.getPeer(Font)
URL.readResolve(URL)
Cursor.getType(Cursor)
IdentityArrayList.set(IdentityArrayList, int, Object)
InputMethodRequests.getInsertPositionOffset(InputMethodRequests)
MethodHandle.viewAsTypeChecks(MethodHandle, MethodType, boolean)
Date.getCalendarDate(Date)
ISound.canRepeat(ISound)
MinecraftServer.stopServer(MinecraftServer)
ArrayList.rangeCheck(ArrayList, int)
WorldSavedData.readFromNBT(WorldSavedData, NBTTagCompound)
URL.toExternalForm(URL)
LongSummaryStatistics.accept(LongSummaryStatistics, int | LongSummaryStatistics, long)
ChronoLocalDate.plus(ChronoLocalDate, TemporalAmount | ChronoLocalDate, long, TemporalUnit | ChronoLocalDate, long, TemporalUnit | ChronoLocalDate, TemporalAmount)
Quaternion.toString(Quaternion)
EntityRenderer.hurtCameraEffect(EntityRenderer, float)
PlatformLogger.getLogger(String)
NumericShaper.getRanges(NumericShaper)
CommandResultStats.readStatsFromNBT(CommandResultStats, NBTTagCompound)
List.size(List)
Promise.setUncancellable(Promise)
EnumFacing.getHorizontalAngle(EnumFacing)
World.setThunderStrength(World, float)
Component.setBoundsOp(Component, int)
Font2D.setStyle(Font2D)
CodeSource.getCodeSigners(CodeSource)
PlayerAdvancements.shouldBeVisible(PlayerAdvancements, Advancement)
Vec3d.lengthSquared(Vec3d)
DayOfWeek.get(DayOfWeek, TemporalField)
ListIterator.set(ListIterator, Object)
ServerData.setResourceMode(ServerData, ServerResourceMode)
WorldBorder.setWarningTime(WorldBorder, int)
LocalDateTime.minusYears(LocalDateTime, long)
URI.normalize(String | URI | URI)
EnumAction.values()
Level.values( | )
InetAddress.getAllByName(String | String, InetAddress)
AdvancementProgress.getFirstProgressDate(AdvancementProgress)
Block.quantityDropped(Block, Random | Block, IBlockState, int, Random)
InetAddress.writeObject(InetAddress, ObjectOutputStream)
INetHandler.onDisconnect(INetHandler, ITextComponent)
MobSpawnerBaseLogic.updateSpawner(MobSpawnerBaseLogic)
EntityLivingBase.hasItemInSlot(EntityLivingBase, EntityEquipmentSlot)
EntityPlayer.getItemStackFromSlot(EntityPlayer, EntityEquipmentSlot)
SecondaryLoop.exit(SecondaryLoop)
Window.getToolkit(Window)
Item.getDurabilityForDisplay(Item, ItemStack)
World.getRawLight(World, BlockPos, EnumSkyBlock)
ItemColors.registerItemColorHandler(ItemColors, IItemColor, Block[] | ItemColors, IItemColor, Item[])
SampleModel.createDataBuffer(SampleModel)
RegistryNamespaced.register(RegistryNamespaced, int, Object, Object)
GraphicsDevice.isWindowOpacitySupported()
SoundHandler.update(SoundHandler)
IResource.hasMetadata(IResource)
Container.countComponents(Container)
Entity.onKillEntity(Entity, EntityLivingBase)
EntityLiving.enablePersistence(EntityLiving)
Framebuffer.createBindFramebuffer(Framebuffer, int, int)
CompositeByteBuf.allocBuffer(CompositeByteBuf, int)
JsonPrimitive.isIntegral(JsonPrimitive)
WorldBorder.getWarningDistance(WorldBorder)
Framebuffer.unbindFramebufferTexture(Framebuffer)
MusicTicker.update(MusicTicker)
Minecraft.updateDisplayMode(Minecraft)
Container.getPreferredSize(Container)
ImmutableMultimap.get(ImmutableMultimap, Object | ImmutableMultimap, Object)
Container.validateUnconditionally(Container)
NBTTagCompound.getIntArray(NBTTagCompound, String)
InputStream.available(InputStream)
Field.getShort(Field, Object)
Color.getColorComponents(Color, ColorSpace, float[] | Color, float[])
Set.add(Set, Object)
Particle.resetPositionToBB(Particle)
InetAddress.getHostFromNameService(InetAddress, boolean)
Point.getY(Point)
Point.getX(Point)
SoundType.getBreakSound(SoundType)
AttributeValues.setDefault(AttributeValues, EAttribute)
OffsetDateTime.of(LocalDate, LocalTime, ZoneOffset | LocalDateTime, ZoneOffset | int, int, int, int, int, int, int, ZoneOffset)
Vec3d.fromPitchYaw(Vec2f | float, float)
NetHandlerPlayClient.onDisconnect(NetHandlerPlayClient, ITextComponent)
Vector.get(Vector, int)
DropTargetContext.getDropTarget(DropTargetContext)
ItemModelMesher.rebuildCache(ItemModelMesher)
Component.isFocusTraversable(Component)
BufferedImage.getTileGridYOffset(BufferedImage)
NBTBase.toString(NBTBase)
PathNavigate.getPathToXYZ(PathNavigate, double, double, double)
RenderChunk.createRegionRenderCache(RenderChunk, World, BlockPos, BlockPos, int)
Material.isOpaque(Material)
EntityLiving.updateRotation(EntityLiving, float, float, float)
Chunk.propagateSkylightOcclusion(Chunk, int, int)
EntityLiving.despawnEntity(EntityLiving)
Container.isSameOrAncestorOf(Container, Component, boolean)
Attributes.get(Attributes, Object)
AttributeSet.getAttributeNames(AttributeSet)
EntityItemFrame.getAnalogOutput(EntityItemFrame)
Locale.stripExtensions(Locale)
NodeProcessor.init(NodeProcessor, IBlockAccess, EntityLiving)
MinecraftServer.getFunctionManager(MinecraftServer)
Component.notifyNewBounds(Component, boolean, boolean)
ClassLoader.getClassLoader(Class)
FloatBuffer.hasArray(FloatBuffer)
Duration.plusDays(Duration, long)
EntityPlayerMP.getEnteredNetherPosition(EntityPlayerMP)
Window.setModalBlocked(Window, Dialog, boolean, boolean)
ZoneRules.getStandardOffset(ZoneRules, Instant)
ListIterator.previousIndex(ListIterator)
CooldownTracker.getCooldown(CooldownTracker, Item, float)
Toolkit.deProxyAWTEventListener(AWTEventListener)
AbstractStringBuilder.append(AbstractStringBuilder, int | AbstractStringBuilder, StringBuffer | AbstractStringBuilder, char[], int, int | AbstractStringBuilder, double | AbstractStringBuilder, CharSequence | AbstractStringBuilder, char | AbstractStringBuilder, boolean | AbstractStringBuilder, float | AbstractStringBuilder, CharSequence, int, int | AbstractStringBuilder, CharSequence | AbstractStringBuilder, CharSequence, int, int | AbstractStringBuilder, String | AbstractStringBuilder, char | AbstractStringBuilder, char[] | AbstractStringBuilder, long | AbstractStringBuilder, AbstractStringBuilder | AbstractStringBuilder, Object)
AccessControlContext.isPrivileged(AccessControlContext)
AccessControlContext.containsAllLimits(AccessControlContext, AccessControlContext)
InetAddress.equals(InetAddress, Object)
Builder.writeTo(Builder, PacketBuffer)
ImmutableCollection.copyIntoArray(ImmutableCollection, Object[], int)
IntegratedServer.saveAllWorlds(IntegratedServer, boolean)
Material.getPushReaction(Material)
SoundManager.getURLForSoundResource(ResourceLocation)
LongStream.skip(LongStream, long)
Container.update(Container, Graphics)
RenderItem.renderModel(RenderItem, IBakedModel, ItemStack | RenderItem, IBakedModel, int | RenderItem, IBakedModel, int, ItemStack)
IntegratedServer.addServerStatsToSnooper(IntegratedServer, Snooper)
WorldType.getTranslationKey(WorldType)
LocalDateTime.getMinute(LocalDateTime)
NibbleArray.set(NibbleArray, int, int, int, int)
Font.canDisplay(Font, char | Font, int)
Thread.isInterrupted(Thread, boolean | Thread)
Toolkit.getFontMetrics(Toolkit, Font)
RenderLivingBase.transformHeldFull3DItemLayer(RenderLivingBase)
OffsetDateTime.with(OffsetDateTime, TemporalField, long | OffsetDateTime, TemporalAdjuster | OffsetDateTime, TemporalField, long | OffsetDateTime, LocalDateTime, ZoneOffset | OffsetDateTime, TemporalAdjuster)
Block.onEntityCollision(Block, World, BlockPos, IBlockState, Entity)
CapabilityDispatcher.serializeNBT(CapabilityDispatcher | CapabilityDispatcher)
Container.checkAdding(Container, Component, int)
Integer.min(int, int)
Graphics.drawPolyline(Graphics, int[], int[], int)
Entry.equals(Entry, Object | Entry, Object | Entry, Object)
MethodRepository.getReturnType(MethodRepository)
Multiset.entrySet(Multiset)
DoubleStream.sorted(DoubleStream)
Hashtable.remove(Hashtable, Object | Hashtable, Object, Object)
ByteBuf.maxWritableBytes(ByteBuf)
Style.setParentStyle(Style, Style)
Minecraft.getVersionType(Minecraft)
SpanIterator.intersectClipBox(SpanIterator, int, int, int, int)
DoubleSummaryStatistics.getAverage(DoubleSummaryStatistics)
World.setSkylightSubtracted(World, int)
ChronoZonedDateTime.getOffset(ChronoZonedDateTime)
IntegratedServer.loadAllWorlds(IntegratedServer, String, String, long, WorldType, String)
CompositeByteBuf._getIntLE(CompositeByteBuf, int)
LocalDateTime.getNano(LocalDateTime)
Date.normalize(Date | Date, Date)
Component.getAccessibleIndexInParent(Component)
ChannelOutboundBuffer.remove0(ChannelOutboundBuffer, Throwable, boolean)
RecipeBookServer.write(RecipeBookServer)
NetworkManager.disableAutoRead(NetworkManager)
AffineTransform.transform(AffineTransform, double[], int, float[], int, int | AffineTransform, float[], int, double[], int, int | AffineTransform, Point2D[], int, Point2D[], int, int | AffineTransform, Point2D, Point2D | AffineTransform, double[], int, double[], int, int | AffineTransform, float[], int, float[], int, int)
Team.getAllowFriendlyFire(Team)
AccessibleContext.getAccessibleStateSet(AccessibleContext)
Double.isNaN(Double | double)
Path.resolve(Path, Path | Path, String)
Instant.getNano(Instant)
Color.getHSBColor(float, float, float)
EntityPlayerMP.addEntity(EntityPlayerMP, Entity)
Random.initialScramble(long)
Chunk.onLoad(Chunk)
EntityLiving.getMaxFallHeight(EntityLiving)
OffsetDateTime.isBefore(OffsetDateTime, OffsetDateTime)
URLConnection.getURL(URLConnection)
Container.numListening(Container, long)
Biome.canRain(Biome)
Container.paint(Container, Graphics)
Reference.tryHandlePending(boolean)
Sound.getSoundLocation(Sound)
EventDispatchThread.addEventFilter(EventDispatchThread, EventFilter)
TimeZone.getSystemGMTOffsetID()
AppContext.get(AppContext, Object)
Entity.getServer(Entity)
DataEntry.access$002(DataEntry, boolean)
Toolkit.createPropertyChangeSupport(Toolkit)
ChronoZonedDateTime.timeLineOrder()
Window.deserializeResources(Window, ObjectInputStream)
BigInteger.shiftLeft(int[], int | BigInteger, int)
BiConsumer.lambda$andThen$0(BiConsumer, BiConsumer, Object, Object)
Minecraft.startTimerHackThread(Minecraft)
PathNavigate.canUpdatePathOnTimeout(PathNavigate)
ArrayList.subList(ArrayList, int, int)
Duration.withNanos(Duration, int)
RenderingHints.toString(RenderingHints)
Class.isLocalOrAnonymousClass(Class)
CreativeTabs.getNextID()
ItemStack.shrink(ItemStack, int)
ZoneOffset.hashCode(ZoneOffset)
Optional.absent()
Block.canRenderInLayer(Block, IBlockState, BlockRenderLayer)
Minecraft.loadWorld(Minecraft, WorldClient, String | Minecraft, WorldClient)
GraphicsDevice.isWindowPerpixelTranslucencySupported(GraphicsDevice)
Class.getDeclaredMethods0(Class, boolean)
WorldType.getMinimumSpawnHeight(WorldType, World)
World.getRainStrength(World, float)
FontMetrics.getMaxAscent(FontMetrics)
MethodHandleInfo.referenceKindToString(int)
Class.privateGetDeclaredFields(Class, boolean)
ImmutableMultimap.of(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object | Object, Object | Object, Object, Object, Object, Object, Object |  | Object, Object, Object, Object, Object, Object, Object, Object | Object, Object, Object, Object)
LambdaForm.uncustomize(LambdaForm)
MinecraftServer.isWorldIconSet(MinecraftServer)
AccessibleTable.getAccessibleColumnCount(AccessibleTable)
GameProfile.getProperties(GameProfile)
ImmutableMap.asMultimap(ImmutableMap)
Handle.readComplete(Handle)
LocalTime.getLong(LocalTime, TemporalField)
EnumVisible.getByName(String)
Item.isFull3D(Item)
ResourceLocation.hashCode(ResourceLocation)
WorldInfo.access$200(WorldInfo)
Toolkit.getMenuShortcutKeyMask(Toolkit)
Logger.throwing(Logger, Level, Throwable | Logger, Throwable)
NetHandlerPlayClient.handlePlayerListHeaderFooter(NetHandlerPlayClient, SPacketPlayerListHeaderFooter)
EntityPlayer.canEat(EntityPlayer, boolean)
Locale.toLanguageTag(Locale)
DropTargetContextPeer.rejectDrag(DropTargetContextPeer)
LambdaForm.interpret_L(MethodHandle, Object, Object | MethodHandle, Object | MethodHandle)
NBTTagCompound.getCompoundTag(NBTTagCompound, String)
WorldType.onCustomizeButton(WorldType, Minecraft, GuiCreateWorld)
Component.setFocusTraversalKeysEnabled(Component, boolean)
VertexFormatElement.toString(VertexFormatElement)
DamageSource.getTrueSource(DamageSource)
Tutorial.handleMouse(Tutorial, MouseHelper)
AttributeValues.setBackground(AttributeValues, Paint)
LambdaForm.returnTypesMatch(String, Object[], Object)
ByteBuf.nioBufferCount(ByteBuf)
NetHandlerPlayClient.lambda$handleChangeGameState$0(NetHandlerPlayClient)
EntityPlayerMP.trySleep(EntityPlayerMP, BlockPos)
ChronoZonedDateTime.isEqual(ChronoZonedDateTime, ChronoZonedDateTime)
OptionalDouble.isPresent(OptionalDouble)
URLConnection.getFileNameMap()
ItemRenderer.getMapAngleFromPitch(ItemRenderer, float)
Container.dispatchEventToSelf(Container, AWTEvent)
NBTBase.create(byte)
ByteBuf.retainedSlice(ByteBuf, int, int | ByteBuf)
Session.getToken(Session)
EventQueue.getDispatchThread(EventQueue)
Toolkit.createCheckboxMenuItem(Toolkit, CheckboxMenuItem)
Integer.hashCode(int | Integer)
Component.getLocationOnScreen(Component)
DropTarget.initializeAutoscrolling(DropTarget, Point)
Attribute.compareAndSet(Attribute, Object, Object)
RenderChunk.needsImmediateUpdate(RenderChunk)
OffsetDateTime.plusYears(OffsetDateTime, long)
MemberName.isType(MemberName)
LambdaForm.constantZero(BasicType)
TextureMap.getBasePath(TextureMap)
EntityLivingBase.isHandActive(EntityLivingBase)
Integer.max(int, int)
SoundEventAccessor.addSound(SoundEventAccessor, ISoundEventAccessor)
BlockFlower.getMetaFromState(BlockFlower, IBlockState)
DisplayInfo.shouldShowToast(DisplayInfo)
TimeZone.toZoneId(TimeZone)
SpeciesData.access$100(SpeciesData)
Quaternion.mulInverse(Quaternion, Quaternion, Quaternion)
WritableRaster.getWritableParent(WritableRaster)
LambdaFormBuffer.replaceName(LambdaFormBuffer, int, Name)
Graphics.hitClip(Graphics, int, int, int, int)
Constructor.toString(Constructor)
EventQueue.initDispatchThread(EventQueue)
ClassSignature.make(FormalTypeParameter[], ClassTypeSignature, ClassTypeSignature[])
File.getParent(File)
EntityMinecart.getComparatorLevel(EntityMinecart)
UUID.getMostSignificantBits(UUID)
Class.searchFields(Field[], String)
LambdaForm.arguments(int, MethodType | int, Class[] | int, char[] | int, List | int, String)
WorldInfo.access$1600(WorldInfo)
Render.renderName(Render, Entity, double, double, double)
AxisAlignedBB.expand(AxisAlignedBB, double, double, double)
LootTableManager.access$300()
Minecraft.getRenderManager(Minecraft)
ChannelConfig.setAutoClose(ChannelConfig, boolean)
RenderManager.renderEntity(RenderManager, Entity, double, double, double, float, float, boolean)
PlayerChunkMap.getOrCreateEntry(PlayerChunkMap, int, int)
MenuPeer.addItem(MenuPeer, MenuItem)
MappedByteBuffer.mappingLength(MappedByteBuffer, long)
Window.isLocationByPlatform(Window)
ChannelId.asLongText(ChannelId)
TemplateManager.getTemplate(TemplateManager, MinecraftServer, ResourceLocation)
Component.nextFocus(Component)
NibbleArray.isLowerNibble(NibbleArray, int)
Builder.putAll(Builder, Iterable | Builder, Object, Iterable | Builder, Map | Builder, Object, Iterable | Builder, Multimap | Builder, Object, Object[] | Builder, Iterable | Builder, Multimap | Builder, Table | Builder, Object, Object[] | Builder, Object, Iterable | Builder, Object, Object[] | Builder, Multimap | Builder, Iterable | Builder, Iterable)
EntityPlayer.getBedOrientationInDegrees(EntityPlayer)
Container.postProcessKeyEvent(Container, KeyEvent)
JsonWriter.beforeName(JsonWriter)
AbstractStringBuilder.length(AbstractStringBuilder)
ItemStack.getMaxItemUseDuration(ItemStack)
ImmutableTable.createValues(ImmutableTable | ImmutableTable)
Component.paintAll(Component, Graphics)
Integer.compare(int, int)
BasicFileAttributes.lastModifiedTime(BasicFileAttributes)
Class.getAnnotatedInterfaces(Class)
WorldType.getNextID()
NetHandlerPlayClient.handleJoinGame(NetHandlerPlayClient, SPacketJoinGame)
OffsetDateTime.withSecond(OffsetDateTime, int)
ByteBuffer.putInt(ByteBuffer, int | ByteBuffer, int, int)
Unsafe.disconnect(Unsafe, ChannelPromise)
Path.isAbsolute(Path)
Window.isShowing(Window)
Class.getFields(Class)
RenderItem.renderEffect(RenderItem, IBakedModel)
Lookup.getDirectFieldNoSecurityManager(Lookup, byte, Class, MemberName)
Wrapper.forBasicType(char | Class)
Vector.setElementAt(Vector, Object, int)
DesktopPeer.open(DesktopPeer, File)
SoundRegistry.clearMap(SoundRegistry)
EntityLivingBase.onKillCommand(EntityLivingBase)
EntityPlayerMP.clearInvulnerableDimensionChange(EntityPlayerMP)
DoubleStream.toArray(DoubleStream)
Minecraft.getProxy(Minecraft)
Team.getColor(Team)
EnumFacing.getYOffset(EnumFacing)
NumericShaper.rangeForCodePoint(NumericShaper, int)
GenericsFactory.findTypeVariable(GenericsFactory, String)
Graphics2D.translate(Graphics2D, int, int | Graphics2D, double, double)
Render.getRenderManager(Render)
Stream.mapToDouble(Stream, ToDoubleFunction)
Entity.setCommandStats(Entity, Entity)
Cell.getRowKey(Cell)
IntStream.findFirst(IntStream)
ClassLoader.retrieveDirectives()
ReflectionFactory.readResolveForSerialization(ReflectionFactory, Class)
SPacketUpdateTileEntity.getTileEntityType(SPacketUpdateTileEntity)
URLClassPath.disableAllLookupCaches()
AppContext.access$400()
ZonedDateTime.ofLocal(LocalDateTime, ZoneId, ZoneOffset)
World.isBlockModifiable(World, EntityPlayer, BlockPos)
BlockFlower.createBlockState(BlockFlower)
ShortBuffer.hasArray(ShortBuffer)
DialogPeer.setResizable(DialogPeer, boolean)
Class.getField0(Class, String)
BigInteger.shortValueExact(BigInteger)
Plane.iterator(Plane)
Item.shouldRotateAroundWhenRendering(Item)
EventQueue.access$900(EventQueue)
InetAddressHolder.getFamily(InetAddressHolder)
World.getStarBrightness(World, float)
FontRenderer.drawStringWithShadow(FontRenderer, String, float, float, int)
World.getPrecipitationHeight(World, BlockPos)
NetHandlerPlayClient.handleCustomSound(NetHandlerPlayClient, SPacketCustomSound)
ByteBuffer.asShortBuffer(ByteBuffer)
MinecraftServer.isBlockProtected(MinecraftServer, World, BlockPos, EntityPlayer)
NetworkPlayerInfo.getDisplayHealth(NetworkPlayerInfo)
Throwable.fillInStackTrace(Throwable | Throwable, int)
FrameType.getFormat(FrameType)
Minecraft.middleClickMouse(Minecraft)
JsonPrimitive.isPrimitiveOrString(Object)
GlyphVector.getOutline(GlyphVector, float, float | GlyphVector)
RenderGlobal.isRenderEntityOutlines(RenderGlobal)
MapStorage.saveAllData(MapStorage)
ColorModel.getRed(ColorModel, int | ColorModel, Object)
ThreadLocalMap.nextIndex(int, int)
OffsetDateTime.withOffsetSameInstant(OffsetDateTime, ZoneOffset)
EnumChatVisibility.valueOf(String)
EntityPlayer.dropItem(EntityPlayer, boolean | EntityPlayer, ItemStack, boolean | EntityPlayer, ItemStack, boolean, boolean)
InetAddress.getHostName(InetAddress | InetAddress, boolean)
EntityLiving.updateAITasks(EntityLiving)
Date.UTC(int, int, int, int, int, int)
RandomValueRange.getMin(RandomValueRange)
PlayerList.getWhitelistedPlayers(PlayerList)
ByteBuf.writeCharSequence(ByteBuf, CharSequence, Charset)
Instant.minusNanos(Instant, long)
AttributeValues.getLigatures(AttributeValues)
Instant.compareTo(Instant, Object | Instant, Instant)
EntityPlayer.isSpectator(EntityPlayer)
ChannelHandlerContext.isRemoved(ChannelHandlerContext)
Class.getTypeParameters(Class)
Quaternion.setIdentity(Quaternion | Quaternion)
CodeSource.equals(CodeSource, Object)
Hashtable.size(Hashtable)
BoundMethodHandle.arg(BoundMethodHandle, int)
Calendar.getFieldName(int)
Method.getGenericExceptionTypes(Method)
EntityPlayer.displayGui(EntityPlayer, IInteractionObject)
ColorSpace.isCS_CIEXYZ(ColorSpace)
Thread.run(Thread)
JsonPrimitive.getAsDouble(JsonPrimitive)
Toolkit.loadAssistiveTechnologies()
AffineTransform.updateState(AffineTransform)
Wrapper.forPrimitiveType(Class)
PlayerList.getPlayerAdvancements(PlayerList, EntityPlayerMP)
MinecraftServer.outputPercentRemaining(MinecraftServer, String, int)
Locale.getBaseLocale(Locale)
Block.getFlammability(Block, IBlockAccess, BlockPos, EnumFacing)
Biome.getBaseHeight(Biome)
Thread.nextThreadID()
ItemStack.getAnimationsToGo(ItemStack)
ByteBuf.readerIndex(ByteBuf | ByteBuf, int)
Region.getTranslatedRegion(Region, int, int)
GlyphVector.getGlyphCharIndex(GlyphVector, int)
BufferedImage.isTileWritable(BufferedImage, int, int)
OffsetTime.readExternal(ObjectInput)
LambdaForm.argument(int, char | int, BasicType)
MinecraftServer.getAllowNether(MinecraftServer)
VertexBuffer.drawArrays(VertexBuffer, int)
ImmutableMultiset.copyFromEntries(Collection)
PotionEffect.readCurativeItems(PotionEffect, NBTTagCompound)
DoubleStream.iterate(double, DoubleUnaryOperator)
Toolkit.createCheckbox(Toolkit, Checkbox)
AttributeModifier.isSaved(AttributeModifier)
Debug.toHexString(BigInteger)
RenderChunk.multModelviewMatrix(RenderChunk)
ZoneOffsetTransition.toEpochSecond(ZoneOffsetTransition)
EntityPlayer.isInvisibleToPlayer(EntityPlayer, EntityPlayer)
MinecraftServer.initialWorldChunkLoad(MinecraftServer)
Level.toUpperCase(String)
Wrapper.checkConvertibleFrom()
EntityLiving.isServerWorld(EntityLiving)
Component.move(Component, int, int)
Component.addFocusListener(Component, FocusListener)
ScaledResolution.getScaledWidth(ScaledResolution)
Language.toString(Language)
NetHandlerPlayClient.handleRemoveEntityEffect(NetHandlerPlayClient, SPacketRemoveEntityEffect)
MinecraftServer.getGameProfileRepository(MinecraftServer)
EntityLivingBase.getAttributeMap(EntityLivingBase)
ByteBuf.discardReadBytes(ByteBuf)
MethodType.genericMethodType(int, boolean | int)
InetAddressImpl.getLocalHostName(InetAddressImpl)
AttributeValues.getCharReplacement(AttributeValues)
MapItemRenderer.renderMap(MapItemRenderer, MapData, boolean)
ZoneOffset.getRules(ZoneOffset)
DataFixer.process(DataFixer, IFixType, NBTTagCompound, int | DataFixer, IFixType, NBTTagCompound)
Region.intersectsQuickCheck(Region, Region)
Method.specificToGenericStringHeader(Method, StringBuilder)
ISound.getSoundLocation(ISound)
AxisAlignedBB.calculateYOffset(AxisAlignedBB, AxisAlignedBB, double)
Session.getProfile(Session)
URL.getProtocol(URL)
FwDispatcher.isDispatchThread(FwDispatcher)
InetAddress.getLocalHost()
EntityLivingBase.getCreatureAttribute(EntityLivingBase)
ITextureObject.restoreLastBlurMipmap(ITextureObject)
CrashReport.makeCrashReport(Throwable, String)
World.immediateBlockTick(World, BlockPos, IBlockState, Random)
Team.getCollisionRule(Team)
AccessibleContext.setAccessibleParent(AccessibleContext, Accessible)
ByteBuf.internalNioBuffer(ByteBuf, int, int)
IdentityArrayList.add(IdentityArrayList, int, Object | IdentityArrayList, Object)
PathIterator.next(PathIterator)
Team.getName(Team)
Chronology.dateNow(Chronology, Clock | Chronology, ZoneId | Chronology)
PlayerChunkMapEntry.sendBlockEntity(PlayerChunkMapEntry, TileEntity)
Constructor.toGenericString(Constructor)
BasicFileAttributes.creationTime(BasicFileAttributes)
ProtectionDomain.implies(ProtectionDomain, Permission)
IntegratedServer.init(IntegratedServer)
World.setEntityState(World, Entity, byte)
World.getBiome(World, BlockPos)
Item.shouldCauseBlockBreakReset(Item, ItemStack, ItemStack)
TileEntity.writeInternal(TileEntity, NBTTagCompound)
Instant.minusSeconds(Instant, long)
JsonReader.nextNull(JsonReader)
MethodHandleInfo.reflectAs(MethodHandleInfo, Class, Lookup)
ColorModel.hasAlpha(ColorModel)
Component.processKeyEvent(Component, KeyEvent)
Unsafe.remoteAddress(Unsafe)
Entity.removeTag(Entity, String)
WorldInfo.getGeneratorOptions(WorldInfo)
LambdaForm.basicTypeSignature(MethodType | LambdaForm)
ByteBuffer.compare(byte, byte)
Minecraft.isDemo(Minecraft)
GraphicsConfiguration.getImageCapabilities(GraphicsConfiguration)
Temporal.until(Temporal, Temporal, TemporalUnit)
CrashReport.getCompleteReport(CrashReport)
EntityRenderer.updateLightmap(EntityRenderer, float)
LocalDateTime.withSecond(LocalDateTime, int)
Month.isSupported(Month, TemporalField)
WorldInfo.access$300(WorldInfo)
ImmutableMultiset.copyIntoArray(ImmutableMultiset, Object[], int)
PlayerProfileCache.setOnlineMode(boolean)
Range.toRangeIndex(Range)
DataBuffer.getSize(DataBuffer)
EventQueue.isDispatchThreadImpl(EventQueue)
TemplateManager.writeTemplate(TemplateManager, MinecraftServer, ResourceLocation)
ChannelHandlerContext.fireChannelReadComplete(ChannelHandlerContext)
Package.getDeclaredAnnotationsByType(Package, Class)
ItemStack.getEnchantmentTagList(ItemStack)
TextureMap.finishLoading(TextureMap, Stitcher, ProgressBar, int, int)
EntityPlayerMP.getSpectatingEntity(EntityPlayerMP)
Font.getAttributeValues(Font)
World.notifyLightSet(World, BlockPos)
ChunkProviderServer.getLoadedChunks(ChunkProviderServer)
Container.processEvent(Container, AWTEvent)
LambdaFormEditor.oldSpeciesData(LambdaFormEditor)
CriterionProgress.serialize(CriterionProgress)
EntityMinecart.setHasDisplayTile(EntityMinecart, boolean)
RenderGlobal.playSoundToAllNearExcept(RenderGlobal, EntityPlayer, SoundEvent, SoundCategory, double, double, double, float, float)
LambdaFormEditor.filterArgumentForm(LambdaFormEditor, int, BasicType)
Block.getDrops(Block, NonNullList, IBlockAccess, BlockPos, IBlockState, int | Block, IBlockAccess, BlockPos, IBlockState, int)
MethodHandleInfo.getName(MethodHandleInfo)
Message.getThrowable(Message)
Duration.getNano(Duration)
ZoneRules.writeReplace(ZoneRules)
ImmutableMap.computeIfAbsent(ImmutableMap, Object, Function)
LongStream.asDoubleStream(LongStream)
DragSourceContextPeer.setCursor(DragSourceContextPeer, Cursor)
Raster.getPixels(Raster, int, int, int, int, double[] | Raster, int, int, int, int, int[] | Raster, int, int, int, int, float[])
DoubleStream.sum(DoubleStream)
EnumType.getDisplayName(EnumType)
LocaleExtensions.getExtension(LocaleExtensions, Character)
InputContext.getInputMethodControlObject(InputContext)
Entity.getPositionVector(Entity)
GlyphMetrics.getBounds2D(GlyphMetrics)
FileLock.size(FileLock)
Dialog.isModal_NoClientCode(Dialog)
IntStream.iterator(IntStream | IntStream)
BufferBuilder.reset(BufferBuilder)
NBTTagCompound.equals(NBTTagCompound, Object)
AsynchronousFileChannel.truncate(AsynchronousFileChannel, long)
World.setBlockState(World, BlockPos, IBlockState | World, BlockPos, IBlockState, int)
DisplayMode.getHeight(DisplayMode)
EntityPlayerMP.getAdvancements(EntityPlayerMP)
TileEntity.getWorld(TileEntity)
Date.toGMTString(Date)
Biome.getTempCategory(Biome)
WorldServer.getSpawnListEntryForTypeAt(WorldServer, EnumCreatureType, BlockPos)
StrikeMetrics.toString(StrikeMetrics)
URLClassPath.ensureLoaderOpened(URLClassPath, int)
WorldServer.getChunkProvider(WorldServer | WorldServer)
TextureAtlasSprite.setIconWidth(TextureAtlasSprite, int)
SoundManager.unloadSoundSystem(SoundManager)
PotionEffect.readCustomPotionEffectFromNBT(NBTTagCompound)
PlayerList.playerLoggedIn(PlayerList, EntityPlayerMP)
Minecraft.sendClickBlockToController(Minecraft, boolean)
NBTTagCompound.setTag(NBTTagCompound, String, NBTBase)
Properties.enumerateStringProperties(Properties, Hashtable)
UUID.randomUUID()
RenderGlobal.generateSky(RenderGlobal)
AttributeValues.extractRotation(Double, AffineTransform, boolean)
HorseArmorType.getOrdinal(HorseArmorType)
World.isThundering(World)
EventQueue.coalesceEvent(EventQueue, AWTEvent, int)
EntityMinecart.getMaxSpeed(EntityMinecart)
DragSourceContextPeer.startDrag(DragSourceContextPeer, DragSourceContext, Cursor, Image, Point)
Container.isValidateRoot(Container)
BigDecimal.divideAndRound(BigInteger, long, int | BigInteger, BigInteger, int | long, long, int | long, long, int, int, int | BigInteger, BigInteger, int, int, int | BigInteger, long, int, int, int)
WorldType.getId(WorldType)
IMinecartCollisionHandler.onEntityCollision(IMinecartCollisionHandler, EntityMinecart, Entity)
Entity.isBeingRidden(Entity)
ShaderUniform.parseType(String)
EntityLivingBase.areAllPotionsAmbient(Collection)
ZoneId.toTemporal(ZoneId)
AdvancementProgress.getCriterionProgress(AdvancementProgress, String)
ItemStack.grow(ItemStack, int)
Duration.plus(Duration, long, TemporalUnit | Duration, Duration | Duration, long, long)
ZonedDateTime.readExternal(ObjectInput)
Class.getGenericInterfaces(Class)
WildcardType.getLowerBounds(WildcardType)
FontMetrics.getMaxDescent(FontMetrics)
Predicate.apply(Predicate, Object)
Dialog.hideAndDisposePreHandler(Dialog)
Container.removeDelicately(Container, Component, Container, int)
Entry.lambda$comparingByKey$6d558cbf$1(Comparator, Entry, Entry)
MobSpawnerBaseLogic.setDelayToMin(MobSpawnerBaseLogic, int)
LambdaForm.valueMatches(BasicType, Class, Object)
Long.formatUnsignedLong(long, int, char[], int, int)
EntityPlayerMP.sendContainerToPlayer(EntityPlayerMP, Container)
ReferenceCounted.release(ReferenceCounted, int | ReferenceCounted)
URL.setSerializedHashCode(URL, int)
FoodStats.addStats(FoodStats, ItemFood, ItemStack | FoodStats, int, float)
Window.getOwnedWindows_NoClientCode(Window)
EntityTracker.removePlayerFromTrackers(EntityTracker, EntityPlayerMP)
LocalTime.getNano(LocalTime)
Long.valueOf(long | String | String, int)
Component.getMouseMotionListeners(Component)
NamedFunction.invoker(NamedFunction)
BufferBuilder.putBrightness4(BufferBuilder, int, int, int, int)
World.addBlockEvent(World, BlockPos, Block, int, int)
Block.isAABBInsideMaterial(Block, World, BlockPos, AxisAlignedBB, Material)
World.isRainingAt(World, BlockPos)
MethodType.changeParameterType(MethodType, int, Class)
IScoreCriteria.getName(IScoreCriteria)
ChronoPeriod.equals(ChronoPeriod, Object)
BlockStateContainer.setDataFromNBT(BlockStateContainer, byte[], NibbleArray, NibbleArray)
RenderManager.setRenderOutlines(RenderManager, boolean)
FocusTraversalPolicy.getInitialComponent(FocusTraversalPolicy, Window)
AttributeValues.equals(Object, Object | AttributeValues, AttributeValues | AttributeValues, Object)
Font2D.getRank(Font2D)
Thread.getUncaughtExceptionHandler(Thread)
ArrayList.trimToSize(ArrayList)
String.lastIndexOf(char[], int, int, String, int | String, int | char[], int, int, char[], int, int, int | String, String | String, String, int | String, int, int)
Framebuffer.isStencilEnabled(Framebuffer)
WorldSavedData.writeToNBT(WorldSavedData, NBTTagCompound)
Cursor.setPData(Cursor, long)
Region.clipScale(int, double)
Entity.setSneaking(Entity, boolean)
ServerStatusResponse.getPlayers(ServerStatusResponse)
LocalDate.minusDays(LocalDate, long)
FunctionManager.getCommandManager(FunctionManager)
PaintContext.getColorModel(PaintContext)
DoubleStream.limit(DoubleStream, long)
Minecraft.isReducedDebug(Minecraft)
Resource.getContentLength(Resource)
BoundMethodHandle.tooComplex(BoundMethodHandle)
Entity.dealFireDamage(Entity, int)
Component.getLocale(Component)
FontRenderer.isFormatSpecial(char)
Component.isRequestFocusAccepted(Component, boolean, boolean, Cause)
GuiButton.setWidth(GuiButton, int)
Name.typesMatch(BasicType, Object)
DragSource.startDrag(DragSource, DragGestureEvent, Cursor, Transferable, DragSourceListener | DragSource, DragGestureEvent, Cursor, Image, Point, Transferable, DragSourceListener, FlavorMap | DragSource, DragGestureEvent, Cursor, Transferable, DragSourceListener, FlavorMap | DragSource, DragGestureEvent, Cursor, Image, Point, Transferable, DragSourceListener)
Potion.applyAttributesModifiersToEntity(Potion, EntityLivingBase, AbstractAttributeMap, int)
EntityPlayer.getSleepTimer(EntityPlayer)
Chunk.getLightSubtracted(Chunk, BlockPos, int)
Date.setCache(Date, int, long, int)
BigInteger.remainderKnuth(BigInteger, BigInteger)
FieldAccessor.getFloat(FieldAccessor, Object)
BigDecimal.intValue(BigDecimal)
EntityLiving.setLeashHolder(EntityLiving, Entity, boolean)
AccessibleComponent.setCursor(AccessibleComponent, Cursor)
Long.max(long, long)
ZoneId.getAvailableZoneIds()
Package.getPackageInfo(Package)
MethodType.toFieldDescriptorString(Class)
DropTarget.createDropTargetContext(DropTarget)
JsonReader.toString(JsonReader)
Block.quantityDroppedWithBonus(Block, int, Random)
WorldInfo.setBorderDamagePerBlock(WorldInfo, double)
Locale.hashCode(Locale)
Insets.clone(Insets)
GameProfile.getName(GameProfile)
Font2D.canDoStyle(Font2D, int)
Entity.onInsideBlock(Entity, IBlockState)
EnumActionResult.valueOf(String)
Invokers.checkInvoker(Invokers, MethodHandle)
WorldInfo.getAdditionalProperty(WorldInfo, String)
WorldBorder.maxZ(WorldBorder)
ResourceBundle.hasValidParentChain(ResourceBundle)
Raster.initIDs()
WorldBorder.maxX(WorldBorder)
EntityMinecart.getPos(EntityMinecart, double, double, double)
ActionResult.getType(ActionResult)
AccessibleAction.getAccessibleActionCount(AccessibleAction)
PlayerList.getPlayersMatchingAddress(PlayerList, String)
MemberName.canBeStaticallyBound(MemberName)
ChronoLocalDate.toEpochDay(ChronoLocalDate)
FontStrike.getFontMetrics(FontStrike)
CharToGlyphMapper.getNumGlyphs(CharToGlyphMapper)
ByteBuffer.allocate(int)
Window.doDispose(Window)
ZoneOffsetTransition.getOffsetAfter(ZoneOffsetTransition)
ComponentPeer.getColorModel(ComponentPeer)
Field.getDeclaredAnnotations(Field)
World.makeFireworks(World, double, double, double, double, double, double, NBTTagCompound)
EntityLivingBase.getItemInUseMaxCount(EntityLivingBase)
Window.addWindowStateListener(Window, WindowStateListener)
ComponentPeer.createBuffers(ComponentPeer, int, BufferCapabilities)
Entity.getParts(Entity)
BaseCalendar.getMonthLength(BaseCalendar, int, int | BaseCalendar, CalendarDate)
LocalDate.plusYears(LocalDate, long)
Toolkit.createPanel(Toolkit, Panel)
BiomeProvider.areBiomesViable(BiomeProvider, int, int, int, List)
Hashtable.toString(Hashtable)
Stream.max(Stream, Comparator)
WorldServer.setDebugWorldSettings(WorldServer)
Period.minus(Period, TemporalAmount | Period, TemporalAmount)
Attributes.size(Attributes)
Container.setFont(Container, Font)
ConstantPool.getFloatAt(ConstantPool, int)
EntityPlayerMP.onInsideBlock(EntityPlayerMP, IBlockState)
AccessibleContext.access$000(AccessibleContext)
DamageSource.causePlayerDamage(EntityPlayer)
AccessibleContext.access$002(AccessibleContext, AppContext)
World.isUpdateScheduled(World, BlockPos, Block)
WorldServer.getMinecraftServer(WorldServer)
PlayerList.preparePlayer(PlayerList, EntityPlayerMP, WorldServer)
IBlockState.getValue(IBlockState, IProperty)
EntityPlayerMP.closeContainer(EntityPlayerMP)
Stream.map(Stream, Function)
GraphicsDevice.isDisplayChangeSupported(GraphicsDevice)
StateImplementation.useNeighborBrightness(StateImplementation)
InputMethodRequests.getCommittedText(InputMethodRequests, int, int, Attribute[])
Graphics.fillOval(Graphics, int, int, int, int)
MethodHandle.asVarargsCollector(MethodHandle, Class)
StringBuilder.readObject(StringBuilder, ObjectInputStream)
Font2D.getFontMetrics(Font2D, Font, FontRenderContext, float[] | Font2D, Font, AffineTransform, Object, Object, float[])
EnumFacing.getFacingFromAxis(AxisDirection, Axis)
Component.getFontMetrics(Component, Font)
ValueRange.isValidValue(ValueRange, long)
RandomValueRange.getMax(RandomValueRange)
Future.isCancellable(Future)
Rectangle.createUnion(Rectangle, Rectangle2D)
BufferBuilder.sortVertexData(BufferBuilder, float, float, float)
OffsetTime.getOffset(OffsetTime)
PropertyChangeSupport.firePropertyChange(PropertyChangeSupport, String, int, int | PropertyChangeSupport, String, Object, Object | PropertyChangeSupport, String, boolean, boolean | PropertyChangeSupport, PropertyChangeEvent)
Component.checkCoalescing(Component)
Component.print(Component, Graphics)
Field.setFloat(Field, Object, float)
SoundType.getPitch(SoundType)
LootEntry.serialize(LootEntry, JsonObject, JsonSerializationContext)
Block.getSelectedBoundingBox(Block, IBlockState, World, BlockPos)
Event.getOldEventKey(KeyEvent)
Block.canSustainPlant(Block, IBlockState, IBlockAccess, BlockPos, EnumFacing, IPlantable)
EventQueue.getEventLog()
TileEntity.getBlockMetadata(TileEntity)
Channel.metadata(Channel)
ClassLoader.needsClassLoaderPermissionCheck(ClassLoader, ClassLoader)
OffsetTime.get(OffsetTime, TemporalField)
CompositeByteBuf.clear(CompositeByteBuf | CompositeByteBuf)
EntityPlayer.damageArmor(EntityPlayer, float)
ShortBuffer.order(ShortBuffer)
FwDispatcher.createSecondaryLoop(FwDispatcher)
World.getHorizon(World)
LangReflectAccess.setConstructorAccessor(LangReflectAccess, Constructor, ConstructorAccessor)
TextureMap.loadTexture(TextureMap, IResourceManager | TextureMap, Stitcher, IResourceManager, ResourceLocation, TextureAtlasSprite, ProgressBar, int, int)
ReflectionFactory.newConstructorForSerialization(ReflectionFactory, Class | ReflectionFactory, Class, Constructor)
World.setSpawnPoint(World, BlockPos)
FrameTimer.getLastIndex(FrameTimer)
ByteBuffer.hashCode(ByteBuffer)
DoubleBuffer.hasArray(DoubleBuffer)
JsonElement.isJsonPrimitive(JsonElement)
EnumHand.values()
GenLayer.nextInt(GenLayer, int)
Minecraft.processKeyBinds(Minecraft)
Instant.isSupported(Instant, TemporalUnit | Instant, TemporalField)
FontRenderer.drawString(FontRenderer, String, int, int, int | FontRenderer, String, float, float, int, boolean)
LootPool.access$300(LootPool)
Component.add(Component, PopupMenu)
URI.create(String)
ImmutableCollection.removeAll(ImmutableCollection, Collection)
ReentrantLock.isFair(ReentrantLock)
AttributeValues.extractXRotation(AffineTransform, boolean)
Entity.getAlwaysRenderNameTag(Entity)
ByteBuf.isWritable(ByteBuf, int | ByteBuf)
ModelBase.getRandomModelBox(ModelBase, Random)
Calendar.getGreatestMinimum(Calendar, int)
Event.shiftDown(Event)
VillageCollection.writeToNBT(VillageCollection, NBTTagCompound)
Insets.equals(Insets, Object)
Thread.currentThread()
ISaveFormat.getWorldInfo(ISaveFormat, String)
Properties.load0(Properties, LineReader)
AxisAlignedBB.contains(AxisAlignedBB, Vec3d)
ByteBuf.resetReaderIndex(ByteBuf)
BigInteger.materialize(int[], int)
ICommandManager.getCommands(ICommandManager)
Cell.getValue(Cell)
Snooper.addJvmArgsToSnooper(Snooper)
ServerStatusResponse.setVersion(ServerStatusResponse, Version)
Raster.getDataBuffer(Raster)
NumericShaper.isStrongDirectional(NumericShaper, char)
VolatileImage.contentsLost(VolatileImage)
MethodType.readResolve(MethodType)
EntityTracker.untrack(EntityTracker, Entity)
GraphicsDevice.setDisplayMode(GraphicsDevice, DisplayMode)
VillageDoorInfo.resetDoorOpeningRestrictionCounter(VillageDoorInfo)
Scoreboard.getObjectivesForEntity(Scoreboard, String)
BigInteger.primeToCertainty(BigInteger, int, Random)
Method.getRoot(Method)
FileSystem.isOpen(FileSystem)
WorldType.byName(String)
Advancement.addChild(Advancement, Advancement)
Random.next(Random, int)
ReflectionFactory.getConstructorAccessor(ReflectionFactory, Constructor)
BiomeProvider.getBiomes(BiomeProvider, Biome[], int, int, int, int, boolean | BiomeProvider, Biome[], int, int, int, int)
Minecraft.setRenderViewEntity(Minecraft, Entity)
Executable.isVarArgs(Executable)
InputEvent.getWhen(InputEvent)
CompositeByteBuf.decompose(CompositeByteBuf, int, int)
DayOfWeek.minus(DayOfWeek, long)
BlockPos.east(BlockPos, int | BlockPos)
ColorSpace.fromCIEXYZ(ColorSpace, float[])
FileSystemProvider.delete(FileSystemProvider, Path)
Region.endRow(Region, int[])
EntityRenderer.getMouseOver(EntityRenderer, float)
URLConnection.getAllowUserInteraction(URLConnection)
ReentrantLock.tryLock(ReentrantLock, long, TimeUnit | ReentrantLock)
Region.getHiX(Region)
BigDecimal.longCompareMagnitude(long, long)
Region.getHiY(Region)
OffsetDateTime.isAfter(OffsetDateTime, OffsetDateTime)
Toolkit.getLockingKeyState(Toolkit, int)
DropTargetContext.getTransferable(DropTargetContext)
JsonReader.nextLong(JsonReader)
Stream.min(Stream, Comparator)
URLClassPath.validateLookupCache(URLClassPath, int, String)
URLClassPath.access$000(URLClassPath, String)
EntityPlayerMP.displayGUIChest(EntityPlayerMP, IInventory)
PlayerList.sendToAllNearExcept(PlayerList, EntityPlayer, double, double, double, double, int, Packet)
ResourceBundle.containsKey(ResourceBundle, String)
KeyPair.getPrivate(KeyPair)
Component.setLocation(Component, int, int | Component, Point)
Manifest.clone(Manifest)
Double.doubleToRawLongBits(double)
ChunkProviderServer.getLoadedChunk(ChunkProviderServer, int, int)
EntityLiving.updateLeashedState(EntityLiving)
Clipboard.getContents(Clipboard, Object)
URLClassPath.getLoader(URLClassPath, URL | URLClassPath, int)
OffsetDateTime.getLong(OffsetDateTime, TemporalField)
GuiScreen.mouseReleased(GuiScreen, int, int, int)
IntStream.forEachOrdered(IntStream, IntConsumer)
DoubleStream.skip(DoubleStream, long)
BaseCalendar.getYearLength(BaseCalendar, CalendarDate)
Entity.isImmuneToFire(Entity)
VertexFormatElement.getIndex(VertexFormatElement)
TimeZone.setDefaultZone()
LocalTime.atOffset(LocalTime, ZoneOffset)
WorldBorder.setTransition(WorldBorder, double | WorldBorder, double, double, long)
RenderLivingBase.renderModel(RenderLivingBase, EntityLivingBase, float, float, float, float, float, float)
EntityLivingBase.getSwingProgress(EntityLivingBase, float)
MinecraftServer.sendCommandFeedback(MinecraftServer)
Component.paramString(Component)
LocalTime.minusMinutes(LocalTime, long)
LocalDate.create(int, int, int)
FontRenderer.getResource(FontRenderer, ResourceLocation)
WorldServer.getPendingBlockUpdates(WorldServer, Chunk, boolean | WorldServer, StructureBoundingBox, boolean)
ChunkProviderServer.tick(ChunkProviderServer)
DragSource.getDefaultDragSource()
ButtonPeer.setLabel(ButtonPeer, String)
IntStream.noneMatch(IntStream, IntPredicate)
WorldInfo.getSizeOnDisk(WorldInfo)
ByteBuffer.allocateDirect(int)
MemberName.checkForTypeAlias(MemberName, Class)
EntityLivingBase.getRevengeTimer(EntityLivingBase)
URI.toURL(URI)
DragGestureEvent.readObject(DragGestureEvent, ObjectInputStream)
CompositeByteBuf.consolidate(CompositeByteBuf, int, int | CompositeByteBuf)
TemporalAccessor.range(TemporalAccessor, TemporalField)
Transferable.isDataFlavorSupported(Transferable, DataFlavor)
ZonedDateTime.until(ZonedDateTime, Temporal, TemporalUnit)
EntityPlayer.spawnShoulderEntities(EntityPlayer)
OffsetTime.withMinute(OffsetTime, int)
WorldServer.canMineBlockBody(WorldServer, EntityPlayer, BlockPos)
MapData.getMapInfo(MapData, EntityPlayer)
NetworkPlayerInfo.setDisplayName(NetworkPlayerInfo, ITextComponent)
GraphicsConfiguration.createCompatibleVolatileImage(GraphicsConfiguration, int, int, ImageCapabilities, int | GraphicsConfiguration, int, int, ImageCapabilities | GraphicsConfiguration, int, int, int | GraphicsConfiguration, int, int)
OffsetTime.until(OffsetTime, Temporal, TemporalUnit)
FileChannel.transferTo(FileChannel, long, long, WritableByteChannel)
OptionalInt.isPresent(OptionalInt)
EntityPlayer.entityInit(EntityPlayer)
ReentrantLock.isHeldByCurrentThread(ReentrantLock)
DamageSource.causeThrownDamage(Entity, Entity)
Attributes.remove(Attributes, Object)
World.getTileEntity(World, BlockPos)
AttributeValues.setJustification(AttributeValues, float)
Pair.getKey(Pair)
Float.createUnion(Float, Rectangle2D)
Font2D.getWeight(Font2D)
AccessibleEditableText.paste(AccessibleEditableText, int)
Material.setImmovableMobility(Material)
Number.intValue(Number)
ThreadGroup.destroy(ThreadGroup)
Block.dropXpOnBlockBreak(Block, World, BlockPos, int)
ChunkCompileTaskGenerator.addFinishRunnable(ChunkCompileTaskGenerator, Runnable)
BufferBuilder.putColor4(BufferBuilder, int)
LongSummaryStatistics.getMin(LongSummaryStatistics)
AtomicInteger.accumulateAndGet(AtomicInteger, int, IntBinaryOperator)
Village.isAreaClearAround(Village, BlockPos, BlockPos)
ArrayList.retainAll(ArrayList, Collection)
Vector.add(Vector, Object | Vector, int, Object)
Quaternion.dot(Quaternion, Quaternion)
DataEntry.isDirty(DataEntry)
Class.getComponentType(Class)
BigDecimal.divide(BigInteger, int, long, int, long, MathContext | BigDecimal, BigDecimal, int, RoundingMode | long, int, BigInteger, int, long, MathContext | BigDecimal, BigDecimal | long, int, long, int, int, int | BigInteger, int, long, int, int, int | BigDecimal, BigDecimal, int | BigInteger, int, BigInteger, int, long, MathContext | BigDecimal, BigDecimal, RoundingMode | long, int, long, int, long, MathContext | BigDecimal, BigDecimal, MathContext | BigDecimal, BigDecimal, int, int | BigInteger, int, BigInteger, int, int, int | long, int, BigInteger, int, int, int)
ComponentPeer.setBounds(ComponentPeer, int, int, int, int, int)
JsonReader.skipQuotedValue(JsonReader, char)
MethodType.hasPrimitives(MethodType)
Date.clone(Date)
Chunk.markDirty(Chunk)
Logger.atDebug(Logger)
ChannelConfig.getOption(ChannelConfig, ChannelOption)
ChannelPipeline.remove(ChannelPipeline, Class | ChannelPipeline, String | ChannelPipeline, ChannelHandler)
EnumFlowerColor.getBlock(EnumFlowerColor)
Channel.isActive(Channel)
VertexFormatElement.isPositionElement(VertexFormatElement)
RenderManager.getSkinMap(RenderManager)
ClassLoader.findLibrary(ClassLoader, String)
Executable.getDeclaringClass(Executable)
BigDecimal.movePointLeft(BigDecimal, int)
MethodTypeForm.hasNonVoidPrimitives(MethodTypeForm)
Locale.getISOCountries()
BigDecimal.scale(BigDecimal)
AppContext.stopEventDispatchThreads()
Name.type(Name)
WritableRaster.setSamples(WritableRaster, int, int, int, int, int, float[] | WritableRaster, int, int, int, int, int, int[] | WritableRaster, int, int, int, int, int, double[])
EntityLivingBase.getSoundVolume(EntityLivingBase)
EntityPlayerMP.sendMessage(EntityPlayerMP, ITextComponent)
Class.getDeclaredConstructors0(Class, boolean)
Container.dispatchEventImpl(Container, AWTEvent)
Entity.writeToNBTOptional(Entity, NBTTagCompound)
WorldServer.canAddEntity(WorldServer, Entity)
Hashtable.elements(Hashtable)
Thread.setName(Thread, String)
Session.hasCachedProperties(Session)
JsonArray.getAsLong(JsonArray)
AffineTransform.getMatrix(AffineTransform, double[])
DoubleStream.noneMatch(DoubleStream, DoublePredicate)
ModelBiped.postRenderArm(ModelBiped, float, EnumHandSide)
AccessibleAction.doAccessibleAction(AccessibleAction, int)
World.setLightFor(World, EnumSkyBlock, BlockPos, int)
Toolkit.getColorModel(Toolkit)
PathPoint.distanceTo(PathPoint, PathPoint)
Font2D.getUnitsPerEm(Font2D)
MethodTypeForm.unpack(long, int)
StateImplementation.getActualState(StateImplementation, IBlockAccess, BlockPos)
EntityPlayer.setScore(EntityPlayer, int)
Region.filter(Region, SpanIterator)
ChronoZonedDateTime.withZoneSameInstant(ChronoZonedDateTime, ZoneId)
Thread.start(Thread)
Window.isValidateRoot(Window)
LangReflectAccess.newConstructor(LangReflectAccess, Class, Class[], Class[], int, int, String, byte[], byte[])
AffineTransform.getType(AffineTransform)
PlayerChunkMapEntry.containsPlayer(PlayerChunkMapEntry, EntityPlayerMP)
Window.updateZOrder(Window)
OptionalLong.hashCode(OptionalLong)
Vector.trimToSize(Vector)
BiConsumer.accept(BiConsumer, Object, Object)
MethodType.readObject(MethodType, ObjectInputStream)
Block.getOffset(Block, IBlockState, IBlockAccess, BlockPos)
BasicType.basicTypeChar(BasicType | Class)
ListenerList.getInstance(ListenerList, int)
WorldInfo.setAllowCommands(WorldInfo, boolean)
FutureCallback.onFailure(FutureCallback, Throwable)
EntityLiving.getAttackTarget(EntityLiving)
EnumPushReaction.valueOf(String)
Hashtable.rehash(Hashtable)
IsoChronology.period(IsoChronology, int, int, int | IsoChronology, int, int, int)
Block.canPlaceBlockOnSide(Block, World, BlockPos, EnumFacing)
LootEntry.addLoot(LootEntry, Collection, Random, LootContext)
PathPoint.toString(PathPoint)
MethodAccessor.invoke(MethodAccessor, Object, Object[])
WorldInfo.access$400(WorldInfo)
Map.replace(Map, Object, Object, Object | Map, Object, Object)
UserListBans.isBanned(UserListBans, GameProfile)
OffsetTime.plusMinutes(OffsetTime, long)
ChannelOutboundBuffer.safeFail(ChannelPromise, Throwable)
MethodType.returnSlotCount(MethodType)
ByteBuf.markReaderIndex(ByteBuf)
Invokers.maybeCompileToBytecode(Invokers, MethodHandle)
Channel.remoteAddress(Channel)
Class.getResourceAsStream(Class, String)
AdvancementProgress.hasProgress(AdvancementProgress)
Long.min(long, long)
Block.withMirror(Block, IBlockState, Mirror)
JsonElement.getAsCharacter(JsonElement)
Toolkit.sync(Toolkit)
Duration.toHours(Duration)
RenderItem.isThereOneNegativeScale(RenderItem, ItemTransformVec3f)
Component.getMouseWheelListeners(Component)
Entity.isSprinting(Entity)
Logger.atInfo(Logger)
DragSource.processDropActionChanged(DragSource, DragSourceDragEvent)
Style.getFormattingCode(Style)
Explosion.getExplosivePlacedBy(Explosion)
EventQueue.postEvent(EventQueue, AWTEvent, int | EventQueue, AWTEvent)
ListIterator.next(ListIterator)
EntityMinecart.getCurrentRailPosition(EntityMinecart)
ItemStack.isItemStackEqual(ItemStack, ItemStack)
ThreadLocalMap.cleanSomeSlots(ThreadLocalMap, int, int)
TypeAdapter.toJsonTree(TypeAdapter, Object)
Advancement.getDisplay(Advancement)
String.replaceFirst(String, String, String)
Vector3f.lengthSquared(Vector3f)
Field.getDouble(Field, Object)
EventDispatchThread.removeEventFilter(EventDispatchThread, EventFilter)
Font2D.charToGlyph(Font2D, int)
BufferedImage.getRGB(BufferedImage, int, int | BufferedImage, int, int, int, int, int[], int, int)
ImmutableSetMultimap.invert(ImmutableSetMultimap)
Component.doSwingSerialization(Component)
ImmutableTable.row(ImmutableTable, Object | ImmutableTable, Object)
DropTarget.getComponent(DropTarget)
EnumType.getGlConstant(EnumType)
ByteBuffer.asLongBuffer(ByteBuffer)
MinecraftServer.getGuiEnabled(MinecraftServer)
Window.addWindowListener(Window, WindowListener)
Throwable.setStackTrace(Throwable, StackTraceElement[])
Entity.changeDimension(Entity, int | Entity, int, ITeleporter)
Container.isParentOf(Container, Component)
EntityPlayerMP.getRecipeBook(EntityPlayerMP)
LocalTime.toNanoOfDay(LocalTime)
ListPeer.getMinimumSize(ListPeer, int)
CrashReport.getFile(CrashReport)
ZoneRules.of(ZoneOffset, ZoneOffset, List, List, List | ZoneOffset)
Class.getConstructors(Class)
DoubleStream.average(DoubleStream)
DragSource.removeDragSourceMotionListener(DragSource, DragSourceMotionListener)
Container.getMouseEventTarget(Container, int, int, boolean | Container, int, int, boolean, EventTargetFilter, boolean)
IAttributeInstance.getAttribute(IAttributeInstance)
Constructor.hasGenericInformation(Constructor)
Marker.hasParents(Marker)
World.getDifficultyForLocation(World, BlockPos)
ProtectionDomain.seeAllp()
SeekableByteChannel.truncate(SeekableByteChannel, long)
ChronoLocalDate.format(ChronoLocalDate, DateTimeFormatter)
GuiScreen.confirmClicked(GuiScreen, boolean, int)
BufferedImage.getType(BufferedImage)
InputContext.selectInputMethod(InputContext, Locale)
ChunkPos.getZEnd(ChunkPos)
OffsetDateTime.withMinute(OffsetDateTime, int)
LocalDateTime.format(LocalDateTime, DateTimeFormatter)
ChannelOutboundBuffer.expandNioBufferArray(ByteBuffer[], int, int)
Class.getConstructor0(Class, Class[], int)
EntityRenderer.setupFog(EntityRenderer, int, float)
Calendar.isStandaloneStyle(Calendar, int)
Duration.ofMillis(long)
Component.getToolkit(Component)
ZoneRules.equals(ZoneRules, Object)
Image.getGraphics(Image)
Graphics2D.setBackground(Graphics2D, Color)
PlayerList.setPlayerManager(PlayerList, WorldServer[])
DropTarget.getFlavorMap(DropTarget)
EntityLiving.updateEquipmentIfNeeded(EntityLiving, EntityItem)
ShaderGroup.getFramebufferRaw(ShaderGroup, String)
EntityLivingBase.getSoundPitch(EntityLivingBase)
PaintContext.dispose(PaintContext)
Component.validate(Component)
Entity.setPositionAndRotation(Entity, double, double, double, float, float)
MapData.writeToNBT(MapData, NBTTagCompound)
BigInteger.divideKnuth(BigInteger, BigInteger)
ArrayList.forEach(ArrayList, Consumer)
MusicType.getMaxDelay(MusicType)
ArrayList.contains(ArrayList, Object)
MappedByteBuffer.load0(MappedByteBuffer, long, long)
WorldServer.scheduleBlockUpdate(WorldServer, BlockPos, Block, int, int)
World.getSunBrightness(World, float)
GuiScreen.isKeyComboCtrlV(int)
EnumDifficulty.byId(int)
GenericsFactory.makeByte(GenericsFactory)
GuiScreen.isKeyComboCtrlX(int)
AccessibleContext.getAccessibleRole(AccessibleContext)
ChunkProviderServer.canSave(ChunkProviderServer)
EntityPlayer.setAbsorptionAmount(EntityPlayer, float)
Component.dispatchEvent(Component, AWTEvent)
ItemStack.getDisplayName(ItemStack)
CriterionProgress.reset(CriterionProgress)
MethodHandleInfo.getModifiers(MethodHandleInfo)
DayOfWeek.valueOf(String)
OptionalInt.ifPresent(OptionalInt, IntConsumer)
World.observedNeighborChanged(World, BlockPos, Block, BlockPos)
AffineTransform.getScaleX(AffineTransform)
RenderLivingBase.getDeathMaxRotation(RenderLivingBase, EntityLivingBase)
Class.getField(Class, String)
AffineTransform.getScaleY(AffineTransform)
OffsetTime.withOffsetSameInstant(OffsetTime, ZoneOffset)
NetHandlerPlayClient.getPlayerInfo(NetHandlerPlayClient, String | NetHandlerPlayClient, UUID)
DragSourceContext.transferablesFlavorsChanged(DragSourceContext)
Vector.hashCode(Vector)
Double.compareTo(Double, Double | Double, Object)
URI.equal(String, String)
ColorSpace.getName(ColorSpace, int)
DoubleBuffer.array(DoubleBuffer | DoubleBuffer)
ChronoZonedDateTime.toLocalTime(ChronoZonedDateTime)
AccessControlContext.calculateFields(AccessControlContext, AccessControlContext, AccessControlContext, Permission[])
AxisAlignedBB.calculateZOffset(AxisAlignedBB, AxisAlignedBB, double)
TimeZone.clone(TimeZone)
Entry.lambda$comparingByValue$1065357e$1(Entry, Entry)
IResource.getResourceLocation(IResource)
SampleModel.getSamples(SampleModel, int, int, int, int, int, float[], DataBuffer | SampleModel, int, int, int, int, int, int[], DataBuffer | SampleModel, int, int, int, int, int, double[], DataBuffer)
LongStream.spliterator(LongStream | LongStream)
ZoneOffsetTransition.toString(ZoneOffsetTransition)
Component.getKeyListeners(Component)
EntityPlayerMP.swingArm(EntityPlayerMP, EnumHand)
ImmutableSet.of( | Object, Object, Object | Object | Object, Object, Object, Object | Object, Object | Object, Object, Object, Object, Object, Object, Object[] | Object, Object, Object, Object, Object)
GuiScreen.isKeyComboCtrlA(int)
EntityLivingBase.setPartying(EntityLivingBase, BlockPos, boolean)
GuiScreen.isKeyComboCtrlC(int)
Village.isPlayerReputationTooLow(Village, String | Village, UUID)
TextHitInfo.toString(TextHitInfo)
Component.getRecursivelyVisibleBounds(Component)
ByteBuf.setIntLE(ByteBuf, int, int)
Stroke.createStrokedShape(Stroke, Shape)
FontMetrics.getMaxCharBounds(FontMetrics, Graphics)
Render.isMultipass(Render)
IChunkProvider.isChunkGeneratedAt(IChunkProvider, int, int)
AxisAlignedBB.calculateXOffset(AxisAlignedBB, AxisAlignedBB, double)
GameType.getName(GameType)
ChoicePeer.removeAll(ChoicePeer)
Block.createTileEntity(Block, World, IBlockState)
BufferCapabilities.getFrontBufferCapabilities(BufferCapabilities)
ChannelOutboundBuffer.removeBytes(ChannelOutboundBuffer, long)
ReentrantLock.getWaitingThreads(ReentrantLock, Condition)
Component.repaintParentIfNeeded(Component, int, int, int, int)
PotionEffect.compareTo(PotionEffect, PotionEffect | PotionEffect, Object)
IdentityArrayList.fastRemove(IdentityArrayList, int)
Function.apply(Function, Object)
LootPool.access$200(LootPool)
Chronology.eraOf(Chronology, int)
EntityPlayerMP.updateScorePoints(EntityPlayerMP, IScoreCriteria, int)
WorldServer.resetRainAndThunder(WorldServer)
EntityMoveHelper.isUpdating(EntityMoveHelper)
ChannelHandlerContext.fireChannelUnregistered(ChannelHandlerContext)
Period.addTo(Period, Temporal)
Entry.bindTexturePackIcon(Entry, TextureManager)
ShortBuffer.compact(ShortBuffer)
NBTTagCompound.hashCode(NBTTagCompound)
InetAddressHolder.getHostName(InetAddressHolder)
EntityMinecart.getMaximumSpeed(EntityMinecart)
ZoneOffset.ofTotalSeconds(int)
NetHandlerPlayClient.handleSetSlot(NetHandlerPlayClient, SPacketSetSlot)
DragGestureRecognizer.setComponent(DragGestureRecognizer, Component)
GameType.configurePlayerCapabilities(GameType, PlayerCapabilities)
BigInteger.modPow(BigInteger, BigInteger, BigInteger)
IntStream.builder()
EnumFlowerType.getTypes(EnumFlowerColor)
File.lastModified(File)
TileEntity.hasFastRenderer(TileEntity)
DamageSource.causeMobDamage(EntityLivingBase)
Container.insets(Container)
WorldInfo.getPlayerNBTTagCompound(WorldInfo)
BufferStrategy.show(BufferStrategy)
ByteBuffer.compact(ByteBuffer)
Tutorial.setStep(Tutorial, TutorialSteps)
OffsetTime.hashCode(OffsetTime)
MemberName.staticIsConsistent(MemberName)
EntityLivingBase.canGoThroughtTrapDoorOnLadder(EntityLivingBase, BlockPos, IBlockState)
SpawnListEntry.newInstance(SpawnListEntry, World)
Window.addPropertyChangeListener(Window, PropertyChangeListener | Window, String, PropertyChangeListener)
ScorePlayerTeam.formatString(ScorePlayerTeam, String)
ExtendedBlockStorage.needsRandomTick(ExtendedBlockStorage)
DamageSource.setMagicDamage(DamageSource)
EntityLiving.faceEntity(EntityLiving, Entity, float, float)
AccessibleComponent.setVisible(AccessibleComponent, boolean)
CharBuffer.charAt(CharBuffer, int)
BigInteger.makePositive(byte[] | int[])
OptionalDouble.of(double)
BufferedImage.getMinTileX(BufferedImage)
BufferedImage.getMinTileY(BufferedImage)
ScrollPanePeer.setUnitIncrement(ScrollPanePeer, Adjustable, int)
BigInteger.smallPrime(int, int, Random)
Hashtable.merge(Hashtable, Object, Object, BiFunction)
EntityPlayerMP.displayVillagerTradeGui(EntityPlayerMP, IMerchant)
Boolean.logicalOr(boolean, boolean)
Optional.transform(Optional, Function)
ArrayBasedBuilder.addAll(ArrayBasedBuilder, Iterable)
Particle.getFXLayer(Particle)
Component.handleEvent(Component, Event)
Block.harvestBlock(Block, World, EntityPlayer, BlockPos, IBlockState, TileEntity, ItemStack)
AttributeValues.toString(AttributeValues)
ISound.getSound(ISound)
ModelManager.getTextureMap(ModelManager)
Dialog.toBack(Dialog)
Message.getFormattedMessage(Message)
EntityLivingBase.onItemPickup(EntityLivingBase, Entity, int)
LocalTime.minusSeconds(LocalTime, long)
EntityLivingBase.setActiveHand(EntityLivingBase, EnumHand)
EntityPlayerMP.onEnchantmentCritical(EntityPlayerMP, Entity)
World.playEvent(World, EntityPlayer, int, BlockPos, int | World, int, BlockPos, int)
JsonReader.readEscapeCharacter(JsonReader)
DoubleStream.count(DoubleStream)
BigDecimal.remainder(BigDecimal, BigDecimal | BigDecimal, BigDecimal, MathContext)
LongSummaryStatistics.getMax(LongSummaryStatistics)
URLClassPath.access$100(URLClassPath, int[], int)
Temporal.plus(Temporal, long, TemporalUnit | Temporal, TemporalAmount)
Thread.dumpThreads(Thread[])
IChunkProvider.getLoadedChunk(IChunkProvider, int, int)
DropTarget.dropActionChanged(DropTarget, DropTargetDragEvent)
Constructor.getParameterCount(Constructor)
Container.countHierarchyMembers(Container)
Invokers.callSiteForm(MethodType, boolean)
FileSystemProvider.readAttributes(FileSystemProvider, Path, Class, LinkOption[] | FileSystemProvider, Path, String, LinkOption[])
ChannelHandlerContext.name(ChannelHandlerContext)
Hashtable.put(Hashtable, Object, Object)
ByteBuf.getChar(ByteBuf, int)
World.addEventListener(World, IWorldEventListener)
EntityLivingBase.onUpdate(EntityLivingBase)
Class.forName0(String, boolean, ClassLoader, Class)
Locale.readResolve(Locale)
EntityLivingBase.getTicksElytraFlying(EntityLivingBase)
CompositeByteBuf.internalNioBuffer(CompositeByteBuf, int, int)
Class.privateGetPublicFields(Class, Set)
RenderingHints.entrySet(RenderingHints)
EventQueue.noEvents(EventQueue)
Component.layout(Component)
BasicType.valueOf(String)
FileChannel.lock(FileChannel | FileChannel, long, long, boolean)
EntityPlayer.onKillEntity(EntityPlayer, EntityLivingBase)
RenderGlobal.setupTerrain(RenderGlobal, Entity, double, ICamera, int, boolean)
IntegratedServer.setGameType(IntegratedServer, GameType)
BigInteger.exactDivideBy3(BigInteger)
PlayerProfileCache.save(PlayerProfileCache)
IntStream.sequential(IntStream | IntStream)
LambdaForm.toString(LambdaForm)
World.getChunksLowestHorizon(World, int, int)
Lookup.findStatic(Lookup, Class, String, MethodType)
GraphicsDevice.getTranslucencyCapableGC(GraphicsDevice)
Component.getHeight(Component)
Chunk.canSeeSky(Chunk, BlockPos)
AttenuationType.valueOf(String)
ByteBuf.getFloat(ByteBuf, int)
MemberName.expandFromVM(MemberName)
BigDecimal.multiply(long, long, int | BigDecimal, BigDecimal | long, long | BigInteger, BigInteger, int | long, BigInteger, int | BigDecimal, BigDecimal, MathContext)
EntityItem.canBeAttackedWithItem(EntityItem)
CooldownTracker.notifyOnSet(CooldownTracker, Item, int)
ConstantPool.getClassAtIfLoaded0(ConstantPool, Object, int)
AttributeValues.setTransform(AttributeValues, TransformAttribute | AttributeValues, AffineTransform)
ZonedDateTime.plusHours(ZonedDateTime, long)
FloatBuffer.compareTo(FloatBuffer, Object | FloatBuffer, FloatBuffer)
Village.getVillageDoorInfoList(Village)
Multiset.spliterator(Multiset)
Wrapper.isSigned(Wrapper)
ISaveFormat.isNewLevelIdAcceptable(ISaveFormat, String)
Period.ofWeeks(int)
NetworkManager.provideLocalClient(SocketAddress)
Biome.getBiomeClass(Biome)
Dialog.shouldBlock(Dialog, Window)
Boolean.getBoolean(String)
GlyphVector.getVisualBounds(GlyphVector)
Window.getAllUnblockedWindows()
ImmutableMap.copyOfEnumMap(EnumMap)
Vector.spliterator(Vector)
World.addTileEntity(World, TileEntity)
Component.getFocusTraversalKeys(Component, int)
PermissionCollection.implies(PermissionCollection, Permission)
Locale.getUnicodeLocaleKeys(Locale)
Attributes.read(Attributes, FastInputStream, byte[])
LambdaForm.equals(LambdaForm, LambdaForm | LambdaForm, Object)
EntityPlayerMP.getStatFile(EntityPlayerMP)
NetHandlerPlayClient.handleEntityProperties(NetHandlerPlayClient, SPacketEntityProperties)
BlockStateContainer.getBlock(BlockStateContainer)
NamedFunction.isInvokeBasic(MemberName)
ChannelConfig.getOptions(ChannelConfig)
World.getBlockDensity(World, Vec3d, AxisAlignedBB)
Window.addNotify(Window)
Logger.getName(Logger)
JsonArray.add(JsonArray, Character | JsonArray, String | JsonArray, Number | JsonArray, Boolean | JsonArray, JsonElement)
DataSerializer.write(DataSerializer, PacketBuffer, Object)
ListPeer.getSelectedIndexes(ListPeer)
ZoneOffset.readExternal(DataInput)
LocalDateTime.adjustInto(LocalDateTime, Temporal)
LangReflectAccess.setMethodAccessor(LangReflectAccess, Method, MethodAccessor)
World.getClosestPlayerToEntity(World, Entity, double)
Vec3d.rotatePitch(Vec3d, float)
ChronoZonedDateTime.toLocalDateTime(ChronoZonedDateTime)
Window.setBounds(Window, int, int, int, int | Window, Rectangle)
Field.equals(Field, Object)
Score.getObjective(Score)
CreativeTabs.getIndex(CreativeTabs)
ImmutableTable.contains(ImmutableTable, Object, Object)
WorldInfo.setRaining(WorldInfo, boolean)
Future.sync(Future)
Wrapper.stackSlots(Wrapper)
ChronoZonedDateTime.toString(ChronoZonedDateTime)
DataEntry.copy(DataEntry)
LocalDate.writeReplace(LocalDate)
LongBuffer.compareTo(LongBuffer, LongBuffer | LongBuffer, Object)
ChannelOutboundBuffer.size(ChannelOutboundBuffer)
Logger.debug(Logger, Message, Throwable | Logger, MessageSupplier | Logger, Marker, Object, Throwable | Logger, String, Object, Object, Object, Object, Object, Object, Object, Object | Logger, Marker, CharSequence, Throwable | Logger, Marker, String, Object, Object, Object, Object | Logger, String, Object | Logger, Marker, String, Object, Object, Object, Object, Object | Logger, CharSequence, Throwable | Logger, Marker, Object | Logger, Marker, String, Object[] | Logger, String, Object, Object | Logger, Marker, Supplier | Logger, String, Object, Object, Object | Logger, Marker, MessageSupplier | Logger, Marker, Message, Throwable | Logger, Marker, String, Object, Object, Object, Object, Object, Object | Logger, Marker, String | Logger, String, Object, Object, Object, Object, Object, Object, Object, Object, Object | Logger, Marker, String, Object | Logger, String, Object, Object, Object, Object, Object, Object | Logger, Marker, String, Object, Object | Logger, CharSequence | Logger, MessageSupplier, Throwable | Logger, Marker, String, Object, Object, Object, Object, Object, Object, Object, Object | Logger, Message | Logger, Marker, String, Object, Object, Object, Object, Object, Object, Object, Object, Object | Logger, Supplier | Logger, String, Object[] | Logger, Marker, Message | Logger, Marker, String, Throwable | Logger, Marker, Supplier, Throwable | Logger, Object, Throwable | Logger, Object | Logger, Supplier, Throwable | Logger, String, Throwable | Logger, String, Object, Object, Object, Object | Logger, Marker, String, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object | Logger, String, Supplier[] | Logger, String, Object, Object, Object, Object, Object | Logger, Marker, String, Object, Object, Object, Object, Object, Object, Object | Logger, Marker, MessageSupplier, Throwable | Logger, Marker, String, Supplier[] | Logger, String, Object, Object, Object, Object, Object, Object, Object | Logger, Marker, String, Object, Object, Object | Logger, Marker, CharSequence | Logger, String | Logger, String, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)
FontLineMetrics.getHeight(FontLineMetrics)
ZoneOffsetTransition.getDurationSeconds(ZoneOffsetTransition)
NetHandlerPlayClient.handleMoveVehicle(NetHandlerPlayClient, SPacketMoveVehicle)
Font2D.getMapper(Font2D)
Class.isLocalClass(Class)
Locale.convertOldISOCodes(String)
Thread.blockedOn(Thread, Interruptible)
MemberName.isObjectPublicMethod(MemberName)
Container.postsOldMouseEvents(Container)
Executable.separateWithCommas(Executable, Class[], StringBuilder)
ImmutableSet.hashCode(ImmutableSet)
Lookup.findConstructor(Lookup, Class, MethodType)
Render.getFontRendererFromRenderManager(Render)
BufferBuilder.getVertexCount(BufferBuilder)
ZoneOffsetTransition.getDateTimeBefore(ZoneOffsetTransition)
ImmutableList.hashCode(ImmutableList)
PlayerList.canJoin(PlayerList, GameProfile)
EntityPlayer.onEnchant(EntityPlayer, ItemStack, int)
PlayerAdvancements.grantCriterion(PlayerAdvancements, Advancement, String)
AccessibleContext.getAccessibleEditableText(AccessibleContext)
Vector.remove(Vector, int | Vector, Object)
ByteBuf.slice(ByteBuf | ByteBuf, int, int)
Event.consume(Event)
NumericShaper.hashCode(NumericShaper)
World.isMaterialInBB(World, AxisAlignedBB, Material)
BigDecimal.divideAndRound128(long, long, long, int, int, int, int)
EntityDataManager.setClean(EntityDataManager)
WorldInfo.cloneNBTCompound(WorldInfo, NBTTagCompound)
World.getLightBrightness(World, BlockPos)
Toolkit.enabledOnToolkit(long)
EntityPlayer.applyEntityCollision(EntityPlayer, Entity)
Side.valueOf(String)
Class.getEnclosingMethodInfo(Class)
Style.getItalic(Style)
Locale.equals(Locale, Object)
ChunkProviderServer.saveChunks(ChunkProviderServer, boolean)
LongStream.mapToInt(LongStream, LongToIntFunction)
EntityPlayer.getTeam(EntityPlayer)
Font.applyTransform(AffineTransform, AttributeValues)
Snooper.startSnooper(Snooper)
DropTargetAutoScroller.updateLocation(DropTargetAutoScroller, Point)
EntityMinecart.getCollisionHandler()
Item.hitEntity(Item, ItemStack, EntityLivingBase, EntityLivingBase)
Promise.awaitUninterruptibly(Promise)
Component.getWidth(Component)
GuiToast.add(GuiToast, IToast)
OffsetDateTime.parse(CharSequence, DateTimeFormatter | CharSequence)
EntityPlayer.getCooldownPeriod(EntityPlayer)
ProtectionDomain.toString(ProtectionDomain)
URLClassPath.initLookupCache(URLClassPath, ClassLoader)
ImmutableMultimap.removeAll(ImmutableMultimap, Object | ImmutableMultimap, Object)
ZoneId.readObject(ZoneId, ObjectInputStream)
Potion.getLiquidColor(Potion)
Component.removeFocusListener(Component, FocusListener)
World.isBlockNormalCube(World, BlockPos, boolean)
World.setTotalWorldTime(World, long)
Container.list(Container, PrintWriter, int | Container, PrintStream, int)
Chunk.lambda$onUnload$1(Chunk, ClassInheritanceMultiMap)
FloatBuffer.duplicate(FloatBuffer)
WorldServer.getAdvancementManager(WorldServer)
ChannelPipeline.lastContext(ChannelPipeline)
NetHandlerPlayClient.handlePlayerListItem(NetHandlerPlayClient, SPacketPlayerListItem)
Vec3d.add(Vec3d, double, double, double | Vec3d, Vec3d)
List.lastIndexOf(List, Object)
LocalDateTime.plusHours(LocalDateTime, long)
MemberName.hashCode(MemberName)
Village.getNumVillageDoors(Village)
Thread.setContextClassLoader(Thread, ClassLoader)
ChronoLocalDateTime.isAfter(ChronoLocalDateTime, ChronoLocalDateTime)
LocalDate.getDayOfWeek(LocalDate)
TempCategory.values()
AttributeKey.valueOf(String | Class, String)
Entity.getCollisionBorderSize(Entity)
Integer.parseInt(String | String, int)
MethodType.ptypes(MethodType)
Promise.tryFailure(Promise, Throwable)
AccessibleTable.isAccessibleColumnSelected(AccessibleTable, int)
MobSpawnerBaseLogic.getCachedEntity(MobSpawnerBaseLogic)
ChunkCompileTaskGenerator.getDistanceSq(ChunkCompileTaskGenerator)
EntityPlayer.getPortalCooldown(EntityPlayer)
MethodType.makeImpl(Class, Class[], boolean)
BigDecimal.stripTrailingZeros(BigDecimal)
MinecraftServer.setWorldName(MinecraftServer, String)
ZoneOffsetTransition.getInstant(ZoneOffsetTransition)
BlockColors.registerBlockColorHandler(BlockColors, IBlockColor, Block[])
EnumFlowerColor.values()
ColorModel.getDataElement(ColorModel, int[], int | ColorModel, float[], int)
FileSystemProvider.createLink(FileSystemProvider, Path, Path)
MemberName.getReturnType(MemberName)
LocalDateTime.equals(LocalDateTime, Object)
Wrapper.detailString(Wrapper)
Extension.getValue(Extension)
Executable.specificToStringHeader(Executable, StringBuilder)
VertexFormat.hasPosition(VertexFormat)
Item.setHasSubtypes(Item, boolean)
EntityLivingBase.collideWithEntity(EntityLivingBase, Entity)
Transferable.getTransferDataFlavors(Transferable)
Component.isFocusable(Component)
ChronoLocalDate.equals(ChronoLocalDate, Object)
MemberName.getFactory()
Stream.limit(Stream, long)
Scoreboard.getOrCreateScore(Scoreboard, String, ScoreObjective)
ItemStack.getItemFrame(ItemStack)
ShortBuffer.hashCode(ShortBuffer)
CompositeByteBuf.access$100(CompositeByteBuf)
Image.getAccelerationPriority(Image)
Window.reshape(Window, int, int, int, int)
ByteBuf.getInt(ByteBuf, int)
JsonReader.skipUnquotedValue(JsonReader)
SeekableByteChannel.write(SeekableByteChannel, ByteBuffer)
ReferenceCounted.touch(ReferenceCounted, Object | ReferenceCounted)
Entity.getSplashSound(Entity)
WorldInfo.access$500(WorldInfo)
Executable.toGenericString(Executable)
DragGestureEvent.iterator(DragGestureEvent)
NetHandlerPlayClient.getGameProfile(NetHandlerPlayClient)
BigInteger.equals(BigInteger, Object)
EntityPlayerMP.sendWindowProperty(EntityPlayerMP, Container, int, int)
World.lambda$updateEntities$0(TileEntity)
Class.getDeclaredMethods(Class)
LocaleExtensions.isValidKey(char)
FontMetrics.getStringBounds(FontMetrics, char[], int, int, Graphics | FontMetrics, String, int, int, Graphics | FontMetrics, CharacterIterator, int, int, Graphics | FontMetrics, String, Graphics)
PaintEvent.paramString(PaintEvent)
NetworkSystem.terminateEndpoints(NetworkSystem)
EntityLivingBase.renderBrokenItemStack(EntityLivingBase, ItemStack)
EntityPlayerMP.dismountRidingEntity(EntityPlayerMP)
NetHandlerPlayClient.handleDestroyEntities(NetHandlerPlayClient, SPacketDestroyEntities)
Class.casAnnotationType(Class, AnnotationType, AnnotationType)
EntityLiving.clearLeashed(EntityLiving, boolean, boolean)
Minecraft.freeMemory(Minecraft)
ReferenceCounted.refCnt(ReferenceCounted)
ZoneOffset.write(ZoneOffset, DataOutput)
WorldBorder.getTargetSize(WorldBorder)
LocalDateTime.getYear(LocalDateTime)
ByteBuf.writeMediumLE(ByteBuf, int)
FrameTimer.parseIndex(FrameTimer, int)
Entity.getDisplayName(Entity)
Dialog.getAccessibleContext(Dialog)
Long.compareUnsigned(long, long)
CriterionProgress.getObtained(CriterionProgress)
JsonReader.isLiteral(JsonReader, char)
Date.readObject(Date, ObjectInputStream)
ConstantPool.getMethodAtIfLoaded0(ConstantPool, Object, int)
DragSourceContext.removeDragSourceListener(DragSourceContext, DragSourceListener)
EntityBodyHelper.computeAngleWithBound(EntityBodyHelper, float, float, float)
ShortBuffer.compare(short, short)
NBTTagCompound.getSize(NBTTagCompound)
Block.addHitEffects(Block, IBlockState, World, RayTraceResult, ParticleManager)
Window.dispatchMouseWheelToAncestor(Window, MouseWheelEvent)
Integer.parseUnsignedInt(String, int | String)
OffsetDateTime.getMinute(OffsetDateTime)
Chunk.logCascadingWorldGeneration(Chunk)
ZoneOffset.totalSeconds(int, int, int)
BigInteger.add(int[], int[] | BigInteger, BigInteger | int[], long | BigInteger, long)
Window.access$000(Window)
ImmutableMap.values(ImmutableMap | ImmutableMap)
AdvancementRewards.toString(AdvancementRewards)
GuiScreen.getItemToolTip(GuiScreen, ItemStack)
ItemStack.getTextComponent(ItemStack)
LambdaFormBuffer.setNames(LambdaFormBuffer, Name[])
ArrayList.toArray(ArrayList | ArrayList, Object[])
ResourcePackRepository.access$400(ResourcePackRepository, File)
Promise.setFailure(Promise, Throwable)
Multimap.remove(Multimap, Object, Object)
Toolkit.getPrintJob(Toolkit, Frame, String, Properties | Toolkit, Frame, String, JobAttributes, PageAttributes)
AxisAlignedBB.hashCode(AxisAlignedBB)
Window.setBackground(Window, Color)
AxisAlignedBB.setMaxY(AxisAlignedBB, double)
ChannelConfig.setWriteSpinCount(ChannelConfig, int)
BigInteger.abs(BigInteger)
ColorModel.getComponents(ColorModel, int, int[], int | ColorModel, Object, int[], int)
InputEvent.access$000()
Enum.readObjectNoData(Enum)
Builder.ensureCapacity(Builder, int)
SoundManager.stopAllSounds(SoundManager)
EntityLivingBase.canBreatheUnderwater(EntityLivingBase)
Multiset.remove(Multiset, Object | Multiset, Object, int)
Multiset.setCount(Multiset, Object, int | Multiset, Object, int, int)
Class.getCanonicalName(Class)
JsonElement.getAsShort(JsonElement)
Wrapper.forWrapperType(Class)
String.toUpperCase(String | String, Locale)
Class.arrayContentsEq(Object[], Object[])
RenderGlobal.onEntityAdded(RenderGlobal, Entity)
EnumUsage.postDraw(EnumUsage, VertexFormat, int, int, ByteBuffer)
Container.getFocusTraversalKeys(Container, int)
Executable.getAnnotatedReturnType0(Executable, Type)
Instant.getLong(Instant, TemporalField)
ServerStatusResponse.getJson(ServerStatusResponse)
FieldAccessor.setInt(FieldAccessor, Object, int)
NamedFunction.parameterType(NamedFunction, int)
ByteBuf.writeFloat(ByteBuf, float)
Vector.readObject(Vector, ObjectInputStream)
MethodTypeForm.parameterSlotCount(MethodTypeForm)
ScoreObjective.setRenderType(ScoreObjective, EnumRenderType)
Image.getProperty(Image, String, ImageObserver)
World.markTileEntitiesInChunkForRemoval(World, Chunk)
ShortBuffer.allocate(int)
URLClassPath.access$200(URLClassPath)
Component.lightweightPaint(Component, Graphics)
CreativeTabs.setBackgroundImageName(CreativeTabs, String)
ItemStack.setTagInfo(ItemStack, String, NBTBase)
ImmutableTable.containsValue(ImmutableTable, Object)
ChronoLocalDate.toString(ChronoLocalDate)
PotionEffect.equals(PotionEffect, Object)
ChronoLocalDate.from(TemporalAccessor)
World.getBiomeForCoordsBody(World, BlockPos)
EntityPlayer.sendPlayerAbilities(EntityPlayer)
AccessControlContext.checkPermission(AccessControlContext, Permission)
ResourcePackRepository.getResourcePack(ResourcePackRepository, File)
InetAddress.getHostAddress(InetAddress)
ChannelHandlerContext.fireExceptionCaught(ChannelHandlerContext, Throwable)
Component.countHierarchyMembers(Component)
URLConnection.getIfModifiedSince(URLConnection)
MemberName.isSetter(MemberName)
MinecraftServer.addServerInfoToCrashReport(MinecraftServer, CrashReport)
BufferStrategy.contentsRestored(BufferStrategy)
AttributeValues.getFamily(AttributeValues)
ItemStack.doesSneakBypassUse(ItemStack, IBlockAccess, BlockPos, EntityPlayer)
Block.getComparatorInputOverride(Block, IBlockState, World, BlockPos)
TextHitInfo.leading(int)
WorldType.getChunkGenerator(WorldType, World, String)
AWTEvent.dispatched(AWTEvent)
Minecraft.getFramebuffer(Minecraft)
WorldInfo.isVersionSnapshot(WorldInfo)
RenderGlobal.updateClouds(RenderGlobal)
Component.mixOnZOrderChanging(Component, int, int)
Component.getFont_NoClientCode(Component)
Integer.numberOfLeadingZeros(int)
Package.getSystemPackages()
SampleModel.setPixel(SampleModel, int, int, int[], DataBuffer | SampleModel, int, int, float[], DataBuffer | SampleModel, int, int, double[], DataBuffer)
NetworkPlayerInfo.getPlayerTeam(NetworkPlayerInfo)
NetHandlerPlayClient.handleSignEditorOpen(NetHandlerPlayClient, SPacketSignEditorOpen)
Constructor.getGenericInfo(Constructor)
EntityLiving.updateEntityActionState(EntityLiving)
LangReflectAccess.copyField(LangReflectAccess, Field)
InetAddress.getByAddress(String, byte[] | byte[])
PotionEffect.getCurativeItems(PotionEffect)
NBTTagCompound.getByte(NBTTagCompound, String)
SortedSet.spliterator(SortedSet)
Method.getExceptionTypes(Method)
ColorSpace.isCS_sRGB(ColorSpace)
Chunk.setBiomeArray(Chunk, byte[])
Entity.entityDropItem(Entity, ItemStack, float)
ListenerList.register(ListenerList, int, EventPriority, IEventListener)
ItemTransformVec3f.apply(ItemTransformVec3f, Optional)
Member.getDeclaringClass(Member)
AttributedCharacterIterator.getAttribute(AttributedCharacterIterator, Attribute)
World.isWater(World, BlockPos)
EntityPlayer.addPrefix(EntityPlayer, ITextComponent)
PlatformLogger.redirectToJavaLoggerProxy(PlatformLogger)
Component.adjustListeningChildrenOnParent(Component, long, int)
ISaveFormat.getFile(ISaveFormat, String, String)
Package.getSystemPackage0(String)
ChannelPipeline.addBefore(ChannelPipeline, String, String, ChannelHandler | ChannelPipeline, EventExecutorGroup, String, String, ChannelHandler)
Font2D.updateLastStrikeRef(Font2D, FontStrike)
TextureAtlasSprite.getInterpolatedU(TextureAtlasSprite, double)
EntityPlayerMP.addStat(EntityPlayerMP, StatBase, int)
TextureAtlasSprite.getInterpolatedV(TextureAtlasSprite, double)
OffsetDateTime.query(OffsetDateTime, TemporalQuery)
World.removeEntityDangerously(World, Entity)
ChronoLocalDateTime.toString(ChronoLocalDateTime)
Attribute.key(Attribute)
DoubleStream.forEach(DoubleStream, DoubleConsumer)
Component.bounds(Component)
Period.parseNumber(CharSequence, String, int)
DataBuffer.setElem(DataBuffer, int, int, int | DataBuffer, int, int)
URLConnection.getHeaderFieldDate(URLConnection, String, long)
ByteBuf.setLong(ByteBuf, int, long)
Lookup.getDirectMethodNoRestrict(Lookup, byte, Class, MemberName, Class)
PlayerAdvancements.unregisterListeners(PlayerAdvancements, Advancement)
PlayerProfileCache.load(PlayerProfileCache)
Dialog.initIDs()
StateImplementation.getBlockHardness(StateImplementation, World, BlockPos)
Block.getPickBlock(Block, IBlockState, RayTraceResult, World, BlockPos, EntityPlayer)
DisplayInfo.deserializeIcon(JsonObject)
EntityLivingBase.canDropLoot(EntityLivingBase)
Period.getDays(Period)
Material.isReplaceable(Material)
PathNodeType.getPriority(PathNodeType)
EntityTracker.sendToTrackingAndSelf(EntityTracker, Entity, Packet)
EntityPlayerMP.onNewPotionEffect(EntityPlayerMP, PotionEffect)
JsonPrimitive.getAsLong(JsonPrimitive)
Entity.onAddedToWorld(Entity)
ThreadGroup.isDaemon(ThreadGroup)
Container.clearMostRecentFocusOwnerOnHide(Container)
EntityItem.setThrower(EntityItem, String)
Shape.getPathIterator(Shape, AffineTransform, double | Shape, AffineTransform)
Stream.generate(Supplier)
Minecraft.getResourcePackRepository(Minecraft)
NetworkPlayerInfo.getLocationElytra(NetworkPlayerInfo)
ShaderLoader.attachShader(ShaderLoader, ShaderManager)
LongStream.range(long, long)
Event.metaDown(Event)
LambdaFormBuffer.replaceParameterByCopy(LambdaFormBuffer, int, int)
CompositeByteBuf.component(CompositeByteBuf, int)
IResource.getMetadata(IResource, String)
ImmutableTable.cellSpliterator(ImmutableTable)
GuiButton.mousePressed(GuiButton, Minecraft, int, int)
Image.getCapabilities(Image, GraphicsConfiguration)
DragSource.addDragSourceMotionListener(DragSource, DragSourceMotionListener)
Map.forEach(Map, BiConsumer)
NamedFunction.invoke_L_V(MethodHandle, Object[])
World.sendBlockBreakProgress(World, int, BlockPos, int)
IntegratedServer.stopServer(IntegratedServer)
Optional.asSet(Optional)
Logger.always(Logger)
Font2D.getItalicAngle(Font2D, Font, AffineTransform, Object, Object)
NamedFunction.invoke_L_L(MethodHandle, Object[])
DamageSource.canHarmInCreative(DamageSource)
Region.isEmpty(Region)
EntityRenderer.onResourceManagerReload(EntityRenderer, IResourceManager)
Color.getRed(Color)
AttributeModifier.setSaved(AttributeModifier, boolean)
GlyphVector.getGlyphCodes(GlyphVector, int, int, int[])
ModelManager.getModel(ModelManager, ModelResourceLocation)
GenericsFactory.makeShort(GenericsFactory)
Item.onBlockDestroyed(Item, ItemStack, World, IBlockState, BlockPos, EntityLivingBase)
Instance.updateMapTexture(Instance)
Color.HSBtoRGB(float, float, float)
DragSource.writeObject(DragSource, ObjectOutputStream)
Tutorial.onMouseHover(Tutorial, WorldClient, RayTraceResult)
ChronoLocalDateTime.getChronology(ChronoLocalDateTime)
NetworkManager.sendPacket(NetworkManager, Packet | NetworkManager, Packet, GenericFutureListener, GenericFutureListener[])
MethodTypeSignature.getFormalTypeParameters(MethodTypeSignature)
BigInteger.isProbablePrime(BigInteger, int)
Graphics.getClipRect(Graphics)
Chronology.prolepticYear(Chronology, Era, int)
NumericShaper.checkParams(NumericShaper, char[], int, int)
GlyphMetrics.isComponent(GlyphMetrics)
OptionalInt.hashCode(OptionalInt)
Date.hashCode(Date)
SoundManager.getClampedVolume(SoundManager, ISound)
MethodType.changeReturnType(MethodType, Class)
Entity.updateFallState(Entity, double, boolean, IBlockState, BlockPos)
ThreadGroup.remove(ThreadGroup, ThreadGroup | ThreadGroup, Thread)
SoundHandler.pauseSounds(SoundHandler)
ServerStatusResponse.setFavicon(ServerStatusResponse, String)
Component.processHierarchyEvent(Component, HierarchyEvent)
EntityRenderer.getShaderGroup(EntityRenderer)
Container.eventEnabled(Container, AWTEvent)
ChannelConfig.setWriteBufferLowWaterMark(ChannelConfig, int)
AccessibleStateSet.add(AccessibleStateSet, AccessibleState)
LootPool.access$100(LootPool)
Minecraft.getTextureMapBlocks(Minecraft)
Window.updateWindow(Window)
Side.isServer(Side)
Window.writeObject(Window, ObjectOutputStream)
List.removeAll(List, Collection)
HoverEvent.hashCode(HoverEvent)
TileEntity.register(String, Class)
List.addAll(List, Collection | List, int, Collection)
EntityPlayerMP.changeDimension(EntityPlayerMP, int, ITeleporter)
Multiset.count(Multiset, Object)
Component.getBounds(Component | Component, Rectangle)
Level.clone(Level | Level)
LanguageManager.parseLanguageMetadata(LanguageManager, List)
CharBuffer.chars(CharBuffer)
PlayerChunkMapEntry.access$100(PlayerChunkMapEntry)
WorldGenAbstractTree.isReplaceable(WorldGenAbstractTree, World, BlockPos)
BiomeProvider.isFixedBiome(BiomeProvider)
World.playMoodSoundAndCheckLight(World, int, int, Chunk)
Window.getFocusTraversalKeys(Window, int)
Insets.initIDs()
EntityLivingBase.setPositionAndRotationDirect(EntityLivingBase, double, double, double, float, float, int, boolean)
Duration.toMillis(Duration)
ChunkProviderServer.loadChunkFromFile(ChunkProviderServer, int, int)
Region.getLoX(Region)
Region.getLoY(Region)
FrameTimer.addFrame(FrameTimer, long)
ThreadGroup.enumerate(ThreadGroup, Thread[], boolean | ThreadGroup, ThreadGroup[], int, boolean | ThreadGroup, ThreadGroup[] | ThreadGroup, Thread[], int, boolean | ThreadGroup, ThreadGroup[], boolean | ThreadGroup, Thread[])
RenderGlobal.drawBlockDamageTexture(RenderGlobal, Tessellator, BufferBuilder, Entity, float)
AccessibleStateSet.addAll(AccessibleStateSet, AccessibleState[])
MethodType.parametersAreViewableAs(MethodType, MethodType, boolean)
FileStore.supportsFileAttributeView(FileStore, String | FileStore, Class)
ScorePlayerTeam.getSeeFriendlyInvisiblesEnabled(ScorePlayerTeam)
ZoneOffset.validate(int, int, int)
Long.toUnsignedBigInteger(long)
EntityItem.makeFakeItem(EntityItem)
Graphics.getFontMetrics(Graphics | Graphics, Font)
ChunkCache.getLightForExt(ChunkCache, EnumSkyBlock, BlockPos)
BigDecimal.scaledTenPow(int, int, int)
Component.addPropertyChangeListener(Component, PropertyChangeListener | Component, String, PropertyChangeListener)
Multiset.forEach(Multiset, Consumer)
Chronology.eras(Chronology)
WorldInfo.getSeed(WorldInfo)
LocalDateTime.query(LocalDateTime, TemporalQuery)
Container.findComponentAtImpl(Container, int, int, boolean)
AccessibleTable.isAccessibleRowSelected(AccessibleTable, int)
TextFormatting.isColor(TextFormatting)
CharToGlyphMapper.getMissingGlyphCode(CharToGlyphMapper)
Window.toFront(Window)
EventDispatchThread.pumpEvents(EventDispatchThread, Conditional | EventDispatchThread, int, Conditional)
IsoChronology.prolepticYear(IsoChronology, Era, int)
Component.hasFocus(Component)
OffsetDateTime.now( | ZoneId | Clock)
Integer.formatUnsignedInt(int, int, char[], int, int)
EntityPlayer.canAttackPlayer(EntityPlayer, EntityPlayer)
Item.getForgeRarity(Item, ItemStack)
Lookup.getDirectFieldCommon(Lookup, byte, Class, MemberName, boolean)
MemberName.asNormalOriginal(MemberName)
RenderGlobal.getRenderedChunks(RenderGlobal)
AccessibleContext.getAccessibleRelationSet(AccessibleContext)
Excluder.isValidVersion(Excluder, Since, Until)
ArrayList.batchRemove(ArrayList, Collection, boolean)
Boolean.hashCode(Boolean | boolean)
ListIterator.remove(ListIterator)
UserListIPBans.addressToString(UserListIPBans, SocketAddress)
ByteBuf.readUnsignedMedium(ByteBuf)
AccessibleContext.getAccessibleName(AccessibleContext)
Constructor.getSlot(Constructor)
EntityMinecart.getDamage(EntityMinecart)
DataBuffer.getDataType(DataBuffer)
JsonObject.size(JsonObject)
Event.toString(Event)
FileTime.scale(long, long, long)
Entity.ignoreItemEntityData(Entity)
Entity.setSprinting(Entity, boolean)
ImmutableTable.put(ImmutableTable, Object, Object, Object)
Rectangle.toString(Rectangle)
Control.toBundleName(Control, String, Locale)
AccessibleContext.addPropertyChangeListener(AccessibleContext, PropertyChangeListener)
AccessibleTable.setAccessibleSummary(AccessibleTable, Accessible)
CrashReportCategory.addBlockInfo(CrashReportCategory, BlockPos, Block, int | CrashReportCategory, BlockPos, IBlockState)
JsonElement.getAsLong(JsonElement)
ColorModel.getLinearRGB16TosRGB8LUT()
EntityPlayerMP.onItemUseFinish(EntityPlayerMP)
Score.setLocked(Score, boolean)
Executable.getModifiers(Executable)
Class.getDeclaredMethod(Class, String, Class[])
NetHandlerPlayClient.validateResourcePackUrl(NetHandlerPlayClient, String)
ImmutableMultiset.hashCode(ImmutableMultiset)
WorldType.setCanBeCreated(WorldType, boolean)
Random.readObject(Random, ObjectInputStream)
FieldNamingStrategy.translateName(FieldNamingStrategy, Field)
NamedFunction.isConstantZero(NamedFunction)
LambdaForm.fixDebugName(String)
OffsetTime.plusSeconds(OffsetTime, long)
ZonedDateTime.getMonth(ZonedDateTime)
WorldSavedData.setDirty(WorldSavedData, boolean)
DoubleSummaryStatistics.sumWithCompensation(DoubleSummaryStatistics, double)
ImmutableTable.putAll(ImmutableTable, Table)
ShaderLoader.getShaderFilename(ShaderLoader)
BufferedImage.getWritableTile(BufferedImage, int, int)
EntityLivingBase.getActiveItemStack(EntityLivingBase)
Handle.lastBytesRead(Handle, int | Handle)
FieldAccessor.setBoolean(FieldAccessor, Object, boolean)
StringBuilder.appendCodePoint(StringBuilder, int | StringBuilder, int)
FontStrike.getGlyphImageBounds(FontStrike, int, Float, Rectangle)
Axis.getName(Axis)
LambdaFormEditor.collectArgumentArrayForm(LambdaFormEditor, int, MethodHandle)
ISaveHandler.getChunkLoader(ISaveHandler, WorldProvider)
LambdaForm.access$200()
BigInteger.trustedStripLeadingZeroInts(int[])
Class.argumentTypesToString(Class[])
ItemRenderer.updateEquippedItem(ItemRenderer)
StatisticsManagerServer.getDirty(StatisticsManagerServer)
Hashtable.putIfAbsent(Hashtable, Object, Object)
String.compareTo(String, Object | String, String)
FileSystem.supportedFileAttributeViews(FileSystem)
PathNavigate.isDirectPathBetweenPoints(PathNavigate, Vec3d, Vec3d, int, int, int)
ComponentPeer.setEnabled(ComponentPeer, boolean)
ArrayList.rangeCheckForAdd(ArrayList, int)
RenderItem.renderItemIntoGUI(RenderItem, ItemStack, int, int)
BiomeDecorator.generateOres(BiomeDecorator, World, Random)
CommandResultStats.setCommandStatForSender(CommandResultStats, MinecraftServer, ICommandSender, Type, int)
DragSourceContext.dropActionChanged(DragSourceContext, DragSourceDragEvent)
RenderLivingBase.interpolateRotation(RenderLivingBase, float, float, float)
ArrayList.ensureExplicitCapacity(ArrayList, int)
ItemStack.canPlaceOn(ItemStack, Block)
Duration.minusMinutes(Duration, long)
ColorModel.toString(ColorModel)
TextureMap.setMipmapLevels(TextureMap, int)
ImmutableMultiset.entrySet(ImmutableMultiset | ImmutableMultiset)
Field.getByte(Field, Object)
AttributeValues.defineAll(AttributeValues, int)
StringBuilder.length(StringBuilder)
Attributes.hashCode(Attributes)
Version.getProtocol(Version)
Teleporter.removeStalePortalLocations(Teleporter, long)
ComponentPeer.getGraphicsConfiguration(ComponentPeer)
Chunk.getHeight(Chunk, BlockPos)
RenderGlobal.spawnParticle(RenderGlobal, int, boolean, double, double, double, double, double, double, int[] | RenderGlobal, EnumParticleTypes, double, double, double, double, double, double, int[] | RenderGlobal, int, boolean, boolean, double, double, double, double, double, double, int[])
Properties.storeToXML(Properties, OutputStream, String | Properties, OutputStream, String, String)
ByteBuffer.get(ByteBuffer, byte[] | ByteBuffer, byte[], int, int | ByteBuffer | ByteBuffer, int)
MethodType.generic(MethodType)
StateImplementation.hashCode(StateImplementation)
CharBuffer.allocate(int)
FontRenderer.readFontTexture(FontRenderer)
ByteBuffer.equals(byte, byte | ByteBuffer, Object)
LambdaForm.traceInterpreter(String, Object | String, Object, Object[])
LocalDateTime.getMonth(LocalDateTime)
PathPoint.equals(PathPoint, Object)
BigInteger.and(BigInteger, BigInteger)
MethodHandleInfo.getReferenceKind(MethodHandleInfo)
Collector.supplier(Collector)
LocalTime.until(LocalTime, Temporal, TemporalUnit)
Biome.getWaterColor(Biome)
TextureAtlasSprite.toString(TextureAtlasSprite)
WildcardType.getUpperBounds(WildcardType)
Component.processHierarchyBoundsEvent(Component, HierarchyEvent)
Block.getValidRotations(Block, World, BlockPos)
Scoreboard.createTeam(Scoreboard, String)
SampleModel.getSampleSize(SampleModel, int | SampleModel)
TextureAtlasSprite.setFramesTextureData(TextureAtlasSprite, List)
URLConnection.skipForward(InputStream, long)
BigDecimal.equals(BigDecimal, Object)
BasicFileAttributes.size(BasicFileAttributes)
SoundEvent.registerSound(String)
Range.indexToRange(int)
Wrapper.wrap(Wrapper, Object | Wrapper, int)
Name.paramString(Name)
Spliterator.characteristics(Spliterator)
CodeSource.hashCode(CodeSource)
EntityEquipmentSlot.valueOf(String)
Instant.range(Instant, TemporalField)
ProtectionDomain.getPrincipals(ProtectionDomain)
SoundEventAccessor.getLocation(SoundEventAccessor)
ISaveFormat.getName(ISaveFormat)
Calendar.getAvailableLocales()
Container.removeContainerListener(Container, ContainerListener)
RenderItem.registerBlock(RenderItem, Block, int, String | RenderItem, Block, String)
RenderManager.renderEntityStatic(RenderManager, Entity, float, boolean)
LocalDateTime.getDayOfWeek(LocalDateTime)
Font.applyStyle(int, AttributeValues)
LocalTime.with(LocalTime, TemporalField, long | LocalTime, TemporalField, long | LocalTime, TemporalAdjuster | LocalTime, TemporalAdjuster)
Item.onHorseArmorTick(Item, World, EntityLiving, ItemStack)
Image.getHeight(Image, ImageObserver)
MethodType.parameterSlotDepth(MethodType, int)
URLConnection.getDoOutput(URLConnection)
Date.getTime(Date)
FileTime.toExcessNanos(FileTime, long)
NetworkPlayerInfo.setLastHealth(NetworkPlayerInfo, int)
LootTable.freeze(LootTable)
WorldServer.getPlayerChunkMap(WorldServer)
ScrollbarPeer.setValues(ScrollbarPeer, int, int, int, int)
Date.setMonth(Date, int)
Multimap.keys(Multimap)
MethodType.isViewableAs(MethodType, MethodType, boolean)
ReentrantLock.lock(ReentrantLock)
ItemStack.forgeInit(ItemStack)
BigInteger.mulAdd(int[], int[], int, int, int)
FontRenderer.renderUnicodeChar(FontRenderer, char, boolean)
ISound.getPitch(ISound)
TimeZone.observesDaylightTime(TimeZone)
EntityPlayerMP.setEntityActionState(EntityPlayerMP, float, float, boolean, boolean)
EventExecutor.parent(EventExecutor)
Raster.createWritableRaster(SampleModel, Point | SampleModel, DataBuffer, Point)
WorldGenerator.setDecorationDefaults(WorldGenerator)
WorldInfo.access$600(WorldInfo)
OfLong.tryAdvance(OfLong, LongConsumer | OfLong, Object | OfLong, Consumer)
EntityPlayer.isCreative(EntityPlayer)
PlayerChunkMapEntry.sendPacket(PlayerChunkMapEntry, Packet)
String.endsWith(String, String)
ChannelPipeline.get(ChannelPipeline, String | ChannelPipeline, Class)
ItemStack.getItem(ItemStack)
BufferedImage.setRGB(BufferedImage, int, int, int, int, int[], int, int | BufferedImage, int, int, int)
ArrayList.readObject(ArrayList, ObjectInputStream)
ColorModel.createCompatibleSampleModel(ColorModel, int, int)
BigInteger.compareMagnitude(BigInteger, long | BigInteger, BigInteger)
ImmutableMap.equals(ImmutableMap, Object)
Unsafe.localAddress(Unsafe)
InventoryEnderChest.openInventory(InventoryEnderChest, EntityPlayer)
Entity.serializeNBT(Entity | Entity)
EnumPushReaction.values()
Vector3f.equals(Vector3f, Object)
LocalDate.atStartOfDay(LocalDate | LocalDate, ZoneId)
Window.setClientSize(Window, int, int)
BigInteger.checkRange(BigInteger)
ClassLoader.getResourceAsStream(ClassLoader, String)
ByteBuffer.asDoubleBuffer(ByteBuffer)
Minecraft.setWindowIcon(Minecraft)
Component.addKeyListener(Component, KeyListener)
ISound.getZPosF(ISound)
MapData.calculateMapCenter(MapData, double, double, int)
AdvancementProgress.grantCriterion(AdvancementProgress, String)
AdvancementList.loadAdvancements(AdvancementList, Map)
ModelRenderer.compileDisplayList(ModelRenderer, float)
TextureManager.bindTexture(TextureManager, ResourceLocation)
LambdaForm.isValidSignature(String)
EntityPlayer.onUpdate(EntityPlayer)
Wrapper.isIntegral(Wrapper)
URL.getRef(URL)
ImmutableMultiset.builder()
RenderManager.setRenderPosition(RenderManager, double, double, double)
ArrayList.sort(ArrayList, Comparator)
LootPool.isFrozen(LootPool)
URLClassPath.access$300(URLClassPath)
NibbleArray.getFromIndex(NibbleArray, int)
Boolean.compare(boolean, boolean)
FileSystemProvider.getFileAttributeView(FileSystemProvider, Path, Class, LinkOption[])
ItemOverrideList.getOverrides(ItemOverrideList)
StateImplementation.getBlockFaceShape(StateImplementation, IBlockAccess, BlockPos, EnumFacing)
MethodTypeForm.setCachedLambdaForm(MethodTypeForm, int, LambdaForm)
CompiledChunk.getState(CompiledChunk)
StatisticsManagerServer.sendStats(StatisticsManagerServer, EntityPlayerMP)
Block.doesSideBlockRendering(Block, IBlockState, IBlockAccess, BlockPos, EnumFacing)
Font.isPlain(Font)
Minecraft.getTickLength(Minecraft)
CollisionRule.valueOf(String)
ByteBuffer.putFloat(ByteBuffer, float | ByteBuffer, int, float)
BoundMethodHandle.fieldCount(BoundMethodHandle)
World.getLightFromNeighbors(World, BlockPos)
EntityPlayer.getAIMoveSpeed(EntityPlayer)
Entity.outOfWorld(Entity)
LocalDateTime.parse(CharSequence | CharSequence, DateTimeFormatter)
Period.toString(Period)
IntBuffer.asReadOnlyBuffer(IntBuffer)
Logger.atLevel(Logger, Level)
MinecraftServer.isCommandBlockEnabled(MinecraftServer)
Chunk.getHeightMap(Chunk)
Constructor.getParameterAnnotations(Constructor)
Shader.addAuxFramebuffer(Shader, String, Object, int, int)
Toolkit.createChoice(Toolkit, Choice)
OfPrimitive.tryAdvance(OfPrimitive, Object)
FileSystem.getPathMatcher(FileSystem, String)
NamedFunction.checkArgumentTypes(Object[], MethodType)
Chunk.addEntity(Chunk, Entity)
World.getLoadedEntityList(World)
Class.isEnum(Class)
LocalTime.minusHours(LocalTime, long)
AttributeValues.is16Hashtable(Hashtable)
DoubleSummaryStatistics.getMax(DoubleSummaryStatistics)
Explosion.getPlayerKnockbackMap(Explosion)
Duration.minusSeconds(Duration, long)
JsonReader.peekKeyword(JsonReader)
ConstantPool.getFieldAtIfLoaded0(ConstantPool, Object, int)
EntityLivingBase.attackEntityAsMob(EntityLivingBase, Entity)
PlatformLogger.fine(PlatformLogger, String | PlatformLogger, String, Object[] | PlatformLogger, String, Throwable)
Window.getOwnerlessWindows()
Invokers.setCachedInvoker(Invokers, int, MethodHandle)
WorldInfo.isInitialized(WorldInfo)
LongBuffer.duplicate(LongBuffer)
OutputStream.flush(OutputStream)
Item.setNoRepair(Item)
ExtendedBlockStorage.setBlockLight(ExtendedBlockStorage, int, int, int, int | ExtendedBlockStorage, NibbleArray)
TextHitInfo.getCharIndex(TextHitInfo)
Raster.getBounds(Raster)
EntityMinecart.setCurrentCartSpeedCapOnRail(EntityMinecart, float)
ImmutableMultimap.forEach(ImmutableMultimap, BiConsumer)
ImmutableMultimap.inverse(ImmutableMultimap)
ResourceBundle.getBaseBundleName(ResourceBundle)
PlayerList.onTick(PlayerList)
AccessControlContext.equalContext(AccessControlContext, AccessControlContext)
MethodHandle.updateForm(MethodHandle, LambdaForm)
JsonElement.getAsJsonObject(JsonElement)
IItemPropertyGetter.apply(IItemPropertyGetter, ItemStack, World, EntityLivingBase)
DoubleBuffer.get(DoubleBuffer, double[], int, int | DoubleBuffer, double[] | DoubleBuffer, int | DoubleBuffer)
Component.getHWPeerAboveMe(Component)
Constructor.newInstance(Constructor, Object[])
ISound.getRepeatDelay(ISound)
StrikeMetrics.getAscent(StrikeMetrics)
CodeSource.getCertificates(CodeSource)
JsonPrimitive.deepCopy(JsonPrimitive | JsonPrimitive)
OffsetDateTime.atZoneSameInstant(OffsetDateTime, ZoneId)
Manifest.hashCode(Manifest)
ResourcePackRepository.access$500()
WorldBorder.getStatus(WorldBorder)
MinecraftServer.setResourcePackFromWorld(MinecraftServer, String, ISaveHandler)
Window.initIDs()
EnumFacing.valueOf(String)
Potion.isBadEffect(Potion)
Vector.listIterator(Vector, int | Vector)
UserListIPBansEntry.getIPFromJson(JsonObject)
OptionalInt.orElseGet(OptionalInt, IntSupplier)
Wrapper.wrapperType(Wrapper | Wrapper, Class)
Toolkit.createLabel(Toolkit, Label)
Biome.getEnableSnow(Biome)
EnumFacing.getZOffset(EnumFacing)
MethodTypeForm.longPrimitiveReturnCount(MethodTypeForm)
Component.getIgnoreRepaint(Component)
EntityLivingBase.getArmorInventoryList(EntityLivingBase)
Minecraft.getIntegratedServer(Minecraft)
GenericDeclaration.getTypeParameters(GenericDeclaration)
Minecraft.drawSplashScreen(Minecraft, TextureManager)
Block.getRenderType(Block, IBlockState)
BigInteger.flipBit(BigInteger, int)
Window.setLocationRelativeTo(Window, Component)
Resource.getBytes(Resource)
ThreadGroup.addUnstarted(ThreadGroup)
EntityLivingBase.readEntityFromNBT(EntityLivingBase, NBTTagCompound)
CompositeByteBuf.getByte(CompositeByteBuf, int)
LambdaFormBuffer.insertParameter(LambdaFormBuffer, int, Name)
GuiScreen.handleKeyboardInput(GuiScreen)
NetworkManager.dispatchPacket(NetworkManager, Packet, GenericFutureListener[])
LocalTime.getHour(LocalTime)
PlayerChunkMapEntry.update(PlayerChunkMapEntry)
Session.setProperties(Session, PropertyMap)
ISaveFormat.getSaveLoader(ISaveFormat, String, boolean)
ParameterizedType.getOwnerType(ParameterizedType)
Item.getTranslationKey(Item, ItemStack | Item)
PlayerList.getBannedPlayers(PlayerList)
ItemStack.useItemRightClick(ItemStack, World, EntityPlayer, EnumHand)
WritableRaster.setRect(WritableRaster, int, int, Raster | WritableRaster, Raster)
IntBuffer.slice(IntBuffer)
IChunkProvider.provideChunk(IChunkProvider, int, int)
EnclosingMethodInfo.getName(EnclosingMethodInfo)
Region.setOutputArea(Region, int[] | Region, Rectangle)
Class.getGenericSuperclass(Class)
EntityMinecart.canTriggerWalking(EntityMinecart)
Component.transferFocusBackward(Component | Component, boolean)
AbstractStringBuilder.indexOf(AbstractStringBuilder, String | AbstractStringBuilder, String, int)
EntityPlayerMP.setGameType(EntityPlayerMP, GameType)
AttributeValues.setInputMethodUnderline(AttributeValues, int)
SoundManager.updateAllSounds(SoundManager)
Font.hashCode(Font)
ImmutableMultiset.contains(ImmutableMultiset, Object)
Locale.getDisplayLanguage(Locale, Locale | Locale)
LambdaFormBuffer.changeName(LambdaFormBuffer, int, Name)
NBTTagList.appendTag(NBTTagList, NBTBase)
EntityRenderer.drawNameplate(FontRenderer, String, float, float, float, int, float, float, boolean, boolean)
PathNavigate.getPathSearchRange(PathNavigate)
GuiButton.mouseReleased(GuiButton, int, int)
LootPool.access$000(LootPool)
ChannelConfig.getMaxMessagesPerRead(ChannelConfig)
Instant.isAfter(Instant, Instant)
Component.processMouseEvent(Component, MouseEvent)
ChannelPipeline.removeFirst(ChannelPipeline)
ChronoLocalDate.until(ChronoLocalDate, ChronoLocalDate | ChronoLocalDate, Temporal, TemporalUnit)
LocalDate.get0(LocalDate, TemporalField)
ISaveFormat.getSaveList(ISaveFormat)
AppContext.getAppContexts()
ImmutableList.indexOf(ImmutableList, Object)
Field.getTypeAnnotationBytes0(Field)
Block.hasTileEntity(Block, IBlockState | Block)
Minecraft.isFramerateLimitBelowMax(Minecraft)
BigDecimal.divRemNegativeLong(long, long)
PlayerChunkMapEntry.access$002(PlayerChunkMapEntry, Chunk)
OffsetDateTime.hashCode(OffsetDateTime)
Constructor.getParameterTypes(Constructor)
MemberName.isAbstract(MemberName)
MethodType.hashCode(MethodType)
Properties.writeComments(BufferedWriter, String)
ShaderManager.parseUniform(ShaderManager, JsonElement)
Color.getRGB(Color)
LocalDateTime.writeReplace(LocalDateTime)
BaseLocale.hashCode(BaseLocale)
Class.isPrimitive(Class)
Entity.getRecursivePassengers(Entity)
NBTTagList.getStringTagAt(NBTTagList, int)
NBTTagList.write(NBTTagList, DataOutput)
EntityPlayer.canHarvestBlock(EntityPlayer, IBlockState)
Component.getSiblingIndexBelow(Component)
EntityLivingBase.resetPotionEffectMetadata(EntityLivingBase)
ZoneRules.toString(ZoneRules)
Block.canCreatureSpawn(Block, IBlockState, IBlockAccess, BlockPos, SpawnPlacementType)
BlockModelRenderer.renderModelFlat(BlockModelRenderer, IBlockAccess, IBakedModel, IBlockState, BlockPos, BufferBuilder, boolean, long)
NetHandlerPlayClient.handleOpenWindow(NetHandlerPlayClient, SPacketOpenWindow)
OfDouble.forEachRemaining(OfDouble, DoubleConsumer | OfDouble, Consumer | OfDouble, Consumer | OfDouble, Object | OfDouble, DoubleConsumer | OfDouble, Object)
EventQueue.access$1000(EventQueue)
RenderChunk.setNeedsUpdate(RenderChunk, boolean)
UserListWhitelist.getObjectKey(UserListWhitelist, GameProfile | UserListWhitelist, Object)
AxisAlignedBB.isClosest(AxisAlignedBB, Vec3d, Vec3d, Vec3d)
ImmutableMultimap.hashCode(ImmutableMultimap)
AttributeValues.getInputMethodHighlight(AttributeValues)
World.getSkyColor(World, Entity, float)
SoundHandler.resumeSounds(SoundHandler)
JsonObject.getAsJsonArray(JsonObject, String)
AccessibleComponent.setEnabled(AccessibleComponent, boolean)
Vector3f.set(Vector3f, float, float, float | Vector3f, ReadableVector3f | Vector3f, float, float)
PlayerProfileCache.lookupProfile(GameProfileRepository, String)
Boolean.logicalXor(boolean, boolean)
Scoreboard.removeEntity(Scoreboard, Entity)
BlockModelRenderer.renderModelSmooth(BlockModelRenderer, IBlockAccess, IBakedModel, IBlockState, BlockPos, BufferBuilder, boolean, long)
EntityPlayerMP.setSpectatingEntity(EntityPlayerMP, Entity)
Container.getMaximumSize(Container)
WorldInfo.access$700(WorldInfo)
ShaderUniform.uploadFloatMatrix(ShaderUniform)
Component.getParent_NoClientCode(Component)
IResourcePack.getPackName(IResourcePack)
FontRenderer.getUnicodePageLocation(FontRenderer, int)
Entity.canBePushed(Entity)
Long.intValue(Long)
ItemStack.getCount(ItemStack)
Thread.setDaemon(Thread, boolean)
IntBuffer.equals(IntBuffer, Object | int, int)
File.mkdir(File)
AccessibleComponent.requestFocus(AccessibleComponent)
File.getUsableSpace(File)
EnumFacing.values()
ChannelPipeline.removeLast(ChannelPipeline)
Material.isToolNotRequired(Material)
Font.writeObject(Font, ObjectOutputStream)
FlipContents.hashCode(FlipContents)
Class.getEnumConstantsShared(Class)
Village.deserializeNBT(Village, NBTBase | Village, NBTTagCompound)
Team.getDeathMessageVisibility(Team)
Entity.getCachedUniqueIdString(Entity)
NonNullList.from(Object, Object[])
Thread.getStackTrace(Thread)
BigDecimal.saturateLong(long)
PathNavigate.getNodeProcessor(PathNavigate)
EntityLiving.getHorizontalFaceSpeed(EntityLiving)
Entity.setOnFireFromLava(Entity)
NBTTagCompound.setFloat(NBTTagCompound, String, float)
WorldInfo.addToCrashReport(WorldInfo, CrashReportCategory)
Block.isToolEffective(Block, String, IBlockState)
IdentityArrayList.remove(IdentityArrayList, int | IdentityArrayList, Object)
MapItemRenderer.getData(MapItemRenderer, Instance)
ShaderManager.getVertexShaderLoader(ShaderManager)
NumericShaper.toString(NumericShaper)
FramePeer.setResizable(FramePeer, boolean)
ImmutableList.listIterator(ImmutableList, int | ImmutableList | ImmutableList, int | ImmutableList)
MethodType.asSpreaderType(MethodType, Class, int)
ImmutableTable.toImmutableTable(Function, Function, Function, BinaryOperator | Function, Function, Function)
FontMetrics.getHeight(FontMetrics)
ByteBuf.readFloat(ByteBuf)
NetworkManager.channelInactive(NetworkManager, ChannelHandlerContext)
FileStore.isReadOnly(FileStore)
Scoreboard.onScoreUpdated(Scoreboard, Score)
Entity.getControllingPassenger(Entity)
Toolkit.checkImage(Toolkit, Image, int, int, ImageObserver)
IdentityArrayList.lastIndexOf(IdentityArrayList, Object)
Component.getComponentListeners(Component)
LangReflectAccess.getConstructorSignature(LangReflectAccess, Constructor)
MinecraftServer.getCanSpawnNPCs(MinecraftServer)
BlockModelRenderer.renderModelBrightnessColor(BlockModelRenderer, IBakedModel, float, float, float, float | BlockModelRenderer, IBlockState, IBakedModel, float, float, float, float)
Component.requestFocus(Component, boolean | Component, boolean, Cause | Component | Component, Cause)
FontRenderContext.usesFractionalMetrics(FontRenderContext)
Factory.getFields(Factory, Class, boolean, Class | Factory, Class, boolean, String, Class, Class)
AtomicInteger.getAndDecrement(AtomicInteger)
Method.getParameterAnnotations(Method)
PlayerList.getOppedPlayerNames(PlayerList)
BoundMethodHandle.copyWith(BoundMethodHandle, MethodType, LambdaForm | BoundMethodHandle, MethodType, LambdaForm)
BigInteger.implSquareToLen(int[], int, int[], int)
Village.modifyPlayerReputation(Village, UUID, int | Village, String, int)
Builder.readFrom(PacketBuffer)
Minecraft.getVersion(Minecraft)
Class.getDeclaredFields0(Class, boolean)
Toolkit.initializeDesktopProperties(Toolkit)
TextHitInfo.equals(TextHitInfo, Object | TextHitInfo, TextHitInfo)
Block.isFullBlock(Block, IBlockState)
World.canSnowAtBody(World, BlockPos, boolean)
MethodType.dropParameterTypes(MethodType, int, int)
ScorePlayerTeam.setFriendlyFlags(ScorePlayerTeam, int)
Rectangle2D.getPathIterator(Rectangle2D, AffineTransform, double | Rectangle2D, AffineTransform)
StateImplementation.getLightOpacity(StateImplementation, IBlockAccess, BlockPos | StateImplementation)
ColorModel.createCompatibleWritableRaster(ColorModel, int, int)
Stream.skip(Stream, long)
InetAddressImpl.isReachable(InetAddressImpl, InetAddress, int, NetworkInterface, int)
GlyphVector.performDefaultLayout(GlyphVector)
EntityMinecart.setVelocity(EntityMinecart, double, double, double)
ZoneRules.isValidOffset(ZoneRules, LocalDateTime, ZoneOffset)
ImmutableMap.compute(ImmutableMap, Object, BiFunction)
Biome.isSnowyBiome(Biome)
BufferedImage.getRaster(BufferedImage)
Entity.setOutsideBorder(Entity, boolean)
EntityItem.canTriggerWalking(EntityItem)
HoverEvent.getAction(HoverEvent)
OfInt.next(OfInt | OfInt)
LambdaForm.compileToBytecode(LambdaForm)
ImmutableList.readObject(ImmutableList, ObjectInputStream)
AxisAlignedBB.offset(AxisAlignedBB, BlockPos | AxisAlignedBB, Vec3d | AxisAlignedBB, double, double, double)
Scoreboard.addScoreObjective(Scoreboard, String, IScoreCriteria)
URLConnection.getRequestProperties(URLConnection)
EntityDataManager.getEntry(EntityDataManager, DataParameter)
MethodType.erase(MethodType)
ImmutableMap.keySet(ImmutableMap | ImmutableMap)
NumericShaper.getRangeSet(NumericShaper)
Cursor.getName(Cursor)
ModelBiped.setRotationAngles(ModelBiped, float, float, float, float, float, float, Entity)
EntityItemFrame.attackEntityFrom(EntityItemFrame, DamageSource, float)
IChunkGenerator.getPossibleCreatures(IChunkGenerator, EnumCreatureType, BlockPos)
ByteBuf.setDouble(ByteBuf, int, double)
CrashReport.makeCategory(CrashReport, String)
Container.getLayout(Container)
World.updateEntities(World)
Handle.allocate(Handle, ByteBufAllocator)
PermissionCollection.add(PermissionCollection, Permission)
Container.getComponentAt(Container, int, int | Container, Point)
StateImplementation.getLightValue(StateImplementation, IBlockAccess, BlockPos | StateImplementation)
Integer.getInteger(String, Integer | String, int | String)
Graphics2D.drawRenderableImage(Graphics2D, RenderableImage, AffineTransform)
BigInteger.writeObject(BigInteger, ObjectOutputStream)
EntityPlayer.getFoodStats(EntityPlayer)
Font2D.getFamilyName(Font2D, Locale)
AbstractAttributeMap.getAttributeInstance(AbstractAttributeMap, IAttribute)
EntityRenderer.getNightVisionBrightness(EntityRenderer, EntityLivingBase, float)
CharBuffer.array(CharBuffer | CharBuffer)
OffsetDateTime.toLocalTime(OffsetDateTime)
Gson.fromJson(Gson, Reader, Type | Gson, JsonReader, Type | Gson, Reader, Class | Gson, String, Class | Gson, JsonElement, Class | Gson, JsonElement, Type | Gson, String, Type)
ModelRenderer.addBox(ModelRenderer, float, float, float, int, int, int, float | ModelRenderer, float, float, float, int, int, int | ModelRenderer, String, float, float, float, int, int, int | ModelRenderer, float, float, float, int, int, int, boolean)
OffsetDateTime.timeLineOrder()
Permission.getName(Permission)
Vec3d.distanceTo(Vec3d, Vec3d)
ByteBuf.resetWriterIndex(ByteBuf)
PlayerChunkMapEntry.blockChanged(PlayerChunkMapEntry, int, int, int)
World.joinEntityInSurroundings(World, Entity)
Font.getFont(Map | String | String, Font)
LocalDate.plusMonths(LocalDate, long)
GuiScreen.drawScreen(GuiScreen, int, int, float)
Field.setBoolean(Field, Object, boolean)
RecvByteBufAllocator.newHandle(RecvByteBufAllocator)
EntityPlayer.openGuiHorseInventory(EntityPlayer, AbstractHorse, IInventory)
IBlockState.getProperties(IBlockState)
EntityPlayer.getAbsorptionAmount(EntityPlayer)
World.getCloudColorBody(World, float)
RenderGlobal.broadcastSound(RenderGlobal, int, BlockPos, int)
VillageCollection.fileNameForProvider(WorldProvider)
Component.dispatchMouseWheelToAncestor(Component, MouseWheelEvent)
NBTTagCompound.getTag(NBTTagCompound, String)
LocalDate.compareTo0(LocalDate, LocalDate)
Integer.byteValue(Integer)
LangReflectAccess.getConstructorAccessor(LangReflectAccess, Constructor)
ChannelFuture.sync(ChannelFuture)
Chunk.getBlockState(Chunk, int, int, int | Chunk, BlockPos)
RenderLivingBase.getSwingProgress(RenderLivingBase, EntityLivingBase, float)
InetAddress.getAddressesFromNameService(String, InetAddress)
ShortBuffer.toString(ShortBuffer)
ResourcePackRepository.access$200(ResourcePackRepository, String, File)
CompiledChunk.setVisibility(CompiledChunk, SetVisibility)
Render.shouldRender(Render, Entity, ICamera, double, double, double)
EntityItemFrame.processInitialInteract(EntityItemFrame, EntityPlayer, EnumHand)
LocalDate.getEra(LocalDate)
ImmutableMap.isHashCodeFast(ImmutableMap)
Extension.toString(Extension)
ImmutableMultimap.builder()
Level.isInRange(Level, Level, Level)
URI.compareTo(URI, URI | URI, Object)
Dialog.getModalityType(Dialog)
File.list(File, FilenameFilter | File)
NetHandlerPlayClient.handleRespawn(NetHandlerPlayClient, SPacketRespawn)
Graphics.drawRect(Graphics, int, int, int, int)
Name.internArguments(Name)
Component.checkTreeLock(Component)
Component.createHierarchyEvents(Component, int, Component, Container, long, boolean)
AdvancementProgress.compareTo(AdvancementProgress, AdvancementProgress | AdvancementProgress, Object)
IntegratedServer.getPublic(IntegratedServer)
FloatBuffer.arrayOffset(FloatBuffer)
AttributeValues.getBidiEmbedding(AttributeValues)
Class.getAnnotatedSuperclass(Class)
BufferedImage.getSource(BufferedImage)
OffsetDateTime.get(OffsetDateTime, TemporalField)
Excluder.isInnerClass(Excluder, Class)
Field.toGenericString(Field)
ReflectionFactory.setConstructorAccessor(ReflectionFactory, Constructor, ConstructorAccessor)
Scoreboard.removeTeam(Scoreboard, ScorePlayerTeam)
World.getUniqueDataId(World, String)
Debug.Help()
EntityPlayer.getDefaultEyeHeight(EntityPlayer)
WorldType.isVersioned(WorldType)
InetAddress.updateLookupTable(String)
ByteBuf.toString(ByteBuf, int, int, Charset | ByteBuf | ByteBuf, Charset)
SoundManager.loadSoundSystem(SoundManager)
Vector.indexOf(Vector, Object | Vector, Object, int)
DisplayMode.getRefreshRate(DisplayMode)
Method.getFactory(Method)
AttributeValues.unset(AttributeValues, EAttribute)
NetHandlerPlayClient.handleSpawnExperienceOrb(NetHandlerPlayClient, SPacketSpawnExperienceOrb)
File.setReadable(File, boolean, boolean | File, boolean)
Vector3f.angle(Vector3f, Vector3f)
SoundEventAccessor.getSubtitle(SoundEventAccessor)
DataFixer.registerWalker(DataFixer, FixTypes, IDataWalker)
Material.setTranslucent(Material)
ZoneId.from(TemporalAccessor)
ArrayList.addAll(ArrayList, Collection | ArrayList, int, Collection)
BaseCalendar.validate(BaseCalendar, CalendarDate)
Entity.hasCustomName(Entity)
DayOfWeek.getDisplayName(DayOfWeek, TextStyle, Locale)
Map.get(Map, Object)
Vector3f.sub(Vector3f, Vector3f, Vector3f)
CompositeByteBuf.setChar(CompositeByteBuf, int, int | CompositeByteBuf, int, int)
RenderGlobal.getDebugInfoEntities(RenderGlobal)
World.isChunkGeneratedAt(World, int, int)
Window.getType(Window)
Map.computeIfAbsent(Map, Object, Function)
FileStore.getTotalSpace(FileStore)
ItemStack.interactWithEntity(ItemStack, EntityPlayer, EntityLivingBase, EnumHand)
DoubleStream.iterator(DoubleStream | DoubleStream)
Container.mixOnZOrderChanging(Container, int, int)
Extension.getID(Extension)
EntityPlayer.getBedSpawnLocation(World, BlockPos, boolean)
ReentrantLock.lockInterruptibly(ReentrantLock)
WorldInfo.setWorldTime(WorldInfo, long)
World.getPerWorldStorage(World)
Field.hashCode(Field)
PotionEffect.performEffect(PotionEffect, EntityLivingBase)
ClassLoader.checkName(ClassLoader, String)
ColorModel.getDefaultTransferType(int)
MinecraftSessionService.getTextures(MinecraftSessionService, GameProfile, boolean)
BigInteger.addOne(int[], int, int, int)
DamageSource.causeIndirectDamage(Entity, EntityLivingBase)
NBTBase.getTypeName(int)
BufferCapabilities.getBackBufferCapabilities(BufferCapabilities)
Container.createHierarchyEvents(Container, int, Component, Container, long, boolean)
ChannelPipeline.last(ChannelPipeline)
Axis.toString(Axis)
Date.getDate(Date)
URLClassPath.getLookupCache(URLClassPath, String)
StringBuilder.insert(StringBuilder, int, boolean | StringBuilder, int, CharSequence, int, int | StringBuilder, int, char[] | StringBuilder, int, double | StringBuilder, int, float | StringBuilder, int, char[], int, int | StringBuilder, int, double | StringBuilder, int, String | StringBuilder, int, char | StringBuilder, int, Object | StringBuilder, int, CharSequence | StringBuilder, int, int | StringBuilder, int, long | StringBuilder, int, char[], int, int | StringBuilder, int, Object | StringBuilder, int, char | StringBuilder, int, CharSequence | StringBuilder, int, boolean | StringBuilder, int, float | StringBuilder, int, CharSequence, int, int | StringBuilder, int, char[] | StringBuilder, int, String | StringBuilder, int, long | StringBuilder, int, int)
ISaveFormat.isOldMapFormat(ISaveFormat, String)
Throwable.validateSuppressedExceptionsList(Throwable, List)
Period.plus(Period, TemporalAmount | Period, TemporalAmount)
CompositeByteBuf.setShort(CompositeByteBuf, int, int | CompositeByteBuf, int, int)
CharToGlyphMapper.canDisplay(CharToGlyphMapper, char | CharToGlyphMapper, int)
List.add(List, int, Object | List, Object)
BiomeProvider.getModdedBiomeGenerators(BiomeProvider, WorldType, long, GenLayer[])
MinecraftServer.getUserMessage(MinecraftServer)
EntityLivingBase.setLastAttackedEntity(EntityLivingBase, Entity)
WorldServer.fireBlockEvent(WorldServer, BlockEventData)
MobSpawnerBaseLogic.getSpawnerPosition(MobSpawnerBaseLogic)
World.setRandomSeed(World, int, int, int)
LineMetrics.getHeight(LineMetrics)
EntityPlayer.setGameType(EntityPlayer, GameType)
ColorModel.getGray16TosRGB8LUT(ICC_ColorSpace)
BufferedImage.initIDs()
Window.setFocusCycleRoot(Window, boolean)
Minecraft.getRenderViewEntity(Minecraft)
Font.readObject(Font, ObjectInputStream)
Integer.remainderUnsigned(int, int)
NamedFunction.initializeInvokers()
Entity.turn(Entity, float, float)
InventoryEnderChest.loadInventoryFromNBT(InventoryEnderChest, NBTTagList)
MinecraftServer.getNetworkSystem(MinecraftServer)
BlockFlower.getSubBlocks(BlockFlower, CreativeTabs, NonNullList)
ImmutableTable.hashCode(ImmutableTable)
Block.setHarvestLevel(Block, String, int | Block, String, int, IBlockState)
AttenuationType.getTypeInt(AttenuationType)
EnumFacing.getDirectionFromEntityLiving(BlockPos, EntityLivingBase)
ZonedDateTime.minus(ZonedDateTime, TemporalAmount | ZonedDateTime, long, TemporalUnit | ZonedDateTime, long, TemporalUnit | ZonedDateTime, long, TemporalUnit | ZonedDateTime, TemporalAmount | ZonedDateTime, TemporalAmount)
File.exists(File)
ImmutableSetMultimap.valuesBuilder(Comparator)
ChunkPos.toString(ChunkPos)
Event.translate(Event, int, int)
Component.locate(Component, int, int)
MethodHandle.bindTo(MethodHandle, Object)
Component.getParent(Component)
WorldServer.sendPacketWithinDistance(WorldServer, EntityPlayerMP, boolean, double, double, double, Packet)
Long.parseLong(String | String, int)
StateImplementation.getStrongPower(StateImplementation, IBlockAccess, BlockPos, EnumFacing)
NodeProcessor.setCanEnterDoors(NodeProcessor, boolean)
ComponentPeer.paint(ComponentPeer, Graphics)
String.contentEquals(String, CharSequence | String, StringBuffer)
MinecraftServer.tick(MinecraftServer)
OptionalLong.equals(OptionalLong, Object)
Toolkit.createMenu(Toolkit, Menu)
ProgressivePromise.await(ProgressivePromise)
AWTEvent.isConsumed(AWTEvent)
Temporal.isSupported(Temporal, TemporalUnit)
NetworkManager.isEncrypted(NetworkManager)
AttributeValues.getFont(AttributeValues)
JsonReader.nextDouble(JsonReader)
ColorModel.getTransferType(ColorModel)
World.getWorldBorder(World)
EntityPlayerMP.awardKillScore(EntityPlayerMP, Entity, int, DamageSource)
Class.getInterfaces(Class)
URI.access$002(URI, String)
ZoneRules.previousTransition(ZoneRules, Instant)
EntityPlayer.onLivingUpdate(EntityPlayer)
TileEntity.readFromNBT(TileEntity, NBTTagCompound)
URI.appendFragment(URI, StringBuffer, String)
DropTarget.removeDropTargetListener(DropTarget, DropTargetListener)
SerializedForm.create(ImmutableTable, int[], int[])
Clipboard.getAvailableDataFlavors(Clipboard)
ChronoLocalDateTime.equals(ChronoLocalDateTime, Object)
Block.getLightValue(Block, IBlockState | Block, IBlockState, IBlockAccess, BlockPos)
AttributeValues.isDefined(AttributeValues, EAttribute)
Minecraft.updateDebugProfilerName(Minecraft, int)
ProgressivePromise.setProgress(ProgressivePromise, long, long)
ImmutableMultimap.clear(ImmutableMultimap)
MapStorage.setData(MapStorage, String, WorldSavedData)
AttributeSet.copyAttributes(AttributeSet)
CheckboxPeer.setState(CheckboxPeer, boolean)
BigInteger.negate(BigInteger)
Font.layoutGlyphVector(Font, FontRenderContext, char[], int, int, int)
Vector3f.store(Vector3f, FloatBuffer)
NetHandlerPlayClient.handleEffect(NetHandlerPlayClient, SPacketEffect)
Component.getGraphicsConfiguration(Component)
Entity.getSoundCategory(Entity)
Minecraft.isCallingFromMinecraftThread(Minecraft)
Tutorial.createKeybindComponent(String)
NetHandlerPlayClient.createDownloadCallback(NetHandlerPlayClient)
Entity.decrementTimeUntilPortal(Entity)
Version.getName(Version)
ComponentPeer.checkImage(ComponentPeer, Image, int, int, ImageObserver)
FrameType.getName(FrameType)
Region.calcBBox(Region)
NetHandlerPlayClient.handleWindowProperty(NetHandlerPlayClient, SPacketWindowProperty)
Path.getName(Path, int)
EntityItemFrame.writeEntityToNBT(EntityItemFrame, NBTTagCompound)
Calendar.set(Calendar, int, int | Calendar, int, int, int, int, int | Calendar, int, int, int, int, int, int | Calendar, int, int, int)
MethodType.unwrapWithNoPrims(MethodType)
ChoicePeer.select(ChoicePeer, int)
Packet.processPacket(Packet, INetHandler)
CheckboxPeer.setCheckboxGroup(CheckboxPeer, CheckboxGroup)
ItemStack.getSubCompound(ItemStack, String)
Component.disableEvents(Component, long)
WorldInfo.setBorderLerpTime(WorldInfo, long)
Material.getMaterialMapColor(Material)
DropTarget.createDropTargetAutoScroller(DropTarget, Component, Point)
StackTraceElement.getMethodName(StackTraceElement)
SoundHandler.setSoundLevel(SoundHandler, SoundCategory, float)
JsonObject.createJsonElement(JsonObject, Object)
Lookup.checkMethodName(Lookup, byte, String)
Dimension.hashCode(Dimension)
OfDouble.trySplit(OfDouble | OfDouble | OfDouble)
EventDispatchThread.pumpEventsForFilter(EventDispatchThread, int, Conditional, EventFilter | EventDispatchThread, Conditional, EventFilter)
Minecraft.crashed(Minecraft, CrashReport)
URLConnection.getConnectTimeout(URLConnection)
WorldBorder.contains(WorldBorder, AxisAlignedBB | WorldBorder, ChunkPos | WorldBorder, BlockPos)
Render.doRenderShadowAndFire(Render, Entity, double, double, double, float, float)
ChronoLocalDate.with(ChronoLocalDate, TemporalAdjuster | ChronoLocalDate, TemporalAdjuster | ChronoLocalDate, TemporalField, long | ChronoLocalDate, TemporalField, long)
Window.access$202(Window, boolean)
JsonElement.getAsBigInteger(JsonElement)
StandardLevel.getStandardLevel(int)
Chronology.getId(Chronology)
ZoneOffsetTransition.getDuration(ZoneOffsetTransition)
Minecraft.runTick(Minecraft)
WritableRaster.setPixel(WritableRaster, int, int, double[] | WritableRaster, int, int, int[] | WritableRaster, int, int, float[])
Long.decode(String)
FileTime.toMillis(FileTime)
ImmutableMultimap.entryIterator(ImmutableMultimap | ImmutableMultimap)
Attributes.write(Attributes, DataOutputStream)
FileLock.position(FileLock)
InetAddress.isLinkLocalAddress(InetAddress)
ValueRange.getLargestMinimum(ValueRange)
ByteBuf.readChar(ByteBuf)
NumericShaper.getContextKey(char)
ExtendedBlockStorage.get(ExtendedBlockStorage, int, int, int)
BasicType.values()
ArrayList.lastIndexOf(ArrayList, Object)
Comparator.thenComparingInt(Comparator, ToIntFunction)
IsoChronology.zonedDateTime(IsoChronology, TemporalAccessor | IsoChronology, TemporalAccessor | IsoChronology, Instant, ZoneId | IsoChronology, Instant, ZoneId)
IntegratedServer.getDifficulty(IntegratedServer)
Component.getInputMethodListeners(Component)
VertexFormat.hasNormal(VertexFormat)
Random.seedUniquifier()
Block.setDefaultSlipperiness(Block, float)
StateImplementation.shouldSideBeRendered(StateImplementation, IBlockAccess, BlockPos, EnumFacing)
MapColor.getMapColor(MapColor, int)
ShaderUniform.uploadFloat(ShaderUniform)
LambdaFormEditor.permutedTypesMatch(int[], BasicType[], Name[], int)
Class.isMemberClass(Class)
LocalDateTime.withDayOfMonth(LocalDateTime, int)
AxisAlignedBB.intersectsWithXZ(AxisAlignedBB, Vec3d)
AxisAlignedBB.intersectsWithXY(AxisAlignedBB, Vec3d)
ReferenceQueue.reallyPoll(ReferenceQueue)
URLConnection.typeToPackageName(URLConnection, String)
Shape.intersects(Shape, Rectangle2D | Shape, double, double, double, double)
Container.getOpaqueShape(Container)
Lookup.unreflectConstructor(Lookup, Constructor)
PathNavigate.tryMoveToXYZ(PathNavigate, double, double, double, double)
URI.match(char, long, long)
FontRenderContext.getTransform(FontRenderContext)
TextFieldPeer.getMinimumSize(TextFieldPeer, int)
Font.toString(Font)
ItemRenderer.renderMapFirstPersonSide(ItemRenderer, float, EnumHandSide, float, ItemStack)
CommandResultStats.addAllStats(CommandResultStats, CommandResultStats)
Properties.loadFromXML(Properties, InputStream)
StringBuilder.reverse(StringBuilder | StringBuilder)
MinecraftServer.getOnlinePlayerNames(MinecraftServer)
Cursor.initIDs()
Gson.atomicLongArrayAdapter(TypeAdapter)
AxisAlignedBB.intersectsWithYZ(AxisAlignedBB, Vec3d)
GuiScreen.getClipboardString()
TimeZone.getOffset(TimeZone, long | TimeZone, int, int, int, int, int, int)
Lookup.fixmods(int)
EntityLivingBase.getAbsorptionAmount(EntityLivingBase)
PlayerAdvancements.revokeCriterion(PlayerAdvancements, Advancement, String)
LambdaForm.buildEmptyNames(int, String)
MemberName.isConstructor(MemberName)
ProtectionDomain.impliesCreateAccessControlContext(ProtectionDomain)
Factory.resolve(Factory, byte, MemberName, Class)
Executable.getAnnotatedExceptionTypes(Executable)
VertexFormatElement.getSize(VertexFormatElement)
AffineTransform.quadrantRotate(AffineTransform, int, double, double | AffineTransform, int)
ITextureObject.getGlTextureId(ITextureObject)
Rectangle.intersects(Rectangle, Rectangle)
Team.getSeeFriendlyInvisiblesEnabled(Team)
Font.createGlyphVector(Font, FontRenderContext, int[] | Font, FontRenderContext, String | Font, FontRenderContext, char[] | Font, FontRenderContext, CharacterIterator)
Rectangle.add(Rectangle, Rectangle | Rectangle, Point | Rectangle, int, int)
JsonWriter.string(JsonWriter, String)
FontMetrics.getDescent(FontMetrics)
LambdaFormBuffer.lambdaForm(LambdaFormBuffer)
EventQueue.mergePaintEvents(EventQueue, PaintEvent, PaintEvent)
VertexBuffer.deleteGlBuffers(VertexBuffer)
DropTargetAutoScroller.updateRegion(DropTargetAutoScroller)
Container.getComponentZOrder(Container, Component)
Stream.of(Object | Object[])
ByteBuf.setByte(ByteBuf, int, int)
WorldInfo.access$800(WorldInfo)
AbstractStringBuilder.offsetByCodePoints(AbstractStringBuilder, int, int)
TileEntity.deserializeNBT(TileEntity, NBTTagCompound | TileEntity, NBTBase)
ShaderUniform.upload(ShaderUniform)
RenderLivingBase.doRender(RenderLivingBase, Entity, double, double, double, float, float | RenderLivingBase, EntityLivingBase, double, double, double, float, float)
MethodType.leadingReferenceParameter(MethodType)
AxisAlignedBB.collideWithXPlane(AxisAlignedBB, double, Vec3d, Vec3d)
ItemStack.removeSubCompound(ItemStack, String)
GameRules.addGameRule(GameRules, String, String, ValueType)
Item.getItemUseAction(Item, ItemStack)
GuiButton.drawButtonForegroundLayer(GuiButton, int, int)
Instant.minusMillis(Instant, long)
CodeSource.toString(CodeSource)
ListenerListInst.shouldRebuild(ListenerListInst)
NBTTagCompound.removeTag(NBTTagCompound, String)
BigInteger.toString(BigInteger, int | BigInteger, StringBuilder, int, int | BigInteger)
AttributeValues.getKerning(AttributeValues)
ImmutableMultiset.asList(ImmutableMultiset)
ClassLoader.resolveClass0(ClassLoader, Class)
Cursor.loadSystemCustomCursorProperties()
DamageSource.isProjectile(DamageSource)
WorldServer.getChunkSaveLocation(WorldServer)
ChannelPipeline.channel(ChannelPipeline)
WatchKey.pollEvents(WatchKey)
EntityPlayer.setSpawnPoint(EntityPlayer, BlockPos, boolean)
Language.isBidirectional(Language)
NBTTagCompound.handleEscape(String)
DragSourceContext.addDragSourceListener(DragSourceContext, DragSourceListener)
Channel.isRegistered(Channel)
Entity.isOutsideBorder(Entity)
CompositeByteBuf.getBytes(CompositeByteBuf, int, ByteBuf, int, int | CompositeByteBuf, int, ByteBuf, int | CompositeByteBuf, int, ByteBuffer | CompositeByteBuf, int, byte[], int, int | CompositeByteBuf, int, ByteBuffer | CompositeByteBuf, int, ByteBuf, int | CompositeByteBuf, int, OutputStream, int | CompositeByteBuf, int, byte[], int, int | CompositeByteBuf, int, ByteBuf | CompositeByteBuf, int, byte[] | CompositeByteBuf, int, OutputStream, int | CompositeByteBuf, int, FileChannel, long, int | CompositeByteBuf, int, ByteBuf | CompositeByteBuf, int, GatheringByteChannel, int | CompositeByteBuf, int, ByteBuf, int, int | CompositeByteBuf, int, byte[])
Permission.hashCode(Permission)
WorldInfo.isDifficultyLocked(WorldInfo)
WorldInfo.setRainTime(WorldInfo, int)
InputEvent.getModifiersExText(int)
OffsetDateTime.until(OffsetDateTime, Temporal, TemporalUnit)
FontRenderer.readGlyphSizes(FontRenderer)
EventQueue.setCurrentEventAndMostRecentTimeImpl(EventQueue, AWTEvent)
Region.encompasses(Region, Region)
Village.removeDeadAndOldAgressors(Village)
FontMetrics.bytesWidth(FontMetrics, byte[], int, int)
World.isDaytime(World)
Long.doubleValue(Long)
Type.getId(Type)
Component.setGraphicsConfiguration(Component, GraphicsConfiguration)
MemberName.getFieldType(MemberName)
Comparator.comparingInt(ToIntFunction)
ZonedDateTime.writeExternal(ZonedDateTime, DataOutput)
Block.damageDropped(Block, IBlockState)
AffineTransform.createInverse(AffineTransform)
EnumFacing.byName(String)
WorldBorder.getClosestDistance(WorldBorder, double, double | WorldBorder, Entity)
AccessibleTable.getAccessibleRowHeader(AccessibleTable)
EntityPlayer.getDeathSound(EntityPlayer)
WorldType.getName(WorldType)
Logger.exit(Logger | Logger, Object)
ItemCameraTransforms.hasCustomTransform(ItemCameraTransforms, TransformType)
IntegratedServer.initiateShutdown(IntegratedServer)
CrashReport.getDescription(CrashReport)
Chunk.getInhabitedTime(Chunk)
AttenuationType.values()
EventQueue.getCurrentEvent()
Graphics.copyArea(Graphics, int, int, int, int, int, int)
StateImplementation.collisionRayTrace(StateImplementation, World, BlockPos, Vec3d, Vec3d)
Constructor.equals(Constructor, Object)
MinecraftServer.getWorldIconFile(MinecraftServer)
IRarity.getName(IRarity)
ColorSpace.toRGB(ColorSpace, float[])
Resource.getURL(Resource)
Lookup.checkMethod(Lookup, byte, Class, MemberName)
PlayerList.reloadResources(PlayerList)
UserListOps.getObjectKey(UserListOps, GameProfile | UserListOps, Object)
Hashtable.replaceAll(Hashtable, BiFunction)
Type.getTypeName(Type)
ShortBuffer.array(ShortBuffer | ShortBuffer)
LongBuffer.arrayOffset(LongBuffer)
ItemStack.getTranslationKey(ItemStack)
IntegratedServer.isHardcore(IntegratedServer)
SoundEvent.getSoundName(SoundEvent)
URL.setDeserializedFields(URL, URLStreamHandler)
ByteBuf.markWriterIndex(ByteBuf)
NamedFunction.invokeWithArgumentsTracing(NamedFunction, Object[])
EntityMinecart.onUpdate(EntityMinecart)
EventExecutorGroup.shutdown(EventExecutorGroup)
ZoneOffset.ofHoursMinutes(int, int)
UserListOps.bypassesPlayerLimit(UserListOps, GameProfile)
BoundMethodHandle.rebind(BoundMethodHandle)
Graphics.fillArc(Graphics, int, int, int, int, int, int)
ThreadLocalMap.setThreshold(ThreadLocalMap, int)
ScrollPanePeer.setScrollPosition(ScrollPanePeer, int, int)
StateImplementation.addCollisionBoxToList(StateImplementation, World, BlockPos, AxisAlignedBB, List, Entity, boolean)
Minecraft.displayGuiScreen(Minecraft, GuiScreen)
Component.getBoundsOp(Component)
World.getTopSolidOrLiquidBlock(World, BlockPos)
Method.getDeclaredAnnotations(Method)
Permission.equals(Permission, Object)
Toolkit.areExtraMouseButtonsEnabled(Toolkit)
IsoChronology.resolveProlepticMonth(IsoChronology, Map, ResolverStyle)
BufferedImage.getSources(BufferedImage)
Entity.applyPlayerInteraction(Entity, EntityPlayer, Vec3d, EnumHand)
BoundMethodHandle.speciesData_LLLLL()
EntityPlayerMP.setPlayerHealthUpdated(EntityPlayerMP)
SoundSystemStarterThread.playing(SoundSystemStarterThread, String)
BlockPos.toLong(BlockPos)
Locale.getCountry(Locale)
ClassSignature.accept(ClassSignature, Visitor)
FieldAccessor.getByte(FieldAccessor, Object)
BigInteger.remainderBurnikelZiegler(BigInteger, BigInteger)
Entity.applyEntityCollision(Entity, Entity)
Font2D.useAAForPtSize(Font2D, int)
ThreadLocalMap.prevIndex(int, int)
String.isEmpty(String)
Component.repaint(Component | Component, long | Component, long, int, int, int, int | Component, int, int, int, int)
MethodHandle.standardString(MethodHandle)
BlockStateContainer.set(BlockStateContainer, int, IBlockState | BlockStateContainer, int, int, int, IBlockState)
OptionalDouble.toString(OptionalDouble)
BigInteger.parseInt(BigInteger, char[], int, int)
Rectangle.initIDs()
Thread.isAlive(Thread)
FontStrike.getCharMetrics(FontStrike, char)
Condition.signalAll(Condition)
Item.getAttributeModifiers(Item, EntityEquipmentSlot, ItemStack)
StringBuilder.getChars(StringBuilder, int, int, char[], int)
AttributeValues.setForeground(AttributeValues, Paint)
World.getPlayers(World, Class, Predicate)
AffineTransform.isIdentity(AffineTransform)
Gson.htmlSafe(Gson)
ImmutableMultimap.copyOf(Iterable | Multimap)
ClassLoader.initializePath(String)
Entity.getSwimSound(Entity)
LocalDateTime.getDayOfMonth(LocalDateTime)
NetworkManager.access$000(NetworkManager)
ScorePlayerTeam.setDisplayName(ScorePlayerTeam, String)
BigDecimal.byteValueExact(BigDecimal)
Item.getToolClasses(Item, ItemStack)
LootPool.generateLoot(LootPool, Collection, Random, LootContext)
Range.getDigitBase(Range)
ThreadGroup.parentOf(ThreadGroup, ThreadGroup)
TimeZone.hasSameRules(TimeZone, TimeZone)
Block.setDefaultState(Block, IBlockState)
Vec3d.getIntermediateWithZValue(Vec3d, Vec3d, double)
AccessibleRelationSet.toArray(AccessibleRelationSet)
Vector.removeRange(Vector, int, int)
State.valueOf(String)
AbstractAttributeMap.createInstance(AbstractAttributeMap, IAttribute)
LongStream.findFirst(LongStream)
AttributeValues.anyDefined(AttributeValues, int)
EnumAction.valueOf(String)
GlyphVector.getNumGlyphs(GlyphVector)
SoundType.getPlaceSound(SoundType)
JsonArray.getAsDouble(JsonArray)
BigDecimal.min(BigDecimal, BigDecimal)
EnumChatVisibility.getResourceKey(EnumChatVisibility)
EntityLivingBase.getLastDamageSource(EntityLivingBase)
EntityLivingBase.getEntityAttribute(EntityLivingBase, IAttribute)
URL.getDefaultPort(URL)
Package.getImplementationTitle(Package)
EntityItemFrame.getHeightPixels(EntityItemFrame)
EntityItem.setOwner(EntityItem, String)
ArrayList.removeIf(ArrayList, Predicate)
Entity.getAir(Entity)
EnumHandSide.valueOf(String)
MethodHandle.asCollector(MethodHandle, Class, int)
ImmutableSet.iterator(ImmutableSet | ImmutableSet)
Item.onItemUse(Item, EntityPlayer, World, BlockPos, EnumHand, EnumFacing, float, float, float)
Dialog.modalityPopped(Dialog)
Item.getMaxDamage(Item, ItemStack | Item)
RenderGlobal.renderStars(RenderGlobal, BufferBuilder)
ByteOrder.nativeOrder()
ByteBufAllocator.ioBuffer(ByteBufAllocator, int | ByteBufAllocator, int, int | ByteBufAllocator)
Region.getDifference(Region, Region)
Window.access$100(AppContext, WeakReference)
World.setWorldTime(World, long)
Locale.getISO3Language(Locale)
ClassLoader.defineClassSourceLocation(ClassLoader, ProtectionDomain)
Potion.removeAttributesModifiersFromEntity(Potion, EntityLivingBase, AbstractAttributeMap, int)
EntityItem.getItem(EntityItem)
String.replaceAll(String, String, String)
ZonedDateTime.withSecond(ZonedDateTime, int)
GenLayer.initWorldGenSeed(GenLayer, long)
ScrollbarPeer.setPageIncrement(ScrollbarPeer, int)
AbstractAttributeMap.applyAttributeModifiers(AbstractAttributeMap, Multimap)
ResourcePackRepository.access$300()
Component.setSize(Component, Dimension | Component, int, int)
World.isAnyPlayerWithinRangeAt(World, double, double, double, double)
ChronoLocalDateTime.minus(ChronoLocalDateTime, TemporalAmount | ChronoLocalDateTime, TemporalAmount | ChronoLocalDateTime, long, TemporalUnit | ChronoLocalDateTime, long, TemporalUnit)
PathMatcher.matches(PathMatcher, Path)
FoodStats.setFoodLevel(FoodStats, int)
LocalDate.writeExternal(LocalDate, DataOutput)
Thread.getContextClassLoader(Thread)
Region.getIntersection(Region, Rectangle | Region, Region)
Thread.destroy(Thread)
Class.newInstance(Class)
World.setSeaLevel(World, int)
Locale.lookup(List, Collection)
World.getEntitiesWithinAABBExcludingEntity(World, Entity, AxisAlignedBB)
DropTarget.setComponent(DropTarget, Component)
VertexBuffer.bindBuffer(VertexBuffer)
AxisDirection.valueOf(String)
Stream.flatMapToDouble(Stream, Function)
Name.useCount(Name, Name)
RenderGlobal.preRenderDamagedBlocks(RenderGlobal)
SoundManager.pauseAllSounds(SoundManager)
WorldInfo.getBorderSafeZone(WorldInfo)
TextFormatting.getValidValues(boolean, boolean)
AccessibleStateSet.toString(AccessibleStateSet)
NetHandlerPlayClient.handleSetPassengers(NetHandlerPlayClient, SPacketSetPassengers)
IntStream.of(int | int[])
ImmutableSetMultimap.of( | Object, Object | Object, Object, Object, Object | Object, Object, Object, Object, Object, Object, Object, Object | Object, Object, Object, Object, Object, Object | Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)
WorldSavedData.deserializeNBT(WorldSavedData, NBTTagCompound | WorldSavedData, NBTBase)
DropTarget.getDefaultActions(DropTarget)
PlayerList.sendPlayerPermissionLevel(PlayerList, EntityPlayerMP, int)
Block.registerBlock(int, String, Block | int, ResourceLocation, Block)
PlayerAdvancements.getProgress(PlayerAdvancements, Advancement)
URLClassPath.access$500()
Potion.getPotionById(int)
RenderGlobal.updateDestroyBlockIcons(RenderGlobal)
MethodType.parameterArray(MethodType)
EntityItem.getName(EntityItem)
PotionEffect.setPotionDurationMax(PotionEffect, boolean)
ImmutableMultimap.lambda$forEach$3(BiConsumer, Object, Collection)
File.toPath(File)
WorldBorder.getResizeSpeed(WorldBorder)
WorldServer.updateEntities(WorldServer)
ItemStack.hasEffect(ItemStack)
Toolkit.createCanvas(Toolkit, Canvas)
LambdaFormBuffer.nameArray(LambdaFormBuffer)
Calendar.getBaseStyle(Calendar, int)
URI.access$100()
ColorSpace.getMaxValue(ColorSpace, int)
ImmutableMultimap.valueIterator(ImmutableMultimap | ImmutableMultimap)
Calendar.getActualMaximum(Calendar, int)
Item.isMap(Item)
ClassLoader.registerAsParallelCapable()
Package.getAnnotations(Package)
NetHandlerPlayClient.handleUpdateBossInfo(NetHandlerPlayClient, SPacketUpdateBossInfo)
Instant.getEpochSecond(Instant)
EntityPlayer.getWorldScoreboard(EntityPlayer)
ConstantPool.getFieldAtIfLoaded(ConstantPool, int)
ByteBuf.writeShortLE(ByteBuf, int)
ByteBuffer.getShort(ByteBuffer | ByteBuffer, int)
CompositeByteBuf.hasMemoryAddress(CompositeByteBuf)
Window.processWindowEvent(Window, WindowEvent)
RenderLivingBase.renderLayers(RenderLivingBase, EntityLivingBase, float, float, float, float, float, float, float)
EventQueue.coalesceMouseEvent(EventQueue, MouseEvent)
LambdaFormBuffer.setResult(LambdaFormBuffer, Name)
ResourceBundle.getDefaultControl(String)
ChronoZonedDateTime.with(ChronoZonedDateTime, TemporalField, long | ChronoZonedDateTime, TemporalAdjuster | ChronoZonedDateTime, TemporalAdjuster | ChronoZonedDateTime, TemporalField, long)
Block.addInformation(Block, ItemStack, World, List, ITooltipFlag)
Thread.dumpStack()
Calendar.getDisplayNamesImpl(Calendar, int, int, Locale)
OfDouble.tryAdvance(OfDouble, Object | OfDouble, Consumer | OfDouble, DoubleConsumer)
Comparator.comparingLong(ToLongFunction)
EventExecutorGroup.shutdownNow(EventExecutorGroup)
FunctionManager.getFunctions(FunctionManager)
Point.setLocation(Point, Point | Point, double, double | Point, int, int)
Item.getItemStackLimit(Item | Item, ItemStack)
DragGestureEvent.getDragSource(DragGestureEvent)
Plane.values()
MobSpawnerBaseLogic.setEntityId(MobSpawnerBaseLogic, ResourceLocation)
ByteBuf.arrayOffset(ByteBuf)
Vector3f.setY(Vector3f, float)
Vector3f.setX(Vector3f, float)
DayOfWeek.values()
Vector3f.setZ(Vector3f, float)
Multiset.add(Multiset, Object | Multiset, Object, int)
HoverEvent.toString(HoverEvent)
Chronology.getCalendarType(Chronology)
Component.paintHeavyweightComponents(Component, Graphics)
LocalTime.toString(LocalTime)
RenderingHints.containsKey(RenderingHints, Object)
AccessibleEditableText.getTextRange(AccessibleEditableText, int, int)
MethodHandle.isVarargsCollector(MethodHandle)
ZoneOffset.readObject(ZoneOffset, ObjectInputStream)
LocalDateTime.isBefore(LocalDateTime, ChronoLocalDateTime)
EntityMinecart.getRenderBoundingBox(EntityMinecart)
Object.wait(Object, long | Object | Object, long, int)
ItemStack.isItemEnchanted(ItemStack)
EntityLiving.canAttackClass(EntityLiving, Class)
EntityLiving.canDespawn(EntityLiving)
FontMetrics.getAscent(FontMetrics)
Multiset.toString(Multiset)
Vec3d.squareDistanceTo(Vec3d, double, double, double | Vec3d, Vec3d)
ZonedDateTime.getLong(ZonedDateTime, TemporalField)
Block.disableStats(Block)
Optional.orElseThrow(Optional, Supplier)
ConstantPool.getSize0(ConstantPool, Object)
ImmutableMultiset.elementSet(ImmutableMultiset | ImmutableMultiset)
Path.endsWith(Path, String | Path, Path)
Unsafe.recvBufAllocHandle(Unsafe)
BiomeDecorator.genDecorations(BiomeDecorator, Biome, World, Random)
ListPeer.delItems(ListPeer, int, int)
InputEvent.canAccessSystemClipboard(InputEvent)
BigInteger.shiftRightImpl(BigInteger, int)
Entity.isEntityAlive(Entity)
InetAddress.createNSProvider(String)
Toolkit.getSystemSelection(Toolkit)
ChannelConfig.isAutoRead(ChannelConfig)
BigInteger.divide(BigInteger, BigInteger)
Scoreboard.getObjectiveDisplaySlot(int)
Rectangle2D.setFrame(Rectangle2D, double, double, double, double)
Font.getPeer_NoClientCode(Font)
Field.getGenericInfo(Field)
EntityLivingBase.markVelocityChanged(EntityLivingBase)
CollisionRule.getNames()
BigInteger.javaIncrement(BigInteger, int[])
Entity.writeToNBTAtomically(Entity, NBTTagCompound)
Map.putAll(Map, Map)
URI.defineSchemeSpecificPart(URI)
BiomeProvider.findBiomePosition(BiomeProvider, int, int, int, List, Random)
Style.setInsertion(Style, String)
ChannelOutboundBuffer.recycle(ChannelOutboundBuffer)
List.remove(List, Object | List, int)
PlayerAdvancements.setPlayer(PlayerAdvancements, EntityPlayerMP)
IntStream.empty()
NamedFunction.member(NamedFunction)
GlyphVector.getGlyphPixelBounds(GlyphVector, int, FontRenderContext, float, float)
Lookup.hasPrivateAccess(Lookup)
DamageSource.isMagicDamage(DamageSource)
IntStream.sorted(IntStream)
AbstractStringBuilder.capacity(AbstractStringBuilder)
PlayerList.getPlayerByUsername(PlayerList, String)
AppContext.getThreadGroup(AppContext)
Font.getAvailableAttributes(Font)
CompositeByteBuf.alloc(CompositeByteBuf)
NamedFunction.invoke__V(MethodHandle, Object[])
SpeciesData.toString(SpeciesData)
Executable.hasGenericInformation(Executable)
JsonElement.getAsInt(JsonElement)
Constructor.getAnnotation(Constructor, Class)
EntityLivingBase.updateEntityActionState(EntityLivingBase)
Future.isSuccess(Future)
DropTargetContext.addNotify(DropTargetContext, DropTargetContextPeer)
ChunkCompileTaskGenerator.setRegionRenderCacheBuilder(ChunkCompileTaskGenerator, RegionRenderCacheBuilder)
Logger.fatal(Logger, String, Object, Object, Object, Object, Object | Logger, CharSequence | Logger, Object | Logger, Object, Throwable | Logger, Marker, String | Logger, String | Logger, CharSequence, Throwable | Logger, Marker, String, Object, Object | Logger, MessageSupplier | Logger, Marker, Message | Logger, String, Object, Object | Logger, String, Object, Object, Object, Object, Object, Object, Object, Object | Logger, Marker, String, Throwable | Logger, String, Object, Object, Object, Object | Logger, String, Object, Object, Object, Object, Object, Object, Object, Object, Object | Logger, Marker, String, Object[] | Logger, String, Object, Object, Object | Logger, String, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object | Logger, Message, Throwable | Logger, Marker, String, Object, Object, Object | Logger, String, Object, Object, Object, Object, Object, Object, Object | Logger, Marker, String, Supplier[] | Logger, Marker, String, Object, Object, Object, Object, Object, Object, Object, Object, Object | Logger, Marker, Object, Throwable | Logger, Marker, MessageSupplier | Logger, String, Object | Logger, Message | Logger, Marker, Message, Throwable | Logger, Marker, String, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object | Logger, Marker, CharSequence | Logger, Marker, String, Object, Object, Object, Object | Logger, MessageSupplier, Throwable | Logger, Marker, String, Object, Object, Object, Object, Object, Object, Object | Logger, Marker, Supplier, Throwable | Logger, Supplier | Logger, Marker, String, Object | Logger, Marker, String, Object, Object, Object, Object, Object, Object | Logger, Marker, String, Object, Object, Object, Object, Object, Object, Object, Object | Logger, Marker, String, Object, Object, Object, Object, Object | Logger, Marker, Supplier | Logger, Marker, CharSequence, Throwable | Logger, String, Object, Object, Object, Object, Object, Object | Logger, Marker, Object | Logger, String, Supplier[] | Logger, Marker, MessageSupplier, Throwable | Logger, String, Throwable | Logger, Supplier, Throwable | Logger, String, Object[])
ValueRange.hashCode(ValueRange)
BigDecimal.max(BigDecimal, BigDecimal)
EntityPlayer.onDeath(EntityPlayer, DamageSource)
RandomValueRange.isInRange(RandomValueRange, int)
ImageCapabilities.clone(ImageCapabilities)
CreativeTabs.setNoScrollbar(CreativeTabs)
Scoreboard.getTeams(Scoreboard)
EventExecutorGroup.next(EventExecutorGroup)
AttributeValues.getUnderline(AttributeValues)
MinecraftServer.shouldBroadcastRconToOps(MinecraftServer)
ItemStack.hitEntity(ItemStack, EntityLivingBase, EntityPlayer)
Function.lambda$andThen$1(Function, Function, Object)
Class.getClassLoader0(Class)
Raster.getParent(Raster)
NamedFunction.invoke__L(MethodHandle, Object[])
BufferedImage.getWidth(BufferedImage, ImageObserver | BufferedImage)
MethodTypeForm.longPrimitiveParameterCount(MethodTypeForm)
ByteBuf.isDirect(ByteBuf)
Proxy.equals(Proxy, Object)
ChannelHandlerContext.pipeline(ChannelHandlerContext)
Constructor.getAnnotationBytes(Constructor)
ShortBuffer.isDirect(ShortBuffer)
Window.isModalExcluded(Window, ModalExclusionType)
Name.withConstraint(Name, Object)
OptionalLong.orElse(OptionalLong, long)
BigInteger.passesMillerRabin(BigInteger, int, Random)
ClassLoader.getParent(ClassLoader)
Calendar.createCalendar(TimeZone, Locale)
EntityRenderer.orientCamera(EntityRenderer, float)
RenderGlobal.notifyBlockUpdate(RenderGlobal, World, BlockPos, IBlockState, IBlockState, int)
Entity.getEntityWorld(Entity)
Paint.createContext(Paint, ColorModel, Rectangle, Rectangle2D, AffineTransform, RenderingHints)
Duration.parseNumber(CharSequence, String, int, String)
Entity.rayTrace(Entity, double, float)
Cursor.access$100(long)
RenderingHints.clone(RenderingHints)
Block.getMetaFromState(Block, IBlockState)
LineMetrics.getStrikethroughOffset(LineMetrics)
PlayerList.sendPacketToAllPlayersInDimension(PlayerList, Packet, int)
Period.negated(Period | Period)
OffsetTime.toString(OffsetTime)
Method.equals(Method, Object)
Integer.highestOneBit(int)
Minecraft.setIngameNotInFocus(Minecraft)
LocaleExtensions.getUnicodeLocaleType(LocaleExtensions, String)
ComponentPeer.getLocationOnScreen(ComponentPeer)
ZoneOffsetTransition.getDateTimeAfter(ZoneOffsetTransition)
NetHandlerPlayClient.handleKeepAlive(NetHandlerPlayClient, SPacketKeepAlive)
Thread.yield()
Field.isEnumConstant(Field)
MemberName.init(MemberName, Class, String, Object, int)
Gson.excluder(Gson)
ChannelPipeline.context(ChannelPipeline, Class | ChannelPipeline, String | ChannelPipeline, ChannelHandler)
Snooper.addOSData(Snooper)
List.subList(List, int, int)
Toolkit.getProperty(String, String)
Vector.addElement(Vector, Object)
ChronoLocalDateTime.with(ChronoLocalDateTime, TemporalAdjuster | ChronoLocalDateTime, TemporalField, long | ChronoLocalDateTime, TemporalField, long | ChronoLocalDateTime, TemporalAdjuster)
ResourcePackRepository.getResourcePackEntry(ResourcePackRepository)
AtomicInteger.weakCompareAndSet(AtomicInteger, int, int)
Instant.plusSeconds(Instant, long)
OffsetTime.format(OffsetTime, DateTimeFormatter)
URI.needsNormalization(String)
MethodHandle.customize(MethodHandle)
ImmutableMultiset.toImmutableMultiset( | Function, ToIntFunction)
Stream.findAny(Stream)
Window.setVisible(Window, boolean)
FontLineMetrics.getStrikethroughThickness(FontLineMetrics)
UnmodifiableListIterator.add(UnmodifiableListIterator, Object)
SortedSet.tailSet(SortedSet, Object)
Item.getDefaultInstance(Item)
NetHandlerPlayClient.handleWindowItems(NetHandlerPlayClient, SPacketWindowItems)
FileChannel.open(Path, Set, FileAttribute[] | Path, OpenOption[])
File.getAbsoluteFile(File)
RenderGlobal.getDebugInfoRenders(RenderGlobal)
RenderGlobal.renderWorldBorder(RenderGlobal, Entity, float)
Container.initializeFocusTraversalKeys(Container)
SPacketUpdateTileEntity.readPacketData(SPacketUpdateTileEntity, PacketBuffer)
FontMetrics.stringWidth(FontMetrics, String)
Vector.ensureCapacity(Vector, int)
AttributeValues.getPosture(AttributeValues)
AppContext.getPropertyChangeListeners(AppContext, String | AppContext)
BlockPos.subtract(BlockPos, Vec3i)
AccessibleSelection.clearAccessibleSelection(AccessibleSelection)
Executable.getAnnotationsByType(Executable, Class)
Material.blocksLight(Material)
Chunk.generateHeightMap(Chunk)
WorldInfo.access$900(WorldInfo)
AccessControlContext.hashCode(AccessControlContext)
Advancement.getRequirementCount(Advancement)
Framebuffer.framebufferClear(Framebuffer)
IResourcePack.getPackImage(IResourcePack)
Period.from(TemporalAmount)
Item.onEntityItemUpdate(Item, EntityItem)
SoundHandler.removeListener(SoundHandler, ISoundEventListener)
URI.getRawFragment(URI)
ChronoLocalDateTime.format(ChronoLocalDateTime, DateTimeFormatter)
Graphics.getClip(Graphics)
CreativeTabs.isOnTopRow(CreativeTabs)
ZoneOffsetTransition.isGap(ZoneOffsetTransition)
EntityDataManager.getAll(EntityDataManager)
Range.inRange(Range, int)
Component.processMouseMotionEvent(Component, MouseEvent)
Potion.setIconIndex(Potion, int, int)
SampleModel.getNumBands(SampleModel)
ClassLoader.loadLibrary(Class, String, boolean)
ImmutableTable.containsColumn(ImmutableTable, Object)
AccessControlContext.getAssignedCombiner(AccessControlContext)
OfPrimitive.trySplit(OfPrimitive | OfPrimitive)
DataEntry.setValue(DataEntry, Object)
Vector.removeElement(Vector, Object)
DropTarget.removeNotify(DropTarget, ComponentPeer)
ImmutableMap.isEmpty(ImmutableMap)
Hashtable.forEach(Hashtable, BiConsumer)
CharBuffer.compareTo(CharBuffer, Object | CharBuffer, CharBuffer)
EntityLivingBase.applyEntityAttributes(EntityLivingBase)
Period.validateChrono(Period, TemporalAccessor)
AccessibleSelection.addAccessibleSelection(AccessibleSelection, int)
Entity.getMirroredYaw(Entity, Mirror)
VolatileImage.getWidth(VolatileImage)
InetAddress.getAddress(InetAddress)
ImmutableMultimap.toString(ImmutableMultimap)
Biome.getModdedBiomeFoliageColor(Biome, int)
Period.readObject(Period, ObjectInputStream)
MethodHandle.asSpreader(MethodHandle, Class, int)
DropTargetAutoScroller.stop(DropTargetAutoScroller)
Duration.parse(CharSequence)
GameType.valueOf(String)
Channel.isWritable(Channel)
Long.lowestOneBit(long)
Path.getRoot(Path)
WorldInfo.setDifficulty(WorldInfo, EnumDifficulty)
DoubleStream.reduce(DoubleStream, DoubleBinaryOperator | DoubleStream, double, DoubleBinaryOperator)
MusicType.getMusicLocation(MusicType)
Class.getMethod(Class, String, Class[])
DropTarget.dragOver(DropTarget, DropTargetDragEvent)
Date.getTimezoneOffset(Date)
Entity.setAir(Entity, int)
DragSourceContext.getTransferable(DragSourceContext)
Factory.getMembers(Factory, Class, String, Object, int, Class)
Factory.getMethods(Factory, Class, boolean, Class | Factory, Class, boolean, String, MethodType, Class)
Iterator.remove(Iterator)
PlatformLogger.info(PlatformLogger, String | PlatformLogger, String, Object[] | PlatformLogger, String, Throwable)
EntityLivingBase.getWaterSlowDown(EntityLivingBase)
Shader.deleteShader(Shader)
Minecraft.setServerData(Minecraft, ServerData)
BoundMethodHandle.access$300()
WorldType.hasInfoNotice(WorldType)
Rectangle.setBounds(Rectangle, Rectangle | Rectangle, int, int, int, int)
RenderLivingBase.preRenderCallback(RenderLivingBase, EntityLivingBase, float)
Vector.elements(Vector)
GuiButton.getButtonWidth(GuiButton)
Method.getName(Method)
Component.isCursorSet(Component)
NetworkManager.exceptionCaught(NetworkManager, ChannelHandlerContext, Throwable)
DisplayInfo.getBackground(DisplayInfo)
WorldInfo.getDifficulty(WorldInfo)
CompositeByteBuf.copy(CompositeByteBuf, int, int)
ChannelPromise.channel(ChannelPromise)
World.findNearestEntityWithinAABB(World, Class, AxisAlignedBB, Entity)
Attributes.put(Attributes, Object, Object)
AxisAlignedBB.contract(AxisAlignedBB, double, double, double)
ChunkPos.hashCode(ChunkPos)
RenderGlobal.deleteAllDisplayLists(RenderGlobal)
Map.computeIfPresent(Map, Object, BiFunction)
ColorModel.getAlphaRaster(ColorModel, WritableRaster)
RenderGlobal.loadRenderers(RenderGlobal)
GameType.hasLimitedInteractions(GameType)
OptionalDouble.hashCode(OptionalDouble)
BufferBuilder.putColorRGB_F(BufferBuilder, float, float, float, int)
EntityLiving.getJumpHelper(EntityLiving)
Method.getParameterTypes(Method)
ThreadGroup.setMaxPriority(ThreadGroup, int)
ProfileEntry.getExpirationDate(ProfileEntry)
Entity.dismountRidingEntity(Entity)
ScorePlayerTeam.getColor(ScorePlayerTeam)
SoundManager.addListener(SoundManager, ISoundEventListener)
Class.cast(Class, Object)
EntityLivingBase.getAIMoveSpeed(EntityLivingBase)
PropertyChangeSupport.fire(PropertyChangeListener[], PropertyChangeEvent)
FieldRepository.parse(FieldRepository, String | FieldRepository, String)
ImmutableList.equals(ImmutableList, Object)
Item.onUpdate(Item, ItemStack, World, Entity, int, boolean)
Toolkit.getSystemEventQueueImpl(Toolkit)
EntityLivingBase.checkTotemDeathProtection(EntityLivingBase, DamageSource)
AccessibleTable.setAccessibleColumnDescription(AccessibleTable, int, Accessible)
StringBuilder.charAt(StringBuilder, int)
EntityLiving.getPathPriority(EntityLiving, PathNodeType)
Field.getAnnotationsByType(Field, Class)
Item.doesSneakBypassUse(Item, ItemStack, IBlockAccess, BlockPos, EntityPlayer)
Class.getDeclaredAnnotations(Class)
PlayerChunkMapEntry.isSentToPlayers(PlayerChunkMapEntry)
ItemCameraTransforms.applyTransform(ItemCameraTransforms, TransformType)
String.codePointAt(String, int)
CombatEntry.getDamageSrc(CombatEntry)
TileEntity.getUpdateTag(TileEntity)
Raster.getSampleDouble(Raster, int, int, int)
ChunkCache.isAirBlock(ChunkCache, BlockPos)
EntityPlayer.isPushedByWater(EntityPlayer)
AttributeValues.setSwapColors(AttributeValues, boolean)
Container.checkNotAWindow(Container, Component)
ImmutableCollection.writeReplace(ImmutableCollection)
Biome.registerBiomes()
Thread.suspend0(Thread)
AsynchronousFileChannel.open(Path, Set, ExecutorService, FileAttribute[] | Path, OpenOption[])
StatisticsManagerServer.saveStatFile(StatisticsManagerServer)
Chunk.enqueueRelightChecks(Chunk)
ConstantPool.getLongAt0(ConstantPool, Object, int)
NetworkManager.flushOutboundQueue(NetworkManager)
BufferedImage.getSampleModel(BufferedImage)
ChannelPipeline.fireChannelUnregistered(ChannelPipeline)
MemberName.isMethodHandleInvoke(MemberName)
Thread.exit(Thread)
OffsetDateTime.plusNanos(OffsetDateTime, long)
FontStrike.getGlyphMetrics(FontStrike, int)
MapItemRenderer.access$600()
Vec3d.toString(Vec3d)
Wrapper.copyArrayUnboxing(Wrapper, Object[], int, Object, int, int)
WritableRaster.setDataElements(WritableRaster, int, int, int, int, Object | WritableRaster, int, int, Raster | WritableRaster, int, int, Object)
Cursor.finalizeImpl(long)
TextureMap.tick(TextureMap)
DataBuffer.getDataTypeSize(int)
EntityLiving.getArmorByChance(EntityEquipmentSlot, int)
MethodHandle.asType(MethodHandle, MethodType)
MethodTypeSignature.getExceptionTypes(MethodTypeSignature)
Raster.getDataElements(Raster, int, int, int, int, Object | Raster, int, int, Object)
Entity.getEquipmentAndArmor(Entity)
EntityPlayer.onEnchantmentCritical(EntityPlayer, Entity)
OfLong.trySplit(OfLong | OfLong | OfLong)
Calendar.setLenient(Calendar, boolean)
TextHitInfo.trailing(int)
MethodTypeForm.findForm(MethodType)
Side.isClient(Side)
BufferedImage.coerceData(BufferedImage, boolean)
AttributeSet.getAttribute(AttributeSet, Object)
LambdaForm.hashCode(LambdaForm)
OptionalDouble.empty()
Graphics.drawPolygon(Graphics, int[], int[], int | Graphics, Polygon)
FontRenderer.onResourceManagerReload(FontRenderer, IResourceManager)
PrintJob.finalize(PrintJob)
MappedByteBuffer.force0(MappedByteBuffer, FileDescriptor, long, long)
EntityPlayerMP.sendEnterCombat(EntityPlayerMP)
URI.lowMask(String | char, char)
ClassLoader.addClass(ClassLoader, Class)
Calendar.complete(Calendar)
IResource.getInputStream(IResource)
BigDecimal.adjustScale(BigDecimal, int, long)
OffsetDateTime.toString(OffsetDateTime)
LocalDate.plusDays(LocalDate, long)
CharSequence.codePoints(CharSequence)
ItemStack.setTranslatableName(ItemStack, String)
Multimap.lambda$forEach$0(BiConsumer, Entry)
Block.setLightLevel(Block, float)
Toolkit.notifyAWTEventListeners(Toolkit, AWTEvent)
DropTargetContext.getTargetActions(DropTargetContext)
Stream.reduce(Stream, Object, BinaryOperator | Stream, Object, BiFunction, BinaryOperator | Stream, BinaryOperator)
ZonedDateTime.of(int, int, int, int, int, int, int, ZoneId | LocalDateTime, ZoneId | LocalDate, LocalTime, ZoneId)
Window.removeNotify(Window)
ChannelPipeline.fireChannelRegistered(ChannelPipeline)
Class.access$100(Class, boolean)
Minecraft.updateFramebufferSize(Minecraft)
MapInfo.update(MapInfo, int, int)
ItemStack.registerFixes(DataFixer)
ModelBiped.getMainHand(ModelBiped, Entity)
ByteBuf.bytesBefore(ByteBuf, int, byte | ByteBuf, int, int, byte | ByteBuf, byte)
URI.getSchemeSpecificPart(URI)
InetAddress.isMCGlobal(InetAddress)
Rectangle.move(Rectangle, int, int)
GameType.getByName(String)
String.getChars(String, int, int, char[], int | String, char[], int)
EntityPlayer.refreshDisplayName(EntityPlayer)
EntityPlayerMP.sendPlayerAbilities(EntityPlayerMP)
ZoneOffsetTransition.compareTo(ZoneOffsetTransition, Object | ZoneOffsetTransition, ZoneOffsetTransition)
ServerData.getServerDataFromNBTCompound(NBTTagCompound)
InetAddress.cacheInitIfNeeded()
LanguageManager.setCurrentLanguage(LanguageManager, Language)
ZonedDateTime.toLocalTime(ZonedDateTime)
Vector.grow(Vector, int)
CreativeTabs.setRelevantEnchantmentTypes(CreativeTabs, EnumEnchantmentType[])
Item.rayTrace(Item, World, EntityPlayer, boolean)
Promise.removeListener(Promise, GenericFutureListener)
StringBuilder.ensureCapacity(StringBuilder, int)
GameSettings.dataFix(GameSettings, NBTTagCompound)
SoundManager.reloadSoundSystem(SoundManager)
Component.enableEvents(Component, long)
DoubleStream.boxed(DoubleStream)
ChunkCompileTaskGenerator.compareTo(ChunkCompileTaskGenerator, ChunkCompileTaskGenerator | ChunkCompileTaskGenerator, Object)
OfDouble.next(OfDouble | OfDouble)
ImageCapabilities.isAccelerated(ImageCapabilities)
RegionRenderCacheBuilder.getWorldRendererByLayerId(RegionRenderCacheBuilder, int)
Duration.isZero(Duration)
AbstractStringBuilder.ensureCapacity(AbstractStringBuilder, int)
RenderLivingBase.isVisible(RenderLivingBase, EntityLivingBase)
MethodType.checkPtypes(Class[])
Gson.getAdapter(Gson, TypeToken | Gson, Class)
Thread.clone(Thread)
MinecraftServer.getGameType(MinecraftServer)
LocalDateTime.atOffset(LocalDateTime, ZoneOffset)
ConstantPool.getUTF8At(ConstantPool, int)
Entity.isWet(Entity)
BiomeDecorator.genStandardOre2(BiomeDecorator, World, Random, int, WorldGenerator, int, int)
GlyphMetrics.isStandard(GlyphMetrics)
DamageSource.setFireDamage(DamageSource)
BiomeDecorator.genStandardOre1(BiomeDecorator, World, Random, int, WorldGenerator, int, int)
Path.getPosition(Path, Entity)
State.getVertexFormat(State)
Block.getBoundingBox(Block, IBlockState, IBlockAccess, BlockPos)
RenderChunk.setFrameIndex(RenderChunk, int)
EntityPlayerMP.onCriticalHit(EntityPlayerMP, Entity)
Window.setTemporaryLostComponent(Window, Component)
Period.subtractFrom(Period, Temporal)
EntityPlayer.canOpen(EntityPlayer, LockCode)
PlayerList.getOnlinePlayerNames(PlayerList)
ChronoZonedDateTime.getLong(ChronoZonedDateTime, TemporalField)
KeyPair.getPublic(KeyPair)
Lookup.checkSecurityManager(Lookup, Class, MemberName)
JsonWriter.endObject(JsonWriter)
TextHitInfo.hashCode(TextHitInfo)
Axis.valueOf(String)
GlyphVector.getGlyphLogicalBounds(GlyphVector, int)
ClassLoader.getPackages(ClassLoader)
ConstantPool.getIntAt0(ConstantPool, Object, int)
EntityLivingBase.damageShield(EntityLivingBase, float)
Block.getStateAtViewpoint(Block, IBlockState, IBlockAccess, BlockPos, Vec3d)
ShaderManager.markDirty(ShaderManager)
Stream.mapToInt(Stream, ToIntFunction)
Window.access$400(Window)
EnumRenderType.valueOf(String)
ByteBuffer.getChar(ByteBuffer, int | ByteBuffer)
ScrollPanePeer.setValue(ScrollPanePeer, Adjustable, int)
ZoneOffset.getLong(ZoneOffset, TemporalField)
Block.getBedDirection(Block, IBlockState, IBlockAccess, BlockPos)
WorldType.getSpawnFuzz(WorldType, WorldServer, MinecraftServer)
MinecraftServer.shareToLAN(MinecraftServer, GameType, boolean)
Long.numberOfTrailingZeros(long)
EntityLivingBase.getArmSwingAnimationEnd(EntityLivingBase)
Window.updateChildrenBlocking(Window)
AxisAlignedBB.intersects(AxisAlignedBB, AxisAlignedBB | AxisAlignedBB, Vec3d, Vec3d | AxisAlignedBB, double, double, double, double, double, double)
NBTTagCompound.hasUniqueId(NBTTagCompound, String)
ChunkProviderServer.saveChunkData(ChunkProviderServer, Chunk)
TemporalAccessor.isSupported(TemporalAccessor, TemporalField)
MinecraftServer.isServerRunning(MinecraftServer)
GameSettings.setSoundLevel(GameSettings, SoundCategory, float)
ScorePlayerTeam.getNameTagVisibility(ScorePlayerTeam)
Snooper.addStatToSnooper(Snooper, String, Object)
FileSystemProvider.getPath(FileSystemProvider, URI)
Particle.setExpired(Particle)
World.containsAnyLiquid(World, AxisAlignedBB)
Vec3i.equals(Vec3i, Object)
Name.isConstantZero(Name)
JsonWriter.setLenient(JsonWriter, boolean)
Gson.newJsonWriter(Gson, Writer)
JsonReader.nextBoolean(JsonReader)
ReflectionFactory.newMethodAccessor(ReflectionFactory, Method)
World.tickPlayers(World)
DisplayInfo.isHidden(DisplayInfo)
SampleModel.getHeight(SampleModel)
EnumFacing.getName(EnumFacing)
PlayerProfileCache.getGameProfileForUsername(PlayerProfileCache, String)
Dialog.setOpacity(Dialog, float)
Thread.setDefaultUncaughtExceptionHandler(UncaughtExceptionHandler)
BigDecimal.negate(BigDecimal, MathContext | BigDecimal)
Constructor.getRoot(Constructor)
OffsetTime.adjustInto(OffsetTime, Temporal)
EntityPlayerMP.awardTeamKillScores(EntityPlayerMP, Entity)
Factory.getConstructors(Factory, Class, Class)
AffineTransform.calculateType(AffineTransform)
JsonArray.equals(JsonArray, Object)
EntityLiving.getMoveHelper(EntityLiving)
World.removeTileEntity(World, BlockPos)
JsonWriter.setSerializeNulls(JsonWriter, boolean)
Period.multipliedBy(Period, int | Period, int)
Graphics.getColor(Graphics)
URI.encode(String)
WritableRaster.setSample(WritableRaster, int, int, int, int | WritableRaster, int, int, int, float | WritableRaster, int, int, int, double)
ItemStack.hasDisplayName(ItemStack)
BigInteger.multiplyToomCook3(BigInteger, BigInteger)
Builder.addCopies(Builder, Object, int)
BlockModelShapes.registerBuiltInBlocks(BlockModelShapes, Block[])
ZoneRules.nextTransition(ZoneRules, Instant)
GuiToast.access$100(GuiToast)
Font.defaultLineMetrics(Font, FontRenderContext)
Window.postEvent(Window, Event)
ClassSignature.getSuperclass(ClassSignature)
TimeZone.getOffsets(TimeZone, long, int[])
CompositeByteBuf._setLong(CompositeByteBuf, int, long)
NumericShaper.search(int, int[], int, int)
BigDecimal.divideAndRoundByTenPow(BigInteger, int, int)
Date.writeObject(Date, ObjectOutputStream)
AtomicInteger.getAndSet(AtomicInteger, int)
WindowPeer.updateWindow(WindowPeer)
NBTTagCompound.toString(NBTTagCompound)
Minecraft.isIntegratedServerRunning(Minecraft)
NodeProcessor.setCanSwim(NodeProcessor, boolean)
CrashReport.makeCategoryDepth(CrashReport, String, int)
BufferedImage.hasTileWriters(BufferedImage)
Duration.from(TemporalAmount)
Executable.printModifiersIfNonzero(Executable, StringBuilder, int, boolean)
Cursor.access$000(Cursor)
World.getScoreboard(World)
Cursor.access$002(Cursor, long)
EntityPlayer.openGui(EntityPlayer, Object, int, World, int, int, int)
Date.toInstant(Date)
Block.getHarvestTool(Block, IBlockState)
IntSummaryStatistics.getCount(IntSummaryStatistics)
Style.getStrikethrough(Style)
NetHandlerPlayClient.handleTitle(NetHandlerPlayClient, SPacketTitle)
ColorModel.getsRGB8ToLinearRGB16LUT()
ChronoLocalDate.timeLineOrder()
VillageCollection.dropOldestVillagerPosition(VillageCollection)
World.setLastLightningBolt(World, int)
Attribute.get(Attribute)
ZonedDateTime.get(ZonedDateTime, TemporalField)
OffsetTime.isSupported(OffsetTime, TemporalUnit | OffsetTime, TemporalField)
PlatformLogger.setLevel(PlatformLogger, Level)
Color.createContext(Color, ColorModel, Rectangle, Rectangle2D, AffineTransform, RenderingHints)
PlayerProfileCache.addEntry(PlayerProfileCache, GameProfile, Date | PlayerProfileCache, GameProfile)
PaintEvent.getUpdateRect(PaintEvent)
ClassLoader.clearAssertionStatus(ClassLoader)
EventQueue.getNextEventPrivate(EventQueue)
Wrapper.isOther(Wrapper)
EntityDataManager.get(EntityDataManager, DataParameter)
CompositeByteBuf._getShort(CompositeByteBuf, int)
AffineTransform.setToShear(AffineTransform, double, double)
LocalDateTime.isSupported(LocalDateTime, TemporalUnit | LocalDateTime, TemporalField)
File.deleteOnExit(File)
AccessibleComponent.isFocusTraversable(AccessibleComponent)
Session.getPlayerID(Session)
WorldServer.loadEntities(WorldServer, Collection)
Constructor.getName(Constructor)
Class.isAsciiDigit(char)
World.updateWeather(World)
Minecraft.getProfileProperties(Minecraft)
Vector.equals(Vector, Object)
Stream.filter(Stream, Predicate)
MethodType.checkPtype(Class)
Duration.minusDays(Duration, long)
AccessibleEditableText.delete(AccessibleEditableText, int, int)
Method.acquireMethodAccessor(Method)
ResourceBundle.loadBundle(CacheKey, List, Control, boolean)
TemporalAccessor.get(TemporalAccessor, TemporalField)
CollisionRule.getByName(String)
TileEntity.create(World, NBTTagCompound)
ImmutableMultimap.keys(ImmutableMultimap | ImmutableMultimap)
Container.invalidate(Container)
Region.isInsideQuickCheck(Region, Region)
Attributes.clone(Attributes)
Entity.getEntityId(Entity)
Builder.expandedCapacity(int, int)
OffsetDateTime.plusWeeks(OffsetDateTime, long)
EnumHandSide.values()
JsonReader.nextNonWhitespace(JsonReader, boolean)
BaseLocale.getLanguage(BaseLocale)
Entity.getPassengers(Entity)
EnclosingMethodInfo.isConstructor(EnclosingMethodInfo)
Minecraft.isFancyGraphicsEnabled()
CompositeByteBuf.writeByte(CompositeByteBuf, int | CompositeByteBuf, int)
Set.remove(Set, Object)
Iterable.forEach(Iterable, Consumer)
String.trim(String)
EntityMinecart.readEntityFromNBT(EntityMinecart, NBTTagCompound)
ChannelOutboundBuffer.clearUserDefinedWritability(ChannelOutboundBuffer, int)
BigInteger.divideBurnikelZiegler(BigInteger, BigInteger)
TextureAtlasSprite.updateAnimation(TextureAtlasSprite)
Players.setPlayers(Players, GameProfile[])
AppContext.isDisposed(AppContext)
ChronoZonedDateTime.range(ChronoZonedDateTime, TemporalField)
IntegratedServer.tick(IntegratedServer)
DragSource.createDragGestureRecognizer(DragSource, Class, Component, int, DragGestureListener)
ClientAdvancementManager.setSelectedTab(ClientAdvancementManager, Advancement, boolean)
Scoreboard.getScoreObjectives(Scoreboard)
EntityPlayer.getCooledAttackStrength(EntityPlayer, float)
Component.initIDs()
Vector3f.load(Vector3f, FloatBuffer)
DamageSource.isDifficultyScaled(DamageSource)
SampleModel.getPixels(SampleModel, int, int, int, int, double[], DataBuffer | SampleModel, int, int, int, int, int[], DataBuffer | SampleModel, int, int, int, int, float[], DataBuffer)
CreativeTabs.getBackgroundImageName(CreativeTabs)
ZoneOffset.from(TemporalAccessor)
JsonWriter.beginObject(JsonWriter)
AccessibleSelection.selectAllAccessibleSelection(AccessibleSelection)
NamedFunction.invoke_LL_V(MethodHandle, Object[])
PathFinder.findPath(PathFinder, IBlockAccess, EntityLiving, double, double, double, float | PathFinder, IBlockAccess, EntityLiving, BlockPos, float | PathFinder, IBlockAccess, EntityLiving, Entity, float | PathFinder, PathPoint, PathPoint, float)
MinecraftServer.getTabCompletions(MinecraftServer, ICommandSender, String, BlockPos, boolean)
Integer.signum(int)
WorldInfo.getBorderCenterZ(WorldInfo, double | WorldInfo)
AccessibleTable.setAccessibleRowHeader(AccessibleTable, AccessibleTable)
ColorModel.getDataElements(ColorModel, int, Object | ColorModel, int[], int, Object | ColorModel, float[], int, Object)
NamedFunction.invoke_LL_L(MethodHandle, Object[])
PathNavigate.getPathFinder(PathNavigate)
File.setReadOnly(File)
Players.getOnlinePlayerCount(Players)
WorldInfo.getBorderCenterX(WorldInfo | WorldInfo, double)
OfInt.nextInt(OfInt)
GuiScreen.drawWorldBackground(GuiScreen, int)
Component.getFocusTraversalKeysEnabled(Component)
Teleporter.makePortal(Teleporter, Entity)
ByteBuffer.asReadOnlyBuffer(ByteBuffer)
String.nonSyncContentEquals(String, AbstractStringBuilder)
DoubleStream.flatMap(DoubleStream, DoubleFunction)
Advancement.getRequirements(Advancement)
ZoneId.getId(ZoneId)
RenderGlobal.hasNoChunkUpdates(RenderGlobal)
World.createChunkProvider(World)
CrashReportCategory.trimStackTraceEntriesFromBottom(CrashReportCategory, int)
AccessibleContext.setAccessibleName(AccessibleContext, String)
Dialog.setUndecorated(Dialog, boolean)
Condition.awaitUninterruptibly(Condition)
EnumDifficulty.valueOf(String)
URI.checkPath(String, String, String)
ValueRange.readObject(ValueRange, ObjectInputStream)
BaseLocale.getInstance(String, String, String, String)
ColorModel.getRGB(ColorModel, Object | ColorModel, int)
ZoneRules.findTransitionArray(ZoneRules, int)
Clipboard.getName(Clipboard)
Class.createAnnotationData(Class, int)
Block.randomDisplayTick(Block, IBlockState, World, BlockPos, Random)
ValueRange.isValidIntValue(ValueRange, long)
EntityLivingBase.getItemInUseCount(EntityLivingBase)
CombatEntry.isLivingDamageSrc(CombatEntry)
Random.writeObject(Random, ObjectOutputStream)
ComponentPeer.applyShape(ComponentPeer, Region)
CreativeTabs.getColumn(CreativeTabs)
Block.causesSuffocation(Block, IBlockState)
FontLineMetrics.getDescent(FontLineMetrics)
Window.eventEnabled(Window, AWTEvent)
Minecraft.setIngameFocus(Minecraft)
Month.getValue(Month)
OffsetTime.minus(OffsetTime, long, TemporalUnit | OffsetTime, long, TemporalUnit | OffsetTime, TemporalAmount | OffsetTime, TemporalAmount)
NetHandlerPlayClient.handlePlayerAbilities(NetHandlerPlayClient, SPacketPlayerAbilities)
Calendar.isNarrowStyle(Calendar, int)
Point.move(Point, int, int)
EntityTracker.sendLeashedEntitiesInChunk(EntityTracker, EntityPlayerMP, Chunk)
MinecraftServer.shouldBroadcastConsoleToOps(MinecraftServer)
ShaderManager.addSamplerTexture(ShaderManager, String, Object)
Month.range(Month, TemporalField)
NetworkManager.processReceivedPackets(NetworkManager)
Action.shouldAllowInChat(Action | Action)
MinecraftServer.getBuildLimit(MinecraftServer)
ChannelOutboundBuffer.nioBuffers(ChannelOutboundBuffer)
WorldGenerator.setBlockAndNotifyAdequately(WorldGenerator, World, BlockPos, IBlockState)
Entity.getHoverEvent(Entity)
EntityItemFrame.setItemRotation(EntityItemFrame, int)
ValueRange.isIntValue(ValueRange)
Minecraft.getSession(Minecraft)
Rectangle.inside(Rectangle, int, int)
Entity.getArmorInventoryList(Entity)
ItemStack.getOrCreateSubCompound(ItemStack, String)
NBTTagCompound.setIntArray(NBTTagCompound, String, int[])
Entity.onCollideWithPlayer(Entity, EntityPlayer)
RenderChunk.stopCompileTask(RenderChunk)
ThreadGroup.allowThreadSuspension(ThreadGroup, boolean)
RenderGlobal.renderFilledBox(AxisAlignedBB, float, float, float, float | double, double, double, double, double, double, float, float, float, float)
Executable.declaredAnnotations(Executable)
URLClassPath.getLookupCacheURLs(ClassLoader)
Package.getDeclaredAnnotations(Package)
IsoChronology.writeReplace(IsoChronology)
LocalTime.ofNanoOfDay(long)
Invokers.toString(Invokers)
TextureMap.registerSprite(TextureMap, ResourceLocation)
Map.getOrDefault(Map, Object, Object)
Chunk.getLastExtendedBlockStorage(Chunk)
ConstantPool.getClassAt0(ConstantPool, Object, int)
BoundMethodHandle.speciesData(LambdaForm | BoundMethodHandle)
Random.nextBytes(Random, byte[])
Lookup.findBoundCallerClass(Lookup, MemberName)
Entity.setCustomNameTag(Entity, String)
EnumUsage.values()
OptionalDouble.orElse(OptionalDouble, double)
StateImplementation.getAmbientOcclusionLightValue(StateImplementation)
AccessibleContext.removePropertyChangeListener(AccessibleContext, PropertyChangeListener)
DropTarget.dragExit(DropTarget, DropTargetEvent)
PotionEffect.getIsAmbient(PotionEffect)
NamedFunction.isIdentity(NamedFunction)
AttributeValues.getForeground(AttributeValues)
ItemStack.serializeNBT(ItemStack | ItemStack)
Manifest.write(Manifest, OutputStream)
ColorSpace.getType(ColorSpace)
AccessibleComponent.setSize(AccessibleComponent, Dimension)
ProtectionDomain.getClassLoader(ProtectionDomain)
LocalDate.minusMonths(LocalDate, long)
LootPool.addEntry(LootPool, LootEntry)
Minecraft.getConnection(Minecraft)
FieldAccessor.get(FieldAccessor, Object)
NetworkPlayerInfo.getHealthBlinkTime(NetworkPlayerInfo)
ImmutableMap.containsKey(ImmutableMap, Object)
DragSource.getListeners(DragSource, Class)
MethodType.form(MethodType)
AffineTransform.preConcatenate(AffineTransform, AffineTransform)
MinecraftServer.reload(MinecraftServer)
ByteBuffer.isDirect(ByteBuffer)
Block.breakBlock(Block, World, BlockPos, IBlockState)
MethodType.appendParameterTypes(MethodType, Class[] | MethodType, List)
BigInteger.passesLucasLehmer(BigInteger)
Material.isLiquid(Material)
BaseCalendar.getYearFromFixedDate(BaseCalendar, long)
WorldType.handleSlimeSpawnReduction(WorldType, Random, World)
JsonReader.setLenient(JsonReader, boolean)
DropTarget.updateAutoscroll(DropTarget, Point)
Window.getFocusableWindowState(Window)
TileEntity.setPos(TileEntity, BlockPos)
Village.tick(Village, int)
Map.hashCode(Map)
IntegratedServer.addServerInfoToCrashReport(IntegratedServer, CrashReport)
Month.getDisplayName(Month, TextStyle, Locale)
IBakedModel.getOverrides(IBakedModel)
LongBuffer.toString(LongBuffer)
MinecraftServer.setBuildLimit(MinecraftServer, int)
Duration.between(Temporal, Temporal)
Period.hashCode(Period)
File.equals(File, Object)
Lookup.checkField(Lookup, byte, Class, MemberName)
FramePeer.setState(FramePeer, int)
Entity.pushOutOfBlocks(Entity, double, double, double)
Component.getInputContext(Component)
DataBuffer.getOffsets(DataBuffer)
BaselineResizeBehavior.values()
TextHitInfo.getOffsetHit(TextHitInfo, int)
BigInteger.toByteArray(BigInteger)
Component.isDoubleBuffered(Component)
Window.processEvent(Window, AWTEvent)
ThreadGroup.checkAccess(ThreadGroup)
BasicFileAttributes.lastAccessTime(BasicFileAttributes)
PotionEffect.getDuration(PotionEffect)
DamageSource.getDeathMessage(DamageSource, EntityLivingBase)
Double.doubleToLongBits(double)
TextFormatting.lowercaseAlpha(String)
ChronoZonedDateTime.isAfter(ChronoZonedDateTime, ChronoZonedDateTime)
InetAddressHolder.init(InetAddressHolder, String, int)
RenderChunk.getCompiledChunk(RenderChunk)
Entity.setInvisible(Entity, boolean)
ZonedDateTime.toLocalDateTime(ZonedDateTime | ZonedDateTime)
Wrapper.primitiveSimpleName(Wrapper)
Block.isReplaceableOreGen(Block, IBlockState, IBlockAccess, BlockPos, Predicate)
WorldType.getHorizon(WorldType, World)
NetHandlerPlayClient.func_194307_a(NetHandlerPlayClient, SPacketPlaceGhostRecipe)
ZonedDateTime.plusMonths(ZonedDateTime, long)
Advancement.getCriteria(Advancement)
Chunk.recheckGaps(Chunk, boolean)
ThreadLocalMap.expungeStaleEntries(ThreadLocalMap)
Window.closeSplashScreen(Window)
Annotation.annotationType(Annotation)
ServerStatusResponse.setServerDescription(ServerStatusResponse, ITextComponent)
Field.setChar(Field, Object, char)
ClassLoader.getBootstrapClassPath()
List.iterator(List)
Wrapper.isWrapperType(Class)
Block.isFertile(Block, World, BlockPos)
PlayerList.getPlayerNBT(PlayerList, EntityPlayerMP)
TimeZone.getAvailableIDs( | int)
EntityLivingBase.performHurtAnimation(EntityLivingBase)
Constructor.getAnnotatedReturnType(Constructor)
ClassLoader.registerNatives()
BufferBuilder.addVertexData(BufferBuilder, int[])
Collector.combiner(Collector)
File.delete(File)
Window.preProcessKeyEvent(Window, KeyEvent)
Range.maskToRangeSet(int)
ThreadGroup.setDaemon(ThreadGroup, boolean)
SoundType.getVolume(SoundType)
Chunk.checkSkylightNeighborHeight(Chunk, int, int, int)
NetworkManager.closeChannel(NetworkManager, ITextComponent)
MemberName.hasReceiverTypeDispatch(MemberName)
FileStore.getUsableSpace(FileStore)
ChronoLocalDate.lengthOfMonth(ChronoLocalDate)
OffsetDateTime.writeReplace(OffsetDateTime)
Particle.nextTextureIndexX(Particle)
ServerResourceMode.values()
Block.setTranslationKey(Block, String)
Path.getCurrentPos(Path)
IResourcePack.getResourceDomains(IResourcePack)
ChannelConfig.setAutoRead(ChannelConfig, boolean)
RenderingHints.add(RenderingHints, RenderingHints)
ScorePlayerTeam.getName(ScorePlayerTeam)
Chunk.setHasEntities(Chunk, boolean)
NamedFunction.computeInvoker(MethodTypeForm)
EventDispatchThread.processException(EventDispatchThread, Throwable)
OptionalInt.orElse(OptionalInt, int)
EnumBlockRenderType.valueOf(String)
LootPool.access$400(LootPool)
RenderingHints.remove(RenderingHints, Object)
Component.coalesceEvents(Component, AWTEvent, AWTEvent)
Minecraft.lambda$populateSearchTreeManager$1(ItemStack)
Minecraft.lambda$populateSearchTreeManager$2(ItemStack)
URLConnection.getExpiration(URLConnection)
LambdaForm.expressionCount(LambdaForm)
EntityPlayer.canPlayerEdit(EntityPlayer, BlockPos, EnumFacing, ItemStack)
Minecraft.lambda$populateSearchTreeManager$5(RecipeList)
Level.isMoreSpecificThan(Level, Level)
StrikeMetrics.getLeading(StrikeMetrics)
Minecraft.lambda$populateSearchTreeManager$7(RecipeList)
Graphics2D.drawString(Graphics2D, String, int, int | Graphics2D, AttributedCharacterIterator, float, float | Graphics2D, AttributedCharacterIterator, int, int | Graphics2D, String, float, float)
StringBuilder.setLength(StringBuilder, int)
String.hashCode(String)
LocalDate.minusWeeks(LocalDate, long)
URI.appendSchemeSpecificPart(URI, StringBuffer, String, String, String, String, int, String, String)
Spliterator.hasCharacteristics(Spliterator, int)
Entity.canRiderInteract(Entity)
TypeVariable.getBounds(TypeVariable)
Debug.marshal(String)
EnumFacing.rotateZ(EnumFacing)
EnumFacing.rotateY(EnumFacing)
EnumFacing.rotateX(EnumFacing)
AsynchronousFileChannel.tryLock(AsynchronousFileChannel | AsynchronousFileChannel, long, long, boolean)
ClassLoader.postDefineClass(ClassLoader, Class, ProtectionDomain)
Control.toResourceName(Control, String, String)
Long.stringSize(long)
NetHandlerPlayClient.handleExplosion(NetHandlerPlayClient, SPacketExplosion)
EntityPlayer.getMaxInPortalTime(EntityPlayer)
MinecraftServer.setUserMessage(MinecraftServer, String)
URL.getHostAddress(URL)
World.updateBlocks(World)
DataBuffer.setElemDouble(DataBuffer, int, double | DataBuffer, int, int, double)
RenderItem.setupGuiTransform(RenderItem, int, int, boolean)
VertexFormat.getElementCount(VertexFormat)
JsonWriter.name(JsonWriter, String)
ClassLoader.initSystemClassLoader()
Marker.remove(Marker, Marker)
AccessibleComponent.addFocusListener(AccessibleComponent, FocusListener)
IntStream.concat(IntStream, IntStream)
Window.isModalBlocked(Window)
World.newExplosion(World, Entity, double, double, double, float, boolean, boolean)
AtomicInteger.toString(AtomicInteger)
DragGestureEvent.startDrag(DragGestureEvent, Cursor, Transferable, DragSourceListener | DragGestureEvent, Cursor, Image, Point, Transferable, DragSourceListener | DragGestureEvent, Cursor, Transferable)
IsoChronology.date(IsoChronology, TemporalAccessor | IsoChronology, TemporalAccessor | IsoChronology, Era, int, int, int | IsoChronology, int, int, int | IsoChronology, int, int, int | IsoChronology, Era, int, int, int)
Entity.isInvisibleToPlayer(Entity, EntityPlayer)
WatchKey.watchable(WatchKey)
Chunk.onUnload(Chunk)
GameSettings.getSoundLevel(GameSettings, SoundCategory)
BigInteger.stripLeadingZeroBytes(byte[])
EntityPlayer.xpBarCap(EntityPlayer)
WorldInfo.getVersionName(WorldInfo)
NetHandlerPlayClient.handleSelectAdvancementsTab(NetHandlerPlayClient, SPacketSelectAdvancementsTab)
NBTBase.copy(NBTBase)
WorldServer.createBonusChest(WorldServer)
Entity.getAdjustedHorizontalFacing(Entity)
Component.preferredSize(Component)
URLConnection.access$000()
ProgressivePromise.sync(ProgressivePromise)
EntityLivingBase.setAbsorptionAmount(EntityLivingBase, float)
BufferedImage.getTransparency(BufferedImage)
JsonReader.push(JsonReader, int)
Toolkit.beep(Toolkit)
Color.toString(Color)
ChunkCompileTaskGenerator.getRegionRenderCacheBuilder(ChunkCompileTaskGenerator)
BlockStateContainer.createState(BlockStateContainer, Block, ImmutableMap, ImmutableMap)
Item.setDamage(Item, ItemStack, int)
MenuBarPeer.addHelpMenu(MenuBarPeer, Menu)
EntityPlayer.getSpawnDimension(EntityPlayer)
Logger.printf(Logger, Level, String, Object[] | Logger, Level, Marker, String, Object[])
Entity.doBlockCollisions(Entity)
EntityPlayerMP.updateHeldItem(EntityPlayerMP)
FunctionObject.getEntries(FunctionObject)
BlockRendererDispatcher.renderBlock(BlockRendererDispatcher, IBlockState, BlockPos, IBlockAccess, BufferBuilder)
Insets.hashCode(Insets)
NetworkSystem.getServer(NetworkSystem)
Wrapper.isSingleWord(Wrapper)
PermissionCollection.isReadOnly(PermissionCollection)
Block.isOpaqueCube(Block, IBlockState)
EnumPacketDirection.valueOf(String)
Item.setTranslationKey(Item, String)
ItemRenderer.renderSuffocationOverlay(ItemRenderer, TextureAtlasSprite)
World.getMoonPhase(World)
WorldBorder.getDamageBuffer(WorldBorder)
AccessibleStateSet.toArray(AccessibleStateSet)
ByteBuf.getUnsignedShort(ByteBuf, int)
World.neighborChanged(World, BlockPos, Block, BlockPos)
BigInteger.readObject(BigInteger, ObjectInputStream)
ColorModel.getRGBdefault()
ChronoZonedDateTime.get(ChronoZonedDateTime, TemporalField)
DoubleStream.filter(DoubleStream, DoublePredicate)
ItemStack.addAttributeModifier(ItemStack, String, AttributeModifier, EntityEquipmentSlot)
ChoicePeer.add(ChoicePeer, String, int)
Window.calculateSecurityWarningPosition(Window, double, double, double, double)
LocalDateTime.compareTo(LocalDateTime, ChronoLocalDateTime | LocalDateTime, Object)
ByteBuf.writableBytes(ByteBuf)
Calendar.setMinimalDaysInFirstWeek(Calendar, int)
CrashReportCategory.addDetail(CrashReportCategory, String, ICrashReportDetail)
ChunkCache.getLightFor(ChunkCache, EnumSkyBlock, BlockPos)
MobSpawnerBaseLogic.getSpawnerWorld(MobSpawnerBaseLogic)
Component.getBaselineResizeBehavior(Component)
Entity.getPosition(Entity)
Vec3d.subtractReverse(Vec3d, Vec3d)
PlayerList.getMaxPlayers(PlayerList)
MinecraftServer.getWorld(MinecraftServer, int)
List.replaceAll(List, UnaryOperator)
MethodTypeForm.cachedLambdaForm(MethodTypeForm, int)
SkinManager.access$000(SkinManager)
Minecraft.lambda$null$4(String)
Chronology.getDisplayName(Chronology, TextStyle, Locale)
WritableRaster.setPixels(WritableRaster, int, int, int, int, float[] | WritableRaster, int, int, int, int, double[] | WritableRaster, int, int, int, int, int[])
Minecraft.lambda$null$3(IRecipe)
Minecraft.lambda$null$6(IRecipe)
ByteBuffer.toString(ByteBuffer)
ChannelPipeline.replace(ChannelPipeline, String, String, ChannelHandler | ChannelPipeline, ChannelHandler, String, ChannelHandler | ChannelPipeline, Class, String, ChannelHandler)
ClassLoader.getBootstrapResource(String)
Sound.getType(Sound)
Long.shortValue(Long)
EntityPlayer.dropItemAndGetStack(EntityPlayer, EntityItem)
Rectangle2D.hashCode(Rectangle2D)
Window.access$300(Window)
MapItemRenderer.access$500(MapItemRenderer)
Minecraft.lambda$null$0(String)
ImmutableSetMultimap.get(ImmutableSetMultimap, Object | ImmutableSetMultimap, Object | ImmutableSetMultimap, Object | ImmutableSetMultimap, Object)
ImmutableSetMultimap.builder()
CreativeTabs.hasSearchBar(CreativeTabs)
EntityPlayer.destroyVanishingCursedItems(EntityPlayer)
EntityPlayer.onCriticalHit(EntityPlayer, Entity)
CompositeByteBuf.toByteIndex(CompositeByteBuf, int)
MemberName.access$200(MemberName, boolean)
TextureMap.getResourceLocation(TextureMap, TextureAtlasSprite)
OffsetTime.minusMinutes(OffsetTime, long)
ItemStack.areItemsEqualIgnoreDurability(ItemStack, ItemStack)
EntityPlayer.updateRidden(EntityPlayer)
DragGestureRecognizer.setSourceActions(DragGestureRecognizer, int)
World.getLootTableManager(World)
Font.getStyle(Font)
Wrapper.primitiveType(Wrapper)
Graphics.clearRect(Graphics, int, int, int, int)
LanguageManager.getLanguages(LanguageManager)
ChronoLocalDate.adjustInto(ChronoLocalDate, Temporal)
LongSummaryStatistics.combine(LongSummaryStatistics, LongSummaryStatistics)
Minecraft.getToastGui(Minecraft)
Stream.findFirst(Stream)
AppContext.getSoftReferenceValue(Object, Supplier)
Long.highestOneBit(long)
ReferenceQueue.poll(ReferenceQueue)
Window.getTemporaryLostComponent(Window)
RenderGlobal.renderBlockLayer(RenderGlobal, BlockRenderLayer | RenderGlobal, BlockRenderLayer, double, int, Entity)
BigInteger.implSquareToLenChecks(int[], int, int[], int)
Lookup.lookupClassOrNull(Lookup)
Builder.orderValuesBy(Builder, Comparator | Builder, Comparator | Builder, Comparator)
GuiScreen.actionPerformed(GuiScreen, GuiButton)
WorldInfo.isHardcoreModeEnabled(WorldInfo)
Toolkit.removeAWTEventListener(Toolkit, AWTEventListener)
Block.getExplosionResistance(Block, World, BlockPos, Entity, Explosion | Block, Entity)
AWTEvent.getAccessControlContext(AWTEvent)
Font.deriveFont(Font, Map | Font, AffineTransform | Font, int | Font, int, float | Font, float | Font, int, AffineTransform)
Entity.removePassenger(Entity, Entity)
Block.onEntityWalk(Block, World, BlockPos, Entity)
FileSystemProvider.access$000()
Marker.isInstanceOf(Marker, Marker | Marker, String)
SecondaryLoop.enter(SecondaryLoop)
Boolean.booleanValue(Boolean)
FieldAccessor.getDouble(FieldAccessor, Object)
InetAddress.isMCSiteLocal(InetAddress)
SortedSet.last(SortedSet)
Number.byteValue(Number)
BlockStateMapper.getVariants(BlockStateMapper, Block)
Locale.getAvailableLocales()
URLConnection.getContent(URLConnection | URLConnection, Class[])
Component.getY(Component)
EntityTracker.tick(EntityTracker)
Component.getX(Component)
DoubleBuffer.compact(DoubleBuffer)
Future.syncUninterruptibly(Future)
FontRenderer.renderStringAligned(FontRenderer, String, int, int, int, int, boolean)
ItemStack.setAnimationsToGo(ItemStack, int)
StateImplementation.isBlockNormalCube(StateImplementation)
Lookup.getDirectConstructorCommon(Lookup, Class, MemberName, boolean)
OffsetDateTime.minusYears(OffsetDateTime, long)
MethodType.isGeneric(MethodType)
URLConnection.getDefaultRequestProperty(String)
Sound.getWeight(Sound)
Team.getMembershipCollection(Team)
Font.getFontName(Font, Locale | Font)
StateImplementation.getCollisionBoundingBox(StateImplementation, IBlockAccess, BlockPos)
Raster.getHeight(Raster)
EntityLiving.dropFewItems(EntityLiving, boolean, int)
Collection.toArray(Collection | Collection, Object[])
DisplayMode.hashCode(DisplayMode)
Region.getScaledRegion(Region, double, double)
Graphics.setXORMode(Graphics, Color)
Block.removedByPlayer(Block, IBlockState, World, BlockPos, EntityPlayer, boolean)
NetHandlerPlayClient.handleSpawnObject(NetHandlerPlayClient, SPacketSpawnObject)
ProtectionDomain.getPermissions(ProtectionDomain)
LocalDate.readObject(LocalDate, ObjectInputStream)
Graphics2D.draw3DRect(Graphics2D, int, int, int, int, boolean)
Component.mouseMove(Component, Event, int, int)
RenderGlobal.setPartying(RenderGlobal, World, BlockPos, boolean)
Potion.affectEntity(Potion, Entity, Entity, EntityLivingBase, int, double)
ComponentPeer.coalescePaintEvent(ComponentPeer, PaintEvent)
EntityRenderer.stopUseShader(EntityRenderer)
ByteBuf.readUnsignedMediumLE(ByteBuf)
Container.increaseComponentCount(Container, Component)
IsoChronology.dateNow(IsoChronology, Clock | IsoChronology | IsoChronology, ZoneId | IsoChronology, ZoneId | IsoChronology, Clock | IsoChronology)
ChannelOutboundBuffer.failFlushed(ChannelOutboundBuffer, Throwable, boolean)
ValueRange.genInvalidFieldMessage(ValueRange, TemporalField, long)
URLStreamHandler.equals(URLStreamHandler, URL, URL)
AccessControlContext.isAuthorized(AccessControlContext)
Resource.getManifest(Resource)
Window.setShape(Window, Shape)
ChannelPromise.setFailure(ChannelPromise, Throwable)
Instant.adjustInto(Instant, Temporal)
BufferedImage.getAlphaRaster(BufferedImage)
EntityLiving.dropLoot(EntityLiving, boolean, int, DamageSource)
TileEntity.validate(TileEntity)
ListIterator.add(ListIterator, Object)
ResourceBundle.keepAlive(ClassLoader)
Window.postProcessKeyEvent(Window, KeyEvent)
NetworkSystem.networkTick(NetworkSystem)
TileEntity.hasCapability(TileEntity, Capability, EnumFacing)
RenderManager.isDebugBoundingBox(RenderManager)
Locale.getISO2Table(String)
ZonedDateTime.ofInstant(Instant, ZoneId | LocalDateTime, ZoneOffset, ZoneId)
DisplayInfo.getDescription(DisplayInfo)
Date.getDay(Date)
Entity.getCommandStats(Entity)
EntityLiving.startRiding(EntityLiving, Entity, boolean)
ClassLoader.checkCreateClassLoader()
ReflectionFactory.findReadWriteObjectForSerialization(ReflectionFactory, Class, String, Class)
EntityMinecart.entityInit(EntityMinecart)
Container.setFocusTraversalKeys(Container, int, Set)
TextAreaPeer.insert(TextAreaPeer, String, int)
Lookup.unreflect(Lookup, Method)
BigInteger.divideAndRemainder(BigInteger, BigInteger)
DamageSource.causeExplosionDamage(EntityLivingBase | Explosion)
Potion.isInstant(Potion)
Month.getLong(Month, TemporalField)
World.getEntities(World, Class, Predicate)
Container.getTopmostComponentIndex(Container)
MethodHandle.internalCallerClass(MethodHandle)
LocalDateTime.getMonthValue(LocalDateTime)
Block.getStrongPower(Block, IBlockState, IBlockAccess, BlockPos, EnumFacing)
BlockFlower.getBoundingBox(BlockFlower, IBlockState, IBlockAccess, BlockPos)
Color.getComponents(Color, float[] | Color, ColorSpace, float[])
Style.access$502(Style, TextFormatting)
ProgressivePromise.removeListeners(ProgressivePromise, GenericFutureListener[])
Style.access$500(Style)
BlockFlower.getStateFromMeta(BlockFlower, int)
GenLayer.initializeAllBiomeGenerators(long, WorldType, ChunkGeneratorSettings)
String.equalsIgnoreCase(String, String)
ImmutableTable.of( | Object, Object, Object)
NetHandlerPlayClient.getPlayerInfoMap(NetHandlerPlayClient)
ResourceBundle.getString(ResourceBundle, String)
Container.isFocusTraversalPolicySet(Container)
Path.getParent(Path)
EntityPlayer.displayGuiEditCommandCart(EntityPlayer, CommandBlockBaseLogic)
Handle.incMessagesRead(Handle, int)
ChannelHandlerContext.fireChannelActive(ChannelHandlerContext)
World.notifyNeighborsOfStateExcept(World, BlockPos, Block, EnumFacing)
Block.isNormalCube(Block, IBlockState | Block, IBlockState, IBlockAccess, BlockPos)
Attributes.equals(Attributes, Object)
Item.isInCreativeTab(Item, CreativeTabs)
IBakedModel.getQuads(IBakedModel, IBlockState, EnumFacing, long)
LocalDateTime.atZone(LocalDateTime, ZoneId | LocalDateTime, ZoneId)
Explosion.getPosition(Explosion)
EntityLivingBase.setItemStackToSlot(EntityLivingBase, EntityEquipmentSlot, ItemStack)
ChannelPromise.syncUninterruptibly(ChannelPromise)
ChronoLocalDateTime.from(TemporalAccessor)
Window.ownedInit(Window, Window)
MemberName.referenceKindIsConsistentWith(MemberName, int)
Proxy.type(Proxy)
SoundManager.stopSound(SoundManager, ISound)
Lookup.lookupClass(Lookup)
AbstractStringBuilder.getChars(AbstractStringBuilder, int, int, char[], int)
Item.hasCustomProperties(Item)
ByteBuf.readableBytes(ByteBuf)
Font2D.getStrike(Font2D, Font, AffineTransform, AffineTransform, int, int | Font2D, FontStrikeDesc, boolean | Font2D, FontStrikeDesc | Font2D, Font | Font2D, Font, AffineTransform, int, int | Font2D, Font, FontRenderContext)
GraphicsDevice.getDisplayMode(GraphicsDevice)
EntityPlayerMP.getTabListDisplayName(EntityPlayerMP)
AttributeValues.allDefined(AttributeValues, int)
Toolkit.createImage(Toolkit, URL | Toolkit, byte[], int, int | Toolkit, ImageProducer | Toolkit, String | Toolkit, byte[])
ChannelOutboundBuffer.decrementPendingOutboundBytes(ChannelOutboundBuffer, long | ChannelOutboundBuffer, long, boolean, boolean)
ByteBuf.isReadOnly(ByteBuf)
AnnotationType.members(AnnotationType)
ImmutableMap.containsValue(ImmutableMap, Object)
URI.toLower(char)
CompositeByteBuf.internalComponent(CompositeByteBuf, int)
ColorModel.getNormalizedComponents(ColorModel, int[], int, float[], int | ColorModel, Object, float[], int)
InetAddress.getCachedAddresses(String)
Vec3d.dotProduct(Vec3d, Vec3d)
Calendar.isLenient(Calendar)
Integer.numberOfTrailingZeros(int)
DoubleBuffer.compare(double, double)
WatchService.close(WatchService)
JsonReader.consumeNonExecutePrefix(JsonReader)
CrashReportCategory.getPrunedStackTrace(CrashReportCategory, int)
BasicFileAttributes.isRegularFile(BasicFileAttributes)
NBTTagCompound.readNBT(byte, String, DataInput, int, NBTSizeTracker)
FileSystemProvider.move(FileSystemProvider, Path, Path, CopyOption[])
Chunk.setModified(Chunk, boolean)
World.spawnParticle(World, EnumParticleTypes, double, double, double, double, double, double, int[] | World, EnumParticleTypes, boolean, double, double, double, double, double, double, int[] | World, int, boolean, double, double, double, double, double, double, int[])
Method.toString(Method)
Window.getModalExclusionType(Window)
MinecraftServer.getServerModName(MinecraftServer)
RecipeBookServer.getDisplayedRecipes(RecipeBookServer)
Component.setForeground(Component, Color)
Potion.renderHUDEffect(Potion, PotionEffect, Gui, int, int, float, float | Potion, int, int, PotionEffect, Minecraft, float)
World.markAndNotifyBlock(World, BlockPos, Chunk, IBlockState, IBlockState, int)
Container.adjustListeningChildren(Container, long, int)
NetworkPlayerInfo.setRenderVisibilityId(NetworkPlayerInfo, long)
ImmutableMap.checkNoConflict(boolean, String, Entry, Entry)
PlayerList.updatePermissionLevel(PlayerList, EntityPlayerMP)
Set.removeAll(Set, Collection)
URI.access$500()
CharBuffer.subSequence(CharBuffer, int, int | CharBuffer, int, int)
Window.getListeners(Window, Class)
AccessibleTable.isAccessibleSelected(AccessibleTable, int, int)
ClassLoader.loadClassInternal(ClassLoader, String)
Component.hide(Component)
Material.setBurning(Material)
Component.invalidateParent(Component)
AccessibleContext.getAccessibleAction(AccessibleContext)
Dialog.conditionalShow(Dialog, Component, AtomicLong)
LocalTime.of(int, int, int, int | int, int | int, int, int)
Locale.readObject(Locale, ObjectInputStream)
ZonedDateTime.withZoneSameLocal(ZonedDateTime, ZoneId | ZonedDateTime, ZoneId)
CommandResultStats.setScoreBoardStat(CommandResultStats, Type, String, String)
Hashtable.isEmpty(Hashtable)
Particle.setPosition(Particle, double, double, double)
ClassLoader.getResources(ClassLoader, String)
Quaternion.setFromMatrix(Quaternion, Matrix3f | Quaternion, Matrix4f | Matrix4f, Quaternion | Matrix3f, Quaternion)
Entity.setLocationAndAngles(Entity, double, double, double, float, float)
Item.onDroppedByPlayer(Item, ItemStack, EntityPlayer)
Language.equals(Language, Object)
EntityRenderer.setupCameraTransform(EntityRenderer, float, int)
URLConnection.setContentHandlerFactory(ContentHandlerFactory)
World.markChunkDirty(World, BlockPos, TileEntity)
JsonPrimitive.getAsCharacter(JsonPrimitive)
WorldInfo.areCommandsAllowed(WorldInfo)
ImmutableMap.keySpliterator(ImmutableMap)
ByteBufAllocator.heapBuffer(ByteBufAllocator | ByteBufAllocator, int, int | ByteBufAllocator, int)
MethodHandle.copyWith(MethodHandle, MethodType, LambdaForm)
BiConsumer.andThen(BiConsumer, BiConsumer)
CompositeByteBuf.resetWriterIndex(CompositeByteBuf | CompositeByteBuf)
Container.addPropertyChangeListener(Container, PropertyChangeListener | Container, String, PropertyChangeListener)
ReflectionFactory.packageEquals(Class, Class)
Long.reverse(long)
TextAreaPeer.replaceRange(TextAreaPeer, String, int, int)
URI.access$400()
MethodType.writeObject(MethodType, ObjectOutputStream)
World.getPersistentChunkIterable(World, Iterator)
EventExecutorGroup.scheduleWithFixedDelay(EventExecutorGroup, Runnable, long, long, TimeUnit)
FoodStats.writeNBT(FoodStats, NBTTagCompound)
NBTTagList.removeTag(NBTTagList, int)
Chunk.getEntitiesOfTypeWithinAABB(Chunk, Class, AxisAlignedBB, List, Predicate)
ClassLoader.setSigners(ClassLoader, Class, Object[])
BufferedImage.isStandard(ColorModel, WritableRaster)
Calendar.setTime(Calendar, Date)
JsonArray.getAsInt(JsonArray)
Date.getCachedJan1(Date)
EntityLiving.setDropChance(EntityLiving, EntityEquipmentSlot, float)
ZonedDateTime.minusMinutes(ZonedDateTime, long)
CreativeTabs.setNoTitle(CreativeTabs)
Long.toOctalString(long)
LongStream.count(LongStream)
PlayerList.sendMessage(PlayerList, ITextComponent | PlayerList, ITextComponent, boolean)
Window.getAccessibleContext(Window)
IAttributeInstance.getModifier(IAttributeInstance, UUID)
WorldServer.resetUpdateEntityTick(WorldServer)
CrashReportCategory.addCrashSection(CrashReportCategory, String, Object)
BigDecimal.zeroValueOf(int)
NetworkPlayerInfo.getLastHealth(NetworkPlayerInfo)
ExtendedBlockStorage.getBlockLight(ExtendedBlockStorage, int, int, int | ExtendedBlockStorage)
VillageDoorInfo.getDoorBlockPos(VillageDoorInfo)
Properties.toHex(int)
IntStream.peek(IntStream, IntConsumer)
BinaryOperator.lambda$maxBy$1(Comparator, Object, Object)
ChannelConfig.setOptions(ChannelConfig, Map)
StateImplementation.isSideSolid(StateImplementation, IBlockAccess, BlockPos, EnumFacing)
IntStream.allMatch(IntStream, IntPredicate)
AccessibleComponent.isVisible(AccessibleComponent)
PropertyChangeSupport.getPropertyChangeListeners(PropertyChangeSupport, String | PropertyChangeSupport)
BigDecimal.access$000(BigDecimal)
ItemTransformVec3f.equals(ItemTransformVec3f, Object)
Region.appendSpans(Region, SpanIterator)
Component.gotFocus(Component, Event, Object)
URLConnection.getContentLengthLong(URLConnection)
SPacketUpdateTileEntity.processPacket(SPacketUpdateTileEntity, INetHandler | SPacketUpdateTileEntity, INetHandlerPlayClient)
AttributeModifier.equals(AttributeModifier, Object)
Chunk.getRandomWithSeed(Chunk, long)
StringBuilder.subSequence(StringBuilder, int, int)
JsonArray.get(JsonArray, int)
Graphics.toString(Graphics)
NBTTagList.getDoubleAt(NBTTagList, int)
World.checkLight(World, BlockPos)
Block.setBedOccupied(Block, IBlockAccess, BlockPos, EntityPlayer, boolean)
Block.doesSideBlockChestOpening(Block, IBlockState, IBlockAccess, BlockPos, EnumFacing)
ChannelConfig.getConnectTimeoutMillis(ChannelConfig)
GameRules.writeToNBT(GameRules)
Period.normalized(Period | Period)
LambdaForm.parameterType(LambdaForm, int)
Block.getLightOpacity(Block, IBlockState | Block, IBlockState, IBlockAccess, BlockPos)
AccessControlContext.equals(AccessControlContext, Object)
Factory.resolveOrNull(Factory, byte, MemberName, Class)
ItemRenderer.rotateArroundXAndY(ItemRenderer, float, float)
World.sendQuittingDisconnectingPacket(World)
EntityLiving.applyEntityAI(EntityLiving)
World.spawnEntity(World, Entity)
Item.getHorseArmorType(Item, ItemStack)
FoodStats.setFoodSaturationLevel(FoodStats, float)
LongBuffer.equals(long, long | LongBuffer, Object)
NBTTagList.iterator(NBTTagList)
CharBuffer.order(CharBuffer)
ImageProducer.requestTopDownLeftRightResend(ImageProducer, ImageConsumer)
Thread.toString(Thread)
String.substring(String, int, int | String, int)
Date.setDate(Date, int)
Range.values()
TextFormatting.getTextWithoutFormattingCodes(String)
FocusTraversalPolicy.getFirstComponent(FocusTraversalPolicy, Container)
FileChannel.size(FileChannel)
Class.desiredAssertionStatus(Class)
Dimension.initIDs()
Minecraft.displayCrashReport(Minecraft, CrashReport)
EntityPlayer.disableShield(EntityPlayer, boolean)
Properties.saveConvert(Properties, String, boolean, boolean)
ChannelOutboundBuffer.remove(ChannelOutboundBuffer | ChannelOutboundBuffer, Throwable)
Method.isBridge(Method)
GenericsFactory.makeLong(GenericsFactory)
PlayerList.reloadWhitelist(PlayerList)
EnumFacing.rotateYCCW(EnumFacing)
FontRenderer.setUnicodeFlag(FontRenderer, boolean)
Chunk.getHeightValue(Chunk, int, int)
BigInteger.magSerializedForm(BigInteger)
Region.getIterator(Region)
PathPoint.hashCode(PathPoint)
EntityPlayer.closeScreen(EntityPlayer)
ConstantPool.getDoubleAt(ConstantPool, int)
Float.toString(Float | Float)
Wrapper.isSubwordOrInt(Wrapper)
Scoreboard.removePlayerFromTeam(Scoreboard, String, ScorePlayerTeam)
MinecraftServer.convertMapIfNeeded(MinecraftServer, String)
Graphics2D.setPaint(Graphics2D, Paint)
Instant.parse(CharSequence)
Entry.comparingByKey( | Comparator)
JsonPrimitive.equals(JsonPrimitive, Object)
Toolkit.setDesktopProperty(Toolkit, String, Object)
CharBuffer.arrayOffset(CharBuffer)
Month.firstMonthOfQuarter(Month)
DragGestureRecognizer.getComponent(DragGestureRecognizer)
Class.access$300(Object[], Object[])
Hashtable.get(Hashtable, Object)
Rectangle.setSize(Rectangle, Dimension | Rectangle, int, int)
UserListOps.createEntry(UserListOps, JsonObject)
ZonedDateTime.getNano(ZonedDateTime)
ListPeer.select(ListPeer, int)
Gson.longAdapter(LongSerializationPolicy)
GameType.getID(GameType)
EntityPlayerMP.handleFalling(EntityPlayerMP, double, boolean)
Potion.isBeneficial(Potion)
Name.equals(Name, Object | Name, Name)
Locale.getDisplayName(Locale, Locale | Locale)
BiomeProvider.getBiome(BiomeProvider, BlockPos | BiomeProvider, BlockPos, Biome)
MemberName.isProtected(MemberName)
World.getGameRules(World)
WorldServer.getEntityFromUuid(WorldServer, UUID)
Component.isNonOpaqueForMixing(Component)
Long.floatValue(Long)
HorseArmorType.getHash(HorseArmorType)
ShortBuffer.arrayOffset(ShortBuffer)
ProtectionDomain.mergePermissions(ProtectionDomain)
EntityRenderer.applyBobbing(EntityRenderer, float)
Period.of(int, int, int)
EntityMinecart.applyEntityCollision(EntityMinecart, Entity)
Container.adjustDescendants(Container, int)
ValueRange.getMinimum(ValueRange)
LootPool.setRolls(LootPool, RandomValueRange)
EventQueue.createSecondaryLoop(EventQueue | EventQueue, Conditional, EventFilter, long)
Component.addComponentListener(Component, ComponentListener)
Package.getAnnotation(Package, Class)
IdentityArrayList.isEmpty(IdentityArrayList)
Graphics2D.shear(Graphics2D, double, double)
ListPeer.makeVisible(ListPeer, int)
Component.getHierarchyBoundsListeners(Component)
World.isBlockFullCube(World, BlockPos)
ChannelPipeline.fireExceptionCaught(ChannelPipeline, Throwable)
PermissionCollection.toString(PermissionCollection)
Block.isSideSolid(Block, IBlockState, IBlockAccess, BlockPos, EnumFacing)
ResourceBundle.findBundle(CacheKey, List, List, int, Control, ResourceBundle)
Attribute.getAndSet(Attribute, Object)
ImmutableSetMultimap.readObject(ImmutableSetMultimap, ObjectInputStream)
Quaternion.negate(Quaternion, Quaternion | Quaternion | Quaternion, Quaternion)
DragSource.processDragOver(DragSource, DragSourceDragEvent)
ItemStack.clearCustomName(ItemStack)
LongBuffer.hasArray(LongBuffer)
EventQueue.getAccessControlContextFrom(Object)
Chunk.relightBlock(Chunk, int, int, int)
EntityLiving.getNavigator(EntityLiving)
Instance.access$300(Instance)
ZonedDateTime.getSecond(ZonedDateTime)
Logger.getMessageFactory(Logger)
ByteBuf.setShortLE(ByteBuf, int, int)
ZoneId.writeReplace(ZoneId)
Cell.hashCode(Cell)
Calendar.getMinimum(Calendar, int)
FieldAccessor.setDouble(FieldAccessor, Object, double)
File.listFiles(File, FilenameFilter | File | File, FileFilter)
BaseLocale.toString(BaseLocale)
Block.canConnectRedstone(Block, IBlockState, IBlockAccess, BlockPos, EnumFacing)
Village.endMatingSeason(Village)
MinecraftServer.logWarning(MinecraftServer, String)
Optional.orNull(Optional)
LootPool.getEntry(LootPool, String)
GuiToast.getToast(GuiToast, Class, Object)
Component.show(Component, boolean | Component)
Executable.getAnnotatedReceiverType(Executable)
EnumFacing.random(Random)
InputContext.getInstance()
Component.minimumSize(Component)
RenderGlobal.updateTileEntities(RenderGlobal, Collection, Collection)
MinecraftServer.setOnlineMode(MinecraftServer, boolean)
Stream.forEachOrdered(Stream, Consumer)
BigInteger.xor(BigInteger, BigInteger)
Event.paramString(Event)
RenderItem.renderItemAndEffectIntoGUI(RenderItem, ItemStack, int, int | RenderItem, EntityLivingBase, ItemStack, int, int)
RegionIterator.createCopy(RegionIterator)
AtomicInteger.addAndGet(AtomicInteger, int)
ItemModelMesher.register(ItemModelMesher, Item, int, ModelResourceLocation | ItemModelMesher, Item, ItemMeshDefinition)
FontMetrics.getLeading(FontMetrics)
WorldServer.scheduleUpdate(WorldServer, BlockPos, Block, int)
URI.access$1600()
RegistryNamespaced.getIDForObject(RegistryNamespaced, Object)
LambdaFormBuffer.name(LambdaFormBuffer, int)
NetHandlerPlayClient.handleCamera(NetHandlerPlayClient, SPacketCamera)
Toolkit.getEventQueue()
Item.getRGBDurabilityForDisplay(Item, ItemStack)
CompositeByteBuf.setDouble(CompositeByteBuf, int, double | CompositeByteBuf, int, double)
Chunk.getCapabilities(Chunk)
Hashtable.values(Hashtable)
Window.processWindowStateEvent(Window, WindowEvent)
NamedFunction.returnType(NamedFunction)
JsonObject.getAsJsonObject(JsonObject, String)
ZonedDateTime.withZoneSameInstant(ZonedDateTime, ZoneId | ZonedDateTime, ZoneId)
LambdaFormEditor.dupArgumentForm(LambdaFormEditor, int, int)
World.collidesWithAnyBlock(World, AxisAlignedBB)
FocusTraversalPolicy.getComponentAfter(FocusTraversalPolicy, Container, Component)
SPacketUpdateTileEntity.writePacketData(SPacketUpdateTileEntity, PacketBuffer)
ByteBuf.retain(ByteBuf | ByteBuf, int | ByteBuf | ByteBuf, int)
Constructor.hashCode(Constructor)
ChronoLocalDate.minus(ChronoLocalDate, long, TemporalUnit | ChronoLocalDate, TemporalAmount | ChronoLocalDate, long, TemporalUnit | ChronoLocalDate, TemporalAmount)
ByteBuf.writeLong(ByteBuf, long)
Block.canPlaceBlockAt(Block, World, BlockPos)
World.addTileEntities(World, Collection)
GameType.getByID(int)
ZoneId.ofOffset(String, ZoneOffset)
TileEntityItemStackRenderer.renderByItem(TileEntityItemStackRenderer, ItemStack, float | TileEntityItemStackRenderer, ItemStack)
PermissionCollection.elements(PermissionCollection)
EntityPlayer.jump(EntityPlayer)
Date.getNormalizedYear(Date)
SampleModel.getWidth(SampleModel)
Stream.concat(Stream, Stream)
Component.access$400(Component)
BufferBuilder.tex(BufferBuilder, double, double)
URI.access$2900()
FontRenderer.wrapFormattedStringToWidth(FontRenderer, String, int)
InputContext.dispose(InputContext)
World.getCelestialAngle(World, float)
JsonArray.getAsShort(JsonArray)
Lookup.unreflectSetter(Lookup, Field)
EntityItemFrame.removeFrameFromMap(EntityItemFrame, ItemStack)
GlyphMetrics.getRSB(GlyphMetrics)
Container.validate(Container)
TextureMap.loadTextureAtlas(TextureMap, IResourceManager)
DisplayMode.getWidth(DisplayMode)
SampleModel.getSampleFloat(SampleModel, int, int, int, DataBuffer)
Component.getFocusTraversalKeys_NoIDCheck(Component, int)
LocalDate.isSupported(LocalDate, TemporalUnit | LocalDate, TemporalField)
Vector3f.toString(Vector3f)
ChannelHandlerContext.attr(ChannelHandlerContext, AttributeKey)
ImmutableMultimap.remove(ImmutableMultimap, Object, Object)
BoundMethodHandle.bindArgumentL(BoundMethodHandle, int, Object)
BoundMethodHandle.bindArgumentJ(BoundMethodHandle, int, long)
BoundMethodHandle.bindArgumentI(BoundMethodHandle, int, int)
BoundMethodHandle.bindArgumentF(BoundMethodHandle, int, float)
Advancement.getRewards(Advancement)
BoundMethodHandle.bindArgumentD(BoundMethodHandle, int, double)
AttributeValues.setBidiEmbedding(AttributeValues, int)
AffineTransform.getTranslateInstance(double, double)
World.setTileEntity(World, BlockPos, TileEntity)
AccessibleContext.getAccessibleChildrenCount(AccessibleContext)
LongStream.generate(LongSupplier)
Window.getFocusCycleRootAncestor(Window)
LongStream.map(LongStream, LongUnaryOperator)
EventQueue.peekEvent(EventQueue | EventQueue, int)
Container.readObject(Container, ObjectInputStream)
ChannelFuture.await(ChannelFuture)
LongStream.max(LongStream)
Toolkit.getAWTEventListeners(Toolkit, long | Toolkit)
ISaveHandler.loadWorldInfo(ISaveHandler)
StateImplementation.getPropertyKeys(StateImplementation)
SpeciesData.fieldType(SpeciesData, int)
EntityPlayer.respawnPlayer(EntityPlayer)
LocalDate.minus(LocalDate, long, TemporalUnit | LocalDate, TemporalAmount | LocalDate, TemporalAmount | LocalDate, long, TemporalUnit | LocalDate, long, TemporalUnit | LocalDate, TemporalAmount)
EntityLivingBase.sendEndCombat(EntityLivingBase)
GameSettings.saveOptions(GameSettings)
BigDecimal.add(BigDecimal, BigDecimal | BigInteger, int, BigInteger, int | long, long | BigDecimal, BigDecimal, MathContext | long, long, int | long, int, BigInteger, int | long, int, long, int)
Calendar.getWeeksInWeekYear(Calendar)
String.checkBounds(byte[], int, int)
Toolkit.createFileDialog(Toolkit, FileDialog)
Component.size(Component)
Boolean.valueOf(boolean | String)
SeekableByteChannel.read(SeekableByteChannel, ByteBuffer)
GameSettings.setOptionKeyBinding(GameSettings, KeyBinding, int)
Comparator.naturalOrder()
MemberName.access$100(MemberName)
MethodType.canConvert(Class, Class)
OffsetDateTime.ofInstant(Instant, ZoneId)
SoundType.getFallSound(SoundType)
Component.checkGD(Component, String)
ModelBase.getTextureOffset(ModelBase, String)
ActionResult.getResult(ActionResult)
ResourcePackRepository.validatePack(ResourcePackRepository, File)
LineMetrics.getUnderlineThickness(LineMetrics)
Class.addAll(Collection, Field[])
ZonedDateTime.format(ZonedDateTime, DateTimeFormatter)
Advancement.getDisplayText(Advancement)
EntityPlayer.spawnSweepParticles(EntityPlayer)
Temporal.with(Temporal, TemporalField, long | Temporal, TemporalAdjuster)
Entity.awardKillScore(Entity, Entity, int, DamageSource)
Class.getEnclosingMethod(Class)
BigDecimal.abs(BigDecimal | BigDecimal, MathContext)
ChunkCompileTaskGenerator.getCompiledChunk(ChunkCompileTaskGenerator)
Float.createIntersection(Float, Rectangle2D)
Calendar.getAvailableCalendarTypes()
URLConnection.setIfModifiedSince(URLConnection, long)
ItemStack.updateEmptyState(ItemStack)
Method.getParameterCount(Method)
MethodHandle.asTypeUncached(MethodHandle, MethodType)
Integer.divideUnsigned(int, int)
File.renameTo(File, File)
Insets.set(Insets, int, int, int, int)
Factory.newMemberBuffer(int)
MethodHandle.invokeWithArguments(MethodHandle, Object[] | MethodHandle, List)
DragGestureEvent.getTriggerEvent(DragGestureEvent)
Rectangle.resize(Rectangle, int, int)
Duration.minusHours(Duration, long)
CooldownTracker.setCooldown(CooldownTracker, Item, int)
ShaderUniform.markDirty(ShaderUniform)
Container.initIDs()
BlockPos.getAllInBox(BlockPos, BlockPos | int, int, int, int, int, int)
EntityLiving.writeEntityToNBT(EntityLiving, NBTTagCompound)
Graphics2D.getPaint(Graphics2D)
EnumActionResult.values()
NBTTagList.set(NBTTagList, int, NBTBase)
ChannelOutboundBuffer.current(ChannelOutboundBuffer)
LongStream.parallel(LongStream | LongStream)
NetworkManager.setCompressionThreshold(NetworkManager, int)
OffsetDateTime.readExternal(ObjectInput)
OffsetTime.readObject(OffsetTime, ObjectInputStream)
Date.getHours(Date)
World.getPendingTileEntityAt(World, BlockPos)
RenderGlobal.renderCloudsFancy(RenderGlobal, float, int, double, double, double)
List.isEmpty(List)
World.getStarBrightnessBody(World, float)
StateImplementation.getPushReaction(StateImplementation)
JsonElement.getAsJsonNull(JsonElement)
URL.getContent(URL, Class[] | URL)
ByteBuf.setShort(ByteBuf, int, int)
Block.canEntitySpawn(Block, IBlockState, Entity)
BlockRendererDispatcher.getModelForState(BlockRendererDispatcher, IBlockState)
Builder.orderKeysBy(Builder, Comparator | Builder, Comparator | Builder, Comparator)
ModelRenderer.addChild(ModelRenderer, ModelRenderer)
Block.getSubBlocks(Block, CreativeTabs, NonNullList)
Thread.auditSubclass(Class)
Village.findRandomSpawnPos(Village, BlockPos, int, int, int)
VillageCollection.positionInList(VillageCollection, BlockPos)
FileTime.to(FileTime, TimeUnit)
Entity.canTrample(Entity, World, Block, BlockPos, float)
IsoChronology.dateYearDay(IsoChronology, Era, int, int | IsoChronology, int, int | IsoChronology, int, int | IsoChronology, Era, int, int)
ClassLoader.desiredAssertionStatus(ClassLoader, String)
Hashtable.hashCode(Hashtable)
FunctionManager.execute(FunctionManager, FunctionObject, ICommandSender)
EntityLivingBase.sendEnterCombat(EntityLivingBase)
Style.access$602(Style, String)
Style.access$600(Style)
StateImplementation.onBlockEventReceived(StateImplementation, World, BlockPos, int, int)
URLConnection.setDefaultUseCaches(URLConnection, boolean)
WorldServer.tickPlayers(WorldServer)
Handle.size(Handle, Object)
AttributeValues.merge(AttributeValues, AttributeValues, int | AttributeValues, AttributeValues | AttributeValues, Map | AttributeValues, Map, int)
OffsetDateTime.toZonedDateTime(OffsetDateTime)
AccessibleTable.getSelectedAccessibleRows(AccessibleTable)
Dialog.addNotify(Dialog)
ConstantPool.getMethodAt(ConstantPool, int)
Multiset.elementSet(Multiset)
Logger.atFatal(Logger)
TimeZone.inDaylightTime(TimeZone, Date)
Chunk.isLightPopulated(Chunk)
CompiledChunk.setLayerStarted(CompiledChunk, BlockRenderLayer)
URI.access$600()
BigDecimal.inflated(BigDecimal)
BigInteger.reportOverflow()
Period.withYears(Period, int)
MapData.updateVisiblePlayers(MapData, EntityPlayer, ItemStack)
Date.setSeconds(Date, int)
Duration.negated(Duration)
ItemStack.canDestroy(ItemStack, Block)
ArrayList.grow(ArrayList, int)
ByteBuf.readUnsignedShortLE(ByteBuf)
Constructor.getTypeParameters(Constructor)
SampleModel.setPixels(SampleModel, int, int, int, int, int[], DataBuffer | SampleModel, int, int, int, int, double[], DataBuffer | SampleModel, int, int, int, int, float[], DataBuffer)
World.getBlockLightOpacity(World, BlockPos)
RandomValueRange.access$100(RandomValueRange)
DropTargetContext.rejectDrop(DropTargetContext)
ZonedDateTime.minusNanos(ZonedDateTime, long)
ChronoZonedDateTime.toLocalDate(ChronoZonedDateTime)
Attributes.getValue(Attributes, Name | Attributes, String)
ChannelOutboundBuffer.bytesBeforeUnwritable(ChannelOutboundBuffer)
ReflectionFactory.copyConstructor(ReflectionFactory, Constructor)
URL.setURLStreamHandlerFactory(URLStreamHandlerFactory)
LocalDateTime.getDayOfYear(LocalDateTime)
ChannelOutboundBuffer.addMessage(ChannelOutboundBuffer, Object, int, ChannelPromise)
World.getStrongPower(World, BlockPos | World, BlockPos, EnumFacing)
Period.between(LocalDate, LocalDate)
TextureAtlasSprite.getUnInterpolatedU(TextureAtlasSprite, float)
TextureAtlasSprite.getUnInterpolatedV(TextureAtlasSprite, float)
EntityEquipmentSlot.values()
IChunkProvider.tick(IChunkProvider)
RenderChunk.makeCompileTaskChunk(RenderChunk)
Locale.getInstance(String, String, String | String, String, String, String, LocaleExtensions | BaseLocale, LocaleExtensions)
LongStream.reduce(LongStream, LongBinaryOperator | LongStream, long, LongBinaryOperator)
Village.findNearestVillageAggressor(Village, EntityLivingBase)
Block.beginLeavesDecay(Block, IBlockState, World, BlockPos)
AffineTransform.stateError(AffineTransform)
ArrayList.set(ArrayList, int, Object)
ZonedDateTime.minusWeeks(ZonedDateTime, long)
World.getCurrentDate(World)
URLClassPath.check(URL)
AttributeValues.getWidth(AttributeValues)
EntityLiving.createBodyHelper(EntityLiving)
Entity.setRenderDistanceWeight(double)
ImmutableSetMultimap.entries(ImmutableSetMultimap | ImmutableSetMultimap | ImmutableSetMultimap | ImmutableSetMultimap)
ZonedDateTime.getHour(ZonedDateTime)
Path.hashCode(Path)
PathPoint.cloneMove(PathPoint, int, int, int)
BufferedImage.getWritableTileIndices(BufferedImage)
Color.brighter(Color)
RenderLivingBase.applyRotations(RenderLivingBase, EntityLivingBase, float, float, float)
Dialog.checkModalityPermission(Dialog, ModalityType)
Minecraft.getRenderPartialTicks(Minecraft)
BigDecimal.writeObject(BigDecimal, ObjectOutputStream)
Font2D.getBaselineFor(Font2D, char)
AtomicInteger.getAndUpdate(AtomicInteger, IntUnaryOperator)
AttributedCharacterIterator.getAllAttributeKeys(AttributedCharacterIterator)
Lookup.checkAccess(Lookup, byte, Class, MemberName)
Component.removeComponentListener(Component, ComponentListener)
Constructor.handleParameterNumberMismatch(Constructor, int, int)
FileSystem.close(FileSystem)
Toolkit.createFrame(Toolkit, Frame)
EventExecutor.next(EventExecutor)
ImmutableList.copyIntoArray(ImmutableList, Object[], int)
PlayerAdvancements.ensureVisibility(PlayerAdvancements, Advancement)
Permission.toString(Permission)
World.rayTraceBlocks(World, Vec3d, Vec3d, boolean | World, Vec3d, Vec3d | World, Vec3d, Vec3d, boolean, boolean, boolean)
EntityPlayer.getExperiencePoints(EntityPlayer, EntityPlayer)
BlockStateContainer.getBaseState(BlockStateContainer)
BigDecimal.multiplyAndRound(long, BigInteger, int, MathContext | long, long, int, MathContext | BigInteger, BigInteger, int, MathContext)
Advancement.copy(Advancement)
InputEvent.isAltGraphDown(InputEvent)
AtomicInteger.getAndAccumulate(AtomicInteger, int, IntBinaryOperator)
EntityDataManager.setDirty(EntityDataManager, DataParameter)
Duration.toMinutes(Duration)
ZoneRules.getTransition(ZoneRules, LocalDateTime)
Lookup.getDirectConstructorNoSecurityManager(Lookup, Class, MemberName)
Object.toString(Object)
BigInteger.modPow2(BigInteger, BigInteger, int)
ChronoPeriod.minus(ChronoPeriod, TemporalAmount)
ItemModelMesher.getMetadata(ItemModelMesher, ItemStack)
TypeVariable.getAnnotatedBounds(TypeVariable)
TextureMap.setTextureEntry(TextureMap, TextureAtlasSprite)
Locale.writeObject(Locale, ObjectOutputStream)
TextureAtlasSprite.getMinU(TextureAtlasSprite)
TextureAtlasSprite.getMinV(TextureAtlasSprite)
ChronoLocalDateTime.adjustInto(ChronoLocalDateTime, Temporal)
AdvancementList.remove(AdvancementList, Advancement)
EntityMinecart.getPosOffset(EntityMinecart, double, double, double, double)
List.listIterator(List, int | List)
Vector.hugeCapacity(int)
JsonReader.fillBuffer(JsonReader, int)
NodeProcessor.getCanOpenDoors(NodeProcessor)
Window.getOwnedWindows(Window)
LambdaForm.resultCheck(LambdaForm, Object[], Object)
Vec3i.crossProduct(Vec3i, Vec3i)
ZonedDateTime.minusSeconds(ZonedDateTime, long)
Dimension.toString(Dimension)
Item.onArmorTick(Item, World, EntityPlayer, ItemStack)
Random.nextInt(Random, int | Random)
LocalTime.get0(LocalTime, TemporalField)
LambdaForm.fixResult(int, Name[])
Block.addDestroyEffects(Block, World, BlockPos, ParticleManager)
Hashtable.contains(Hashtable, Object)
Name.hashCode(Name)
OffsetDateTime.getMonth(OffsetDateTime)
Clipboard.setContents(Clipboard, Transferable, ClipboardOwner)
StateImplementation.getPackedLightmapCoords(StateImplementation, IBlockAccess, BlockPos)
MobSpawnerBaseLogic.getSpawnerEntity(MobSpawnerBaseLogic)
ChronoPeriod.isNegative(ChronoPeriod)
DoubleStream.mapToLong(DoubleStream, DoubleToLongFunction)
WorldBorder.getListeners(WorldBorder)
JsonObject.has(JsonObject, String)
Excluder.isStatic(Excluder, Class)
MemberName.isGetter(MemberName)
ThreadGroup.list(ThreadGroup | ThreadGroup, PrintStream, int)
Block.onFallenUpon(Block, World, BlockPos, Entity, float)
OffsetTime.ofInstant(Instant, ZoneId)
Entity.getLookVec(Entity)
PlayerList.setCommandsAllowedForAll(PlayerList, boolean)
VillageDoorInfo.getIsDetachedFromVillageFlag(VillageDoorInfo)
Vector.size(Vector)
AWTEvent.access$200()
Block.canDropFromExplosion(Block, Explosion)
Executable.getName(Executable)
World.getClosestPlayer(World, double, double, double, double, Predicate | World, double, double, double, double, boolean)
ISaveFormat.flushCache(ISaveFormat)
Scoreboard.removeObjective(Scoreboard, ScoreObjective)
Component.getHierarchyListeners(Component)
BigDecimal.longValue(BigDecimal)
DoubleSummaryStatistics.getCount(DoubleSummaryStatistics)
Component.pointRelativeToComponent(Component, Point)
IntStream.distinct(IntStream)
Class.access$200(Field[], String)
Multimap.removeAll(Multimap, Object)
JsonPrimitive.setValue(JsonPrimitive, Object)
IntegratedServer.isCommandBlockEnabled(IntegratedServer)
EntityLivingBase.decreaseAirSupply(EntityLivingBase, int)
CompositeByteBuf.ensureWritable(CompositeByteBuf, int | CompositeByteBuf, int)
Item.onBlockStartBreak(Item, ItemStack, BlockPos, EntityPlayer)
ResourceBundle.putBundleInCache(CacheKey, ResourceBundle, Control)
Teleporter.placeInExistingPortal(Teleporter, Entity, float)
ChronoZonedDateTime.withZoneSameLocal(ChronoZonedDateTime, ZoneId)
PathNavigate.clearPath(PathNavigate)
JsonReader.access$000(JsonReader)
ProgressivePromise.removeListener(ProgressivePromise, GenericFutureListener)
Long.parseUnsignedLong(String | String, int)
CompositeByteBuf.arrayOffset(CompositeByteBuf)
EnumVisible.getNames()
List.containsAll(List, Collection)
Container.createChildHierarchyEvents(Container, int, long, boolean)
MinecraftServer.getName(MinecraftServer)
SpeciesData.fieldHolder(SpeciesData)
PlayerList.transferPlayerToDimension(PlayerList, EntityPlayerMP, int, Teleporter | PlayerList, EntityPlayerMP, int, ITeleporter)
Component.getPeer(Component)
TileEntity.getCapability(TileEntity, Capability, EnumFacing)
Chunk.checkLightSide(Chunk, EnumFacing)
Entity.isOverWater(Entity)
AtomicInteger.lazySet(AtomicInteger, int)
ITextComponent.getStyle(ITextComponent)
DragGestureEvent.getDragOrigin(DragGestureEvent)
Period.equals(Period, Object)
FontRenderer.setBidiFlag(FontRenderer, boolean)
Window.getWarningString(Window)
Excluder.isAnonymousOrLocal(Excluder, Class)
EntityPlayer.interactOn(EntityPlayer, Entity, EnumHand)
DragGestureRecognizer.getTriggerEvent(DragGestureRecognizer)
Month.valueOf(String)
GenericsFactory.makeInt(GenericsFactory)
StateImplementation.hasCustomBreakingProgress(StateImplementation)
FieldAccessor.getChar(FieldAccessor, Object)
EntityPlayer.resetRecipes(EntityPlayer, List)
PropertyChangeSupport.writeObject(PropertyChangeSupport, ObjectOutputStream)
URI.access$1502(URI, String)
WorldInfo.getGameRulesInstance(WorldInfo)
ChannelHandlerContext.read(ChannelHandlerContext)
Duration.get(Duration, TemporalUnit)
Entity.isInvisible(Entity)
Name.contains(Name, Name)
ResourceLocation.splitObjectName(String)
GenLayer.initChunkSeed(GenLayer, long, long)
NetHandlerPlayClient.handleEntityTeleport(NetHandlerPlayClient, SPacketEntityTeleport)
GameSettings.setOptionValue(GameSettings, Options, int)
Component.getContainer(Component)
RegistryNamespaced.iterator(RegistryNamespaced)
PlayerList.getOppedPlayers(PlayerList)
Toolkit.loadSystemColors(Toolkit, int[])
ITextComponent.createCopy(ITextComponent)
JsonArray.iterator(JsonArray)
RenderingHints.get(RenderingHints, Object)
Calendar.selectFields(Calendar)
Manifest.read(Manifest, InputStream)
Entity.canExplosionDestroyBlock(Entity, Explosion, World, BlockPos, IBlockState, float)
WorldType.getInfoTranslationKey(WorldType)
Locale.getLocaleExtensions(Locale)
Calendar.getWeekYear(Calendar)
Window.dispatchEventImpl(Window, AWTEvent)
EntityPlayerMP.attackTargetEntityWithCurrentItem(EntityPlayerMP, Entity)
OffsetDateTime.getDayOfYear(OffsetDateTime)
AccessibleContext.getAccessibleTable(AccessibleContext)
Locale.getVariant(Locale)
Color.equals(Color, Object)
ModelBiped.getArmForSide(ModelBiped, EnumHandSide)
GraphicsConfiguration.getColorModel(GraphicsConfiguration | GraphicsConfiguration, int)
JsonElement.getAsFloat(JsonElement)
FileSystemProvider.isHidden(FileSystemProvider, Path)
Component.eventEnabled(Component, AWTEvent)
LongStream.min(LongStream)
BoundMethodHandle.speciesData_LLLL()
URI.getRawSchemeSpecificPart(URI)
EntityLivingBase.getCapability(EntityLivingBase, Capability, EnumFacing)
EntityDataManager.setEntryValues(EntityDataManager, List)
Stack.search(Stack, Object)
Channel.closeFuture(Channel)
Container.addNotify(Container)
MinecraftServer.init(MinecraftServer)
URI.access$2800()
ReflectionFactory.copyMethod(ReflectionFactory, Method)
Logger.catching(Logger, Throwable | Logger, Level, Throwable)
CompositeByteBuf.skipBytes(CompositeByteBuf, int | CompositeByteBuf, int)
BigDecimal.bigDigitLength(BigInteger)
Graphics.drawRoundRect(Graphics, int, int, int, int, int, int)
ISound.getYPosF(ISound)
NetHandlerPlayClient.handleCollectItem(NetHandlerPlayClient, SPacketCollectItem)
CrashReport.getCauseStackTraceOrString(CrashReport)
Vector.forEach(Vector, Consumer)
ListenerListInst.addChild(ListenerListInst, ListenerListInst)
MapItemRenderer.getMapRendererInstance(MapItemRenderer, MapData)
MobSpawnerBaseLogic.readFromNBT(MobSpawnerBaseLogic, NBTTagCompound)
ITextComponent.getUnformattedText(ITextComponent)
Plane.random(Plane, Random)
EntityItem.cannotPickup(EntityItem)
ColorModel.initIDs()
World.getCapability(World, Capability, EnumFacing)
CompositeByteBuf.consolidateIfNeeded(CompositeByteBuf)
ChunkCompileTaskGenerator.getStatus(ChunkCompileTaskGenerator)
StandardLevel.valueOf(String)
BigDecimal.longValueExact(BigDecimal)
Class.getAnnotation(Class, Class)
AffineTransform.writeObject(AffineTransform, ObjectOutputStream)
IAttributeInstance.removeAllModifiers(IAttributeInstance)
Entry.updateResourcePack(Entry)
Scoreboard.broadcastScoreUpdate(Scoreboard, String | Scoreboard, String, ScoreObjective)
CharSequence.length(CharSequence)
Instance.access$400(Instance)
PlayerList.addOp(PlayerList, GameProfile)
FontRenderer.bidiReorder(FontRenderer, String)
AccessibleText.getBeforeIndex(AccessibleText, int, int)
AccessibleText.getAfterIndex(AccessibleText, int, int)
DropTargetContext.rejectDrag(DropTargetContext)
AffineTransform.rotate90(AffineTransform)
Block.getRenderLayer(Block)
Session.getUsername(Session)
EventQueue.invokeAndWait(Object, Runnable | Runnable)
Minecraft.isFullScreen(Minecraft)
DragSourceContext.dragMouseMoved(DragSourceContext, DragSourceDragEvent)
Invokers.newWrongMethodTypeException(MethodType, MethodType)
DragSource.processDragExit(DragSource, DragSourceEvent)
Biome.getRandomTreeFeature(Biome, Random)
DesktopPeer.edit(DesktopPeer, File)
ItemRenderer.renderItemSide(ItemRenderer, EntityLivingBase, ItemStack, TransformType, boolean)
AccessibleRelationSet.clear(AccessibleRelationSet)
AWTEvent.convertToOld(AWTEvent)
Executable.getTypeAnnotationBytes0(Executable)
MemberName.getReferenceKind(MemberName)
BufferBuilder.putBulkData(BufferBuilder, ByteBuffer)
EntityItemFrame.setDisplayedItem(EntityItemFrame, ItemStack)
Calendar.getLeastMaximum(Calendar, int)
Double.toHexString(double)
AnnotationType.memberDefaults(AnnotationType)
Package.toString(Package)
Comparator.equals(Comparator, Object)
ItemStack.isItemStackEqualUsingNBTShareTag(ItemStack, ItemStack)
EntityPlayerMP.registerFixesPlayerMP(DataFixer)
MinecraftServer.run(MinecraftServer)
Item.addPropertyOverride(Item, ResourceLocation, IItemPropertyGetter)
ChannelPromise.addListeners(ChannelPromise, GenericFutureListener[])
Instant.readExternal(DataInput)
ComponentPeer.print(ComponentPeer, Graphics)
ImmutableMultimap.createKeys(ImmutableMultimap | ImmutableMultimap)
InetAddressImpl.loopbackAddress(InetAddressImpl)
BigInteger.doubleValue(BigInteger)
Calendar.invalidateWeekFields(Calendar)
Integer.toString(int | Integer | int, int)
Vector.clone(Vector)
WorldServer.spawnParticle(WorldServer, EnumParticleTypes, boolean, double, double, double, int, double, double, double, double, int[] | WorldServer, EnumParticleTypes, double, double, double, int, double, double, double, double, int[] | WorldServer, EntityPlayerMP, EnumParticleTypes, boolean, double, double, double, int, double, double, double, double, int[])
Render.renderEntityName(Render, Entity, double, double, double, String, double)
LongBuffer.compare(long, long)
ByteBuf.writeBytes(ByteBuf, ByteBuf | ByteBuf, byte[] | ByteBuf, ScatteringByteChannel, int | ByteBuf, ByteBuffer | ByteBuf, FileChannel, long, int | ByteBuf, ByteBuf, int | ByteBuf, ByteBuf, int, int | ByteBuf, byte[], int, int | ByteBuf, InputStream, int)
URI.access$1900()
EntityPlayer.addShoulderEntity(EntityPlayer, NBTTagCompound)
ByteBufAllocator.isDirectBufferPooled(ByteBufAllocator)
ChronoZonedDateTime.isBefore(ChronoZonedDateTime, ChronoZonedDateTime)
Calendar.getDisplayNames(Calendar, int, int, Locale)
URI.resolve(URI, URI | URI, String | URI, URI)
ServerStatusResponse.setPlayers(ServerStatusResponse, Players)
WorldBorder.setCenter(WorldBorder, double, double)
LangReflectAccess.newMethod(LangReflectAccess, Class, String, Class[], Class, Class[], int, int, String, byte[], byte[], byte[])
Calendar.isNarrowFormatStyle(Calendar, int)
BigDecimal.toBigIntegerExact(BigDecimal)
IntSummaryStatistics.getMin(IntSummaryStatistics)
BigDecimal.audit(BigDecimal)
ByteBuffer.putShort(ByteBuffer, int, short | ByteBuffer, short)
ConstantPool.getFieldAt(ConstantPool, int)
MinecraftServer.initiateShutdown(MinecraftServer)
SortedSet.headSet(SortedSet, Object)
UserListIPBans.getBanEntry(UserListIPBans, SocketAddress)
ChronoZonedDateTime.from(TemporalAccessor)
Container.lightweightPaint(Container, Graphics)
MemberName.access$002(MemberName, Object)
BigDecimal.readObject(BigDecimal, ObjectInputStream)
EventExecutorGroup.submit(EventExecutorGroup, Callable | EventExecutorGroup, Runnable, Object | EventExecutorGroup, Runnable)
EntityItemFrame.registerFixesItemFrame(DataFixer)
Axis.byName(String)
Field.getLong(Field, Object)
Item.getItemStackDisplayName(Item, ItemStack)
ComponentPeer.createVolatileImage(ComponentPeer, int, int)
OfDouble.nextDouble(OfDouble)
LambdaFormEditor.lambdaFormEditor(LambdaForm)
AffineTransform.toString(AffineTransform)
IntSummaryStatistics.getMax(IntSummaryStatistics)
FieldAccessor.set(FieldAccessor, Object, Object)
Item.getRarity(Item, ItemStack)
AbstractStringBuilder.codePointCount(AbstractStringBuilder, int, int)
Style.setColor(Style, TextFormatting)
EntityLivingBase.getExperiencePoints(EntityLivingBase, EntityPlayer)
Region.initIDs()
EntityMinecart.getDragAir(EntityMinecart)
NetworkPlayerInfo.loadPlayerTextures(NetworkPlayerInfo)
URLConnection.getContentHandlerPkgPrefixes(URLConnection)
BigInteger.signInt(BigInteger)
SoundEventAccessor.getWeight(SoundEventAccessor)
Scoreboard.onObjectiveDisplayNameChanged(Scoreboard, ScoreObjective)
URLClassPath.push(URLClassPath, URL[])
TimeZone.getDisplayName(TimeZone, boolean, int, Locale | TimeZone, Locale | TimeZone, boolean, int | TimeZone)
EntityPlayer.registerFixesPlayer(DataFixer)
EventQueue.getPriority(AWTEvent)
IdentityArrayList.outOfBoundsMsg(IdentityArrayList, int)
Float.getX(Float | Float)
Float.getY(Float | Float)
Era.adjustInto(Era, Temporal)
Biome.isMutation(Biome)
Entity.getFlag(Entity, int)
Container.validateTree(Container)
Multimap.values(Multimap)
MobSpawnerBaseLogic.getEntityId(MobSpawnerBaseLogic)
Component.revalidate(Component)
CharSequence.lambda$codePoints$1(CharSequence)
World.getPlayerEntityByUUID(World, UUID)
DoubleBuffer.order(DoubleBuffer)
TextureAtlasSprite.makeAtlasSprite(ResourceLocation)
Render.setRenderOutlines(Render, boolean)
Thread.setNativeName(Thread, String)
IResourceManager.getResourceDomains(IResourceManager)
Minecraft.getDataFixer(Minecraft)
Container.setFocusTraversalPolicy(Container, FocusTraversalPolicy)
DoubleSummaryStatistics.toString(DoubleSummaryStatistics)
Attribute.set(Attribute, Object)
Class.toString(Class)
GuiButton.mouseDragged(GuiButton, Minecraft, int, int)
Duration.plusMillis(Duration, long)
Date.setHours(Date, int)
MinecraftServer.getMinecraftVersion(MinecraftServer)
ChronoPeriod.addTo(ChronoPeriod, Temporal)
Block.onBlockExploded(Block, World, BlockPos, Explosion)
EntityEquipmentSlot.getSlotType(EntityEquipmentSlot)
BaseLocale.getScript(BaseLocale)
Particle.isAlive(Particle)
IntStream.findAny(IntStream)
EntityLivingBase.isPlayerSleeping(EntityLivingBase)
Scoreboard.getObjectiveDisplaySlotNumber(String)
JsonElement.getAsByte(JsonElement)
Duration.writeExternal(Duration, DataOutput)
Region.getWidth(Region)
PrintJob.getGraphics(PrintJob)
Entity.getPortalCooldown(Entity)
InputStream.reset(InputStream)
Instant.readObject(Instant, ObjectInputStream)
Component.getAppliedShape(Component)
CompositeByteBuf.setMedium(CompositeByteBuf, int, int | CompositeByteBuf, int, int)
Window.mixOnReshaping(Window)
ParameterizedType.getRawType(ParameterizedType)
Entry.getKey(Entry)
Collection.size(Collection)
Control.getNoFallbackControl(List)
WorldInfo.isRaining(WorldInfo)
EntityMinecart.getDefaultDisplayTileOffset(EntityMinecart)
NonNullList.set(NonNullList, int, Object)
IntStream.skip(IntStream, long)
RenderGlobal.generateSky2(RenderGlobal)
EntityItem.attackEntityFrom(EntityItem, DamageSource, float)
Calendar.getTimeInMillis(Calendar)
Calendar.equals(Calendar, Object)
AccessibleComponent.getBounds(AccessibleComponent)
Component.calculateCurrentShape(Component)
MethodHandle.asTypeCached(MethodHandle, MethodType)
ScrollbarPeer.setLineIncrement(ScrollbarPeer, int)
CompositeContext.dispose(CompositeContext)
Duration.dividedBy(Duration, long)
Object.registerNatives()
Font.initFromValues(Font, AttributeValues)
Set.spliterator(Set)
Vector.lastElement(Vector)
World.getEntitiesInAABBexcluding(World, Entity, AxisAlignedBB, Predicate)
MethodTypeForm.primitiveParameterCount(MethodTypeForm)
Period.ofYears(int)
AttributeValues.getMask(EAttribute | EAttribute[])
NetworkManager.channelActive(NetworkManager, ChannelHandlerContext)
DisplayInfo.deserialize(JsonObject, JsonDeserializationContext)
FloatBuffer.slice(FloatBuffer)
Style.access$302(Style, Boolean)
Style.access$300(Style)
BlockModelRenderer.renderModelBrightnessColorQuads(BlockModelRenderer, float, float, float, float, List)
ReentrantLock.toString(ReentrantLock)
JsonWriter.peek(JsonWriter)
Snooper.access$500(Snooper)
AdvancementManager.reload(AdvancementManager)
FileChannel.tryLock(FileChannel, long, long, boolean | FileChannel)
Village.addVillageDoorInfo(Village, VillageDoorInfo)
Clipboard.getData(Clipboard, DataFlavor)
Method.copy(Method)
ChannelFuture.removeListener(ChannelFuture, GenericFutureListener)
VolatileImage.getSnapshot(VolatileImage)
ChannelOutboundBuffer.nioBufferCount(ChannelOutboundBuffer)
File.getAbsolutePath(File)
CombatEntry.getDamageSrcDisplayName(CombatEntry)
Template.getSize(Template)
PlayerList.changePlayerDimension(PlayerList, EntityPlayerMP, int)
ColorModel.getLinearGray16ToOtherGray16LUT(ICC_ColorSpace)
VillageDoorInfo.setLastActivityTimestamp(VillageDoorInfo, int)
Component.getBufferStrategy(Component)
EntityPlayerMP.handleClientSettings(EntityPlayerMP, CPacketClientSettings)
EntityLiving.canBeLeashedTo(EntityLiving, EntityPlayer)
OffsetTime.compareTo(OffsetTime, Object | OffsetTime, OffsetTime)
Debug.toString(byte[])
ModelRenderer.postRender(ModelRenderer, float)
NetworkPlayerInfo.setHealthBlinkTime(NetworkPlayerInfo, long)
Entity.isEntityInvulnerable(Entity, DamageSource)
ImmutableCollection.remove(ImmutableCollection, Object)
ChannelId.asShortText(ChannelId)
Toolkit.isFrameStateSupported(Toolkit, int)
BigInteger.montReduce(int[], int[], int, int)
MethodType.parameterList(MethodType)
NamedFunction.invoke_LLLL_V(MethodHandle, Object[])
MinecraftServer.isDemo(MinecraftServer)
VertexFormat.hasUvOffset(VertexFormat, int)
EntityLivingBase.isPlayer(EntityLivingBase)
Minecraft.getResourceManager(Minecraft)
EntityLookHelper.setLookPosition(EntityLookHelper, double, double, double, float, float)
AffineTransform.getTranslateY(AffineTransform)
BlockColors.init()
Vector.lastIndexOf(Vector, Object, int | Vector, Object)
FileChannel.truncate(FileChannel, long | FileChannel, long)
World.getPlayerEntityByName(World, String)
Window.setType(Window, Type)
Potion.registerPotions()
AccessibleContext.firePropertyChange(AccessibleContext, String, Object, Object)
Entity.setVelocity(Entity, double, double, double)
FileSystem.getRootDirectories(FileSystem)
IAttributeInstance.getModifiers(IAttributeInstance)
BaseCalendar.getFixedDate(BaseCalendar, int, int, int, Date | BaseCalendar, CalendarDate)
ModelBase.setModelAttributes(ModelBase, ModelBase)
NameService.lookupAllHostAddr(NameService, String)
OptionalLong.toString(OptionalLong)
MethodType.lastParameterType(MethodType)
URLConnection.getContentEncoding(URLConnection)
VolatileImage.validate(VolatileImage, GraphicsConfiguration)
ChronoLocalDateTime.isEqual(ChronoLocalDateTime, ChronoLocalDateTime)
LocalTime.hashCode(LocalTime)
CombatTracker.resetFallSuffix(CombatTracker)
DragGestureRecognizer.appendEvent(DragGestureRecognizer, InputEvent)
SeekableByteChannel.size(SeekableByteChannel)
NamedFunction.invoke_LLLL_L(MethodHandle, Object[])
ImmutableMap.put(ImmutableMap, Object, Object)
Village.updateNumIronGolems(Village)
NetworkPlayerInfo.getGameProfile(NetworkPlayerInfo)
Control.access$300()
Logger.isWarnEnabled(Logger, Marker | Logger)
ChannelPromise.removeListeners(ChannelPromise, GenericFutureListener[])
AccessibleEditableText.insertTextAtIndex(AccessibleEditableText, int, String)
Wrapper.wrapperSimpleName(Wrapper)
PotionEffect.setCurativeItems(PotionEffect, List)
EntityRenderer.renderItemActivation(EntityRenderer, int, int, float)
OffsetDateTime.toLocalDateTime(OffsetDateTime)
BlockStateContainer.validateProperty(Block, IProperty)
IAttributeInstance.setBaseValue(IAttributeInstance, double)
ScorePlayerTeam.setPrefix(ScorePlayerTeam, String)
ByteBuf.touch(ByteBuf, Object | ByteBuf | ByteBuf, Object | ByteBuf)
Block.onExplosionDestroy(Block, World, BlockPos, Explosion)
OptionalDouble.orElseThrow(OptionalDouble, Supplier)
World.destroyBlock(World, BlockPos, boolean)
Rectangle.grow(Rectangle, int, int)
ByteBuffer.getDouble(ByteBuffer | ByteBuffer, int)
Entity.setItemStackToSlot(Entity, EntityEquipmentSlot, ItemStack)
Item.getItemFromBlock(Block)
OffsetDateTime.atZoneSimilarLocal(OffsetDateTime, ZoneId)
VillageDoorInfo.getDistanceSquared(VillageDoorInfo, int, int, int)
MethodHandle.linkToSpecial(Object[])
ArrayList.fastRemove(ArrayList, int)
ArrayList.removeAll(ArrayList, Collection)
WorldServer.isUpdateScheduled(WorldServer, BlockPos, Block)
LongBuffer.compact(LongBuffer)
Component.addInputMethodListener(Component, InputMethodListener)
EnumRarity.values()
BasicType.basicTypeWrapper(BasicType)
Toolkit.lazilyLoadDesktopProperty(Toolkit, String)
ChannelHandlerContext.channel(ChannelHandlerContext)
ByteBuf.getUnsignedMedium(ByteBuf, int)
BlockStateContainer.getProperties(BlockStateContainer)
Chunk.isPopulated(Chunk)
Vec3i.compareTo(Vec3i, Object | Vec3i, Vec3i)
FileStore.getUnallocatedSpace(FileStore)
NBTTagCompound.readKey(DataInput, NBTSizeTracker)
URI.access$200()
Excluder.excludeClass(Excluder, Class, boolean)
EntityLiving.getTalkInterval(EntityLiving)
PlayerList.getPlayers(PlayerList)
EntityPlayer.setSpawnChunk(EntityPlayer, BlockPos, boolean, int)
GameProfile.toString(GameProfile)
Name.typeChar(Name)
MethodHandle.setVarargs(MethodHandle, MemberName)
Class.isAnnotationPresent(Class, Class)
DamageSource.isExplosion(DamageSource)
AffineTransform.inverseTransform(AffineTransform, Point2D, Point2D | AffineTransform, double[], int, double[], int, int)
Integer.toHexString(int)
ItemStack.getAttributeModifiers(ItemStack, EntityEquipmentSlot)
ComponentPeer.reparent(ComponentPeer, ContainerPeer)
BufferBuilder.begin(BufferBuilder, int, VertexFormat)
NetHandlerPlayClient.getNetworkManager(NetHandlerPlayClient)
TemplateManager.readTemplateFromStream(TemplateManager, String, InputStream)
EntityBodyHelper.updateRenderAngles(EntityBodyHelper)
Calendar.getZone(Calendar)
Calendar.getSetStateFields(Calendar)
MapData.updateMapData(MapData, int, int)
Window.adjustListeningChildrenOnParent(Window, long, int)
Dialog.isUndecorated(Dialog)
NetHandlerPlayClient.handleEntityMovement(NetHandlerPlayClient, SPacketEntity)
CompositeByteBuf.capacity(CompositeByteBuf, int | CompositeByteBuf, int | CompositeByteBuf)
ImmutableList.iterator(ImmutableList | ImmutableList)
DragSourceContextPeer.transferablesFlavorsChanged(DragSourceContextPeer)
ItemStack.areCapsCompatible(ItemStack, ItemStack)
Constructor.isSynthetic(Constructor)
BaseCalendar.getDayOfWeek(BaseCalendar, CalendarDate)
ItemStack.areItemStackShareTagsEqual(ItemStack, ItemStack)
AWTEvent.access$100(AWTEvent)
Component.writeObject(Component, ObjectOutputStream)
ImmutableList.builder()
AWTEvent.access$102(AWTEvent, byte[])
TempCategory.valueOf(String)
MinecraftServer.setPlayerIdleTimeout(MinecraftServer, int)
Period.plusMonths(Period, long)
Object.notify(Object)
LambdaFormEditor.addArgumentForm(LambdaFormEditor, int, BasicType)
AbstractStringBuilder.setLength(AbstractStringBuilder, int)
NibbleArray.get(NibbleArray, int, int, int)
MemberName.getParameterTypes(MemberName)
Block.observedNeighborChange(Block, IBlockState, World, BlockPos, Block, BlockPos)
HoverEvent.getValue(HoverEvent)
InputContext.setCharacterSubsets(InputContext, Subset[])
Entity.getEntityString(Entity)
OffsetTime.parse(CharSequence, DateTimeFormatter | CharSequence)
LocalDateTime.readExternal(DataInput)
ChannelOutboundBuffer.setUserDefinedWritability(ChannelOutboundBuffer, int, boolean | ChannelOutboundBuffer, int)
PrintJob.getPageResolution(PrintJob)
TextureAtlasSprite.loadSprite(TextureAtlasSprite, PngSizeInfo, boolean)
CompositeByteBuf.writeBoolean(CompositeByteBuf, boolean | CompositeByteBuf, boolean)
AffineTransform.scale(AffineTransform, double, double)
Item.getItemEnchantability(Item | Item, ItemStack)
Chunk.getEntityLists(Chunk)
URLConnection.stripOffParameters(URLConnection, String)
NetHandlerPlayClient.handleSpawnPlayer(NetHandlerPlayClient, SPacketSpawnPlayer)
NBTTagCompound.getShort(NBTTagCompound, String)
Particle.setMaxAge(Particle, int)
Throwable.printStackTrace(Throwable, PrintWriter | Throwable, PrintStreamOrWriter | Throwable | Throwable, PrintStream)
FileChannel.read(FileChannel, ByteBuffer[], int, int | FileChannel, ByteBuffer | FileChannel, ByteBuffer, long | FileChannel, ByteBuffer[])
Block.isExceptionBlockForAttaching(Block)
IntBuffer.hashCode(IntBuffer)
Lookup.findVirtual(Lookup, Class, String, MethodType)
Block.getExtendedState(Block, IBlockState, IBlockAccess, BlockPos)
ModalExclusionType.values()
CompositeByteBuf.findComponent(CompositeByteBuf, int)
Block.updateTick(Block, World, BlockPos, IBlockState, Random)
Component.access$002(Component, Region)
Dialog.hide(Dialog)
RenderGlobal.addChainedFilledBoxVertices(BufferBuilder, double, double, double, double, double, double, float, float, float, float)
UserListEntry.onSerialization(UserListEntry, JsonObject)
URL.isValidProtocol(URL, String)
ByteBuf.readUnsignedByte(ByteBuf)
Quaternion.mul(Quaternion, Quaternion, Quaternion)
Block.getWeakPower(Block, IBlockState, IBlockAccess, BlockPos, EnumFacing)
InetAddress.isReachable(InetAddress, int | InetAddress, NetworkInterface, int, int)
ImmutableList.replaceAll(ImmutableList, UnaryOperator)
AdvancementProgress.toString(AdvancementProgress)
OffsetDateTime.range(OffsetDateTime, TemporalField)
ChronoZonedDateTime.withLaterOffsetAtOverlap(ChronoZonedDateTime)
Entity.playStepSound(Entity, BlockPos, Block)
ChannelPromise.sync(ChannelPromise)
CombatTracker.trackDamage(CombatTracker, DamageSource, float, float)
CompositeByteBuf._getByte(CompositeByteBuf, int)
Potion.performEffect(Potion, EntityLivingBase, int)
AttributeValues.hashCode(AttributeValues)
Container.preProcessKeyEvent(Container, KeyEvent)
LocalTime.compareTo(LocalTime, Object | LocalTime, LocalTime)
OffsetDateTime.format(OffsetDateTime, DateTimeFormatter)
Enum.name(Enum)
EntityPlayer.updateSize(EntityPlayer)
Item.onItemRightClick(Item, World, EntityPlayer, EnumHand)
Graphics.create(Graphics | Graphics, int, int, int, int)
OffsetDateTime.compareTo(OffsetDateTime, Object | OffsetDateTime, OffsetDateTime)
Float.setRect(Float, Rectangle2D | Float, double, double, double, double | Float, float, float, float, float)
Component.addMouseWheelListener(Component, MouseWheelListener)
DropTargetContextPeer.getTransferDataFlavors(DropTargetContextPeer)
ThreadGroup.getMaxPriority(ThreadGroup)
Method.getReturnType(Method)
String.join(CharSequence, CharSequence[] | CharSequence, Iterable)
EntityPlayer.getCapability(EntityPlayer, Capability, EnumFacing)
LambdaFormBuffer.insertName(LambdaFormBuffer, int, Name, boolean)
Boolean.logicalAnd(boolean, boolean)
NumericShaper.shapeContextually(NumericShaper, char[], int, int, Range | NumericShaper, char[], int, int, int)
Class.access$502(boolean)
JsonReader.skipTo(JsonReader, String)
CompositeByteBuf._setMedium(CompositeByteBuf, int, int)
Unsafe.closeForcibly(Unsafe)
ChunkCache.getTileEntity(ChunkCache, BlockPos | ChunkCache, BlockPos, EnumCreateEntityType)
String.indexOfSupplementary(String, int, int)
Builder.deserialize(JsonObject, JsonDeserializationContext)
EntityLiving.canPickUpLoot(EntityLiving)
Chunk.removeEntityAtIndex(Chunk, Entity, int)
LootTable.access$000(LootTable)
BlockFlower.getOffsetType(BlockFlower)
URLConnection.getHeaderFields(URLConnection)
World.getDebugLoadedEntities(World)
MethodTypeForm.parameterCount(MethodTypeForm)
ItemStack.damageItem(ItemStack, int, EntityLivingBase)
TextureAtlasSprite.getDependencies(TextureAtlasSprite)
CompositeByteBuf._setMediumLE(CompositeByteBuf, int, int)
EntityMinecart.shouldDoRailFunctions(EntityMinecart)
GuiScreen.sendChatMessage(GuiScreen, String | GuiScreen, String, boolean)
ImmutableMultiset.add(ImmutableMultiset, Object, int)
Item.getPropertyGetter(Item, ResourceLocation)
BigDecimal.multiplyDivideAndRound(long, long, long, int, int, int)
StrikeMetrics.merge(StrikeMetrics, StrikeMetrics)
Comparator.nullsFirst(Comparator)
IAttribute.clampValue(IAttribute, double)
EntityLivingBase.getMaxHealth(EntityLivingBase)
Snooper.getUniqueID(Snooper)
PlayerList.getCurrentPlayerCount(PlayerList)
Container.removeNotify(Container)
BigInteger.smallToString(BigInteger, int)
LambdaFormEditor.bindArgumentForm(LambdaFormEditor, int)
Package.getName(Package)
Integer.equals(Integer, Object)
ZonedDateTime.withDayOfYear(ZonedDateTime, int)
Executable.isSynthetic(Executable)
Entity.isInWater(Entity)
ChannelConfig.getAllocator(ChannelConfig)
LongStream.forEach(LongStream, LongConsumer)
NBTBase.getString(NBTBase)
AccessibleComponent.getFont(AccessibleComponent)
IntStream.anyMatch(IntStream, IntPredicate)
LambdaFormEditor.putInCache(LambdaFormEditor, Transform, LambdaForm)
Event.initIDs()
Item.getNBTShareTag(Item, ItemStack)
AffineTransform.getTranslateX(AffineTransform)
GuiToast.drawToast(GuiToast, ScaledResolution)
BigDecimal.longLongCompareMagnitude(long, long, long, long)
JsonObject.get(JsonObject, String)
Village.getCenter(Village)
Collection.spliterator(Collection)
AttributeValues.update(AttributeValues, EAttribute)
Class.getDeclaringClass0(Class)
DataEntry.setDirty(DataEntry, boolean)
Class.privateGetDeclaredConstructors(Class, boolean)
GuiButton.drawButton(GuiButton, Minecraft, int, int, float)
CombatTracker.getFallSuffix(CombatTracker, CombatEntry)
ListIterator.hasPrevious(ListIterator)
CompositeByteBuf._getUnsignedMediumLE(CompositeByteBuf, int)
SoundHandler.setListener(SoundHandler, EntityPlayer, float | SoundHandler, Entity, float)
Iterator.hasNext(Iterator)
StringBuilder.codePointCount(StringBuilder, int, int)
GameSettings.isKeyDown(KeyBinding)
ItemCameraTransforms.applyTransformSide(ItemTransformVec3f, boolean)
Component.isSameOrAncestorOf(Component, Component, boolean)
PlayerList.bypassesPlayerLimit(PlayerList, GameProfile)
AffineTransform.setToIdentity(AffineTransform)
Component.keyUp(Component, Event, int)
BufferBuilder.getDrawMode(BufferBuilder)
Graphics2D.getRenderingHint(Graphics2D, Key)
DoubleStream.sequential(DoubleStream | DoubleStream)
Level.readResolve(Level)
ImmutableMapEntry.isReusable(ImmutableMapEntry)
ReentrantLock.getQueueLength(ReentrantLock)
MapData.addTargetDecoration(ItemStack, BlockPos, String, Type)
Window.addWindowFocusListener(Window, WindowFocusListener)
Component.getName(Component)
Multimap.putAll(Multimap, Multimap | Multimap, Object, Iterable)
JsonArray.getAsBigDecimal(JsonArray)
BaseCalendar.normalizeMonth(BaseCalendar, CalendarDate)
BlockStateContainer.read(BlockStateContainer, PacketBuffer)
Component.readObject(Component, ObjectInputStream)
LayoutManager.preferredLayoutSize(LayoutManager, Container)
ZoneOffset.isSupported(ZoneOffset, TemporalField)
SoundCategory.values()
Graphics2D.rotate(Graphics2D, double, double, double | Graphics2D, double)
Channel.close(Channel)
AttributeValues.unsetDefault(AttributeValues)
TextHitInfo.isLeadingEdge(TextHitInfo)
Window.access$1002(Window, float)
RenderGlobal.sendBlockBreakProgress(RenderGlobal, int, BlockPos, int)
Font2D.canDisplay(Font2D, int | Font2D, char)
DisplayInfo.getX(DisplayInfo)
DisplayInfo.getY(DisplayInfo)
JsonArray.getAsBoolean(JsonArray)
ImmutableList.contains(ImmutableList, Object)
LocalDateTime.isEqual(LocalDateTime, ChronoLocalDateTime)
Chunk.getBlockStorageArray(Chunk)
Collection.clear(Collection)
Component.getGraphics(Component)
Map.containsValue(Map, Object)
Locale.getLanguage(Locale)
Calendar.readObject(Calendar, ObjectInputStream)
ChronoLocalDateTime.isSupported(ChronoLocalDateTime, TemporalField | ChronoLocalDateTime, TemporalUnit)
Excluder.withVersion(Excluder, double)
URI.access$1800()
Chunk.wasTicked(Chunk)
Era.range(Era, TemporalField)
ImmutableMap.entryOf(Object, Object)
NetworkPlayerInfo.getResponseTime(NetworkPlayerInfo)
Biome.getHeightVariation(Biome)
World.getChunkProvider(World)
Village.updateNumVillagers(Village)
Raster.getSampleFloat(Raster, int, int, int)
DragSource.getDragThreshold()
SoundManager.setVolume(SoundManager, SoundCategory, float)
EntitySenses.canSee(EntitySenses, Entity)
Manifest.getTrustedAttributes(Manifest, String)
EntityLiving.getLeashHolder(EntityLiving)
NBTTagCompound.createCrashReport(NBTTagCompound, String, int, ClassCastException)
Window.adjustDecendantsOnParent(Window, int)
Logger.warn(Logger, CharSequence | Logger, String, Object, Object, Object, Object, Object, Object, Object | Logger, Marker, String, Supplier[] | Logger, Marker, String, Object, Object, Object, Object, Object, Object | Logger, Marker, MessageSupplier | Logger, String, Object, Object, Object, Object | Logger, String, Object, Object, Object | Logger, Marker, String, Object, Object, Object | Logger, Marker, String, Object[] | Logger, MessageSupplier, Throwable | Logger, Marker, Object | Logger, Marker, String, Object, Object, Object, Object, Object, Object, Object | Logger, String, Object, Object, Object, Object, Object, Object, Object, Object, Object | Logger, Marker, String, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object | Logger, Marker, String, Object, Object, Object, Object | Logger, Marker, Message, Throwable | Logger, Marker, String, Object, Object | Logger, String, Object, Object, Object, Object, Object, Object, Object, Object | Logger, Marker, Message | Logger, Marker, String, Throwable | Logger, MessageSupplier | Logger, String, Object, Object, Object, Object, Object | Logger, Marker, Supplier, Throwable | Logger, Message, Throwable | Logger, String, Object, Object | Logger, Marker, CharSequence, Throwable | Logger, Marker, String, Object, Object, Object, Object, Object, Object, Object, Object | Logger, String, Supplier[] | Logger, Marker, CharSequence | Logger, Marker, Supplier | Logger, CharSequence, Throwable | Logger, Supplier, Throwable | Logger, Marker, MessageSupplier, Throwable | Logger, Object | Logger, Object, Throwable | Logger, String, Object[] | Logger, String, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object | Logger, Message | Logger, Marker, String, Object, Object, Object, Object, Object, Object, Object, Object, Object | Logger, Supplier | Logger, String, Object, Object, Object, Object, Object, Object | Logger, String, Object | Logger, Marker, String, Object, Object, Object, Object, Object | Logger, Marker, String, Object | Logger, String, Throwable | Logger, Marker, String | Logger, String | Logger, Marker, Object, Throwable)
EventQueue.detachDispatchThread(EventQueue, EventDispatchThread)
Executable.getGenericInfo(Executable)
CompositeByteBuf.removeComponent(CompositeByteBuf, int)
Chunk.checkLight(Chunk | Chunk, int, int)
ISaveFormat.convertMapFormat(ISaveFormat, String, IProgressUpdate)
ShortBuffer.asReadOnlyBuffer(ShortBuffer)
BlockStateContainer.getIndex(int, int, int)
EntityLivingBase.getActivePotionMap(EntityLivingBase)
ResourcePackRepository.updateRepositoryEntriesAll(ResourcePackRepository)
Entity.extinguish(Entity)
Thread.resume(Thread)
ColorModel.getAlpha(ColorModel, int | ColorModel, Object)
Component.mouseUp(Component, Event, int, int)
ChannelHandlerContext.hasAttr(ChannelHandlerContext, AttributeKey)
FileSystemProvider.newFileChannel(FileSystemProvider, Path, Set, FileAttribute[])
CommandResultStats.writeStatsToNBT(CommandResultStats, NBTTagCompound)
WriteBufferWaterMark.high(WriteBufferWaterMark)
Object.equals(Object, Object)
ChannelPromise.setSuccess(ChannelPromise | ChannelPromise, Void)
Condition.signal(Condition)
ConstructorRepository.getExceptionTypes(ConstructorRepository)
IAttributeInstance.applyModifier(IAttributeInstance, AttributeModifier)
Comparator.lambda$comparingInt$7b0bb60$1(ToIntFunction, Object, Object)
EventQueue.getMostRecentEventTime()
IsoChronology.resolveDate(IsoChronology, Map, ResolverStyle | IsoChronology, Map, ResolverStyle)
ItemStack.areItemStacksEqualUsingNBTShareTag(ItemStack, ItemStack)
LambdaFormBuffer.startEdit(LambdaFormBuffer)
EntityPlayer.setRightShoulderEntity(EntityPlayer, NBTTagCompound)
URL.hashCode(URL)
Instant.query(Instant, TemporalQuery)
Entity.notifyDataManagerChange(Entity, DataParameter)
Long.sum(long, long)
InetAddress.loadImpl(String)
Style.isEmpty(Style)
Dialog.show(Dialog)
World.setRainStrength(World, float)
Container.setFocusTraversalPolicyProvider(Container, boolean)
GlyphVector.getGlyphVisualBounds(GlyphVector, int)
IdentityArrayList.rangeCheckForAdd(IdentityArrayList, int)
EntityLiving.getLookHelper(EntityLiving)
CombatTracker.reset(CombatTracker)
BufferedImage.getMinY(BufferedImage)
BufferedImage.getMinX(BufferedImage)
OffsetTime.query(OffsetTime, TemporalQuery)
TimeZone.setID(TimeZone, String)
MethodTypeForm.basicType(MethodTypeForm)
File.getTotalSpace(File)
Attributes.entrySet(Attributes)
File.canWrite(File)
Toolkit.isDynamicLayoutSet(Toolkit)
ParameterizedType.getActualTypeArguments(ParameterizedType)
RenderManager.getEntityRenderObject(RenderManager, Entity)
Component.doLayout(Component)
OfLong.nextLong(OfLong)
ByteBuffer.putChar(ByteBuffer, char | ByteBuffer, int, char)
MappedByteBuffer.mappingOffset(MappedByteBuffer)
UserListIPBans.isBanned(UserListIPBans, SocketAddress)
OfInt.tryAdvance(OfInt, IntConsumer | OfInt, Consumer | OfInt, Object)
DragGestureRecognizer.fireDragGestureRecognized(DragGestureRecognizer, int, Point)
EntityLivingBase.isPotionApplicable(EntityLivingBase, PotionEffect)
LineMetrics.getNumChars(LineMetrics)
Item.getContainerItem(Item, ItemStack | Item)
EntityMinecart.applyDrag(EntityMinecart)
String.offsetByCodePoints(String, int, int)
FontRenderer.trimStringNewline(FontRenderer, String)
Region.getBounds(Region, int[])
BigDecimal.toEngineeringString(BigDecimal)
EntityPlayer.getSuffixes(EntityPlayer)
Integer.rotateLeft(int, int)
ClassLoader.findResource(ClassLoader, String)
Calendar.getMinimalDaysInFirstWeek(Calendar)
AsynchronousFileChannel.read(AsynchronousFileChannel, ByteBuffer, long, Object, CompletionHandler | AsynchronousFileChannel, ByteBuffer, long)
Component.isVisible_NoClientCode(Component)
FileSystemProvider.loadInstalledProviders()
Path.resolveSibling(Path, Path | Path, String)
ISaveHandler.saveWorldInfo(ISaveHandler, WorldInfo)
NetHandlerPlayClient.lambda$handleRecipeBook$1(NetHandlerPlayClient, RecipeBook, IRecipe)
EntityPlayer.applyEntityAttributes(EntityPlayer)
InputMethodRequests.getSelectedText(InputMethodRequests, Attribute[])
ArrayList.listIterator(ArrayList, int | ArrayList)
SearchTreeManager.get(SearchTreeManager, Key)
NetHandlerPlayClient.lambda$handleRecipeBook$2(RecipeBook, RecipeList)
BigInteger.largePrime(int, int, Random)
ScorePlayerTeam.getPrefix(ScorePlayerTeam)
MusicType.getMinDelay(MusicType)
StackTraceElement.hashCode(StackTraceElement)
Entity.getName(Entity)
EntityPlayerMP.updateFallState(EntityPlayerMP, double, boolean, IBlockState, BlockPos)
PlayerList.getBannedIPs(PlayerList)
RetentionPolicy.values()
Snooper.access$600(Snooper)
Chunk.isEmptyBetween(Chunk, int, int)
EventExecutorGroup.isShuttingDown(EventExecutorGroup)
LocalDate.plusWeeks(LocalDate, long)
Entity.getRenderDistanceWeight()
AttributeValues.anyNonDefault(AttributeValues, int)
EntityLiving.getCanSpawnHere(EntityLiving)
URI.isOpaque(URI)
Window.setWarningString(Window)
ItemModelMesher.getModelManager(ItemModelMesher)
IsoChronology.localDateTime(IsoChronology, TemporalAccessor | IsoChronology, TemporalAccessor)
EventQueue.getMostRecentEventTimeEx(EventQueue)
ComponentPeer.setVisible(ComponentPeer, boolean)
Properties.store0(Properties, BufferedWriter, String, boolean)
WorldInfo.setSpawnY(WorldInfo, int)
WorldInfo.setSpawnZ(WorldInfo, int)
WorldInfo.setSpawnX(WorldInfo, int)
WorldBorder.minX(WorldBorder)
ChannelOutboundBuffer.isEmpty(ChannelOutboundBuffer)
CharBuffer.equals(CharBuffer, Object | char, char)
WorldBorder.minZ(WorldBorder)
GameRules.setOrCreateGameRule(GameRules, String, String)
GuiScreen.mouseClickMove(GuiScreen, int, int, int, long)
ArrayList.spliterator(ArrayList)
EntityLivingBase.getHealth(EntityLivingBase)
Window.setCursor(Window, Cursor)
NetHandlerPlayClient.handleSetExperience(NetHandlerPlayClient, SPacketSetExperience)
StateImplementation.withProperty(StateImplementation, IProperty, Comparable)
BigInteger.primitiveLeftShift(int[], int, int)
Entity.canUseCommand(Entity, int, String)
JsonPrimitive.getAsByte(JsonPrimitive)
BufferedImage.getPropertyNames(BufferedImage)
Duration.getUnits(Duration)
Container.getComponentsSync(Container)
Graphics.fill3DRect(Graphics, int, int, int, int, boolean)
URLConnection.setDefaultAllowUserInteraction(boolean)
EntityRenderer.renderWorldPass(EntityRenderer, int, float, long)
File.readObject(File, ObjectInputStream)
Multimap.clear(Multimap)
LocalDateTime.range(LocalDateTime, TemporalField)
Component.mouseExit(Component, Event, int, int)
CompiledChunk.getTileEntities(CompiledChunk)
Style.access$402(Style, Boolean)
ShaderManager.deleteShader(ShaderManager)
Style.access$400(Style)
ZonedDateTime.withMinute(ZonedDateTime, int)
Container.getAlignmentX(Container)
Wrapper.hashChar(char)
Container.getAlignmentY(Container)
Item.getCreatorModId(Item, ItemStack)
ListPeer.setMultipleMode(ListPeer, boolean)
JsonNull.hashCode(JsonNull)
RenderingHints.isEmpty(RenderingHints)
Window.getModalBlocker(Window)
Constructor.acquireConstructorAccessor(Constructor)
Graphics.setFont(Graphics, Font)
Rectangle.getWidth(Rectangle)
Month.values()
MinecraftServer.getKeyPair(MinecraftServer)
HorseArmorType.valueOf(String)
ChronoZonedDateTime.withEarlierOffsetAtOverlap(ChronoZonedDateTime)
Window.getBackground(Window)
Component.remove(Component, MenuComponent)
GraphicsConfiguration.getBufferCapabilities(GraphicsConfiguration)
Class.getResource(Class, String)
Class.getClasses(Class)
MethodTypeForm.returnSlotCount(MethodTypeForm)
World.hasCapability(World, Capability, EnumFacing)
Chunk.removeEntity(Chunk, Entity)
ClientAdvancementManager.setListener(ClientAdvancementManager, IListener)
CompositeByteBuf.readerIndex(CompositeByteBuf, int | CompositeByteBuf, int)
OfLong.next(OfLong | OfLong)
EntityPlayer.getLuck(EntityPlayer)
URL.getQuery(URL)
URI.getUserInfo(URI)
DisplayInfo.read(PacketBuffer)
ImmutableSetMultimap.valueSet(Comparator, Collection)
CompositeByteBuf.nioBuffer(CompositeByteBuf, int, int)
Minecraft.getBlockRendererDispatcher(Minecraft)
AWTEvent.access$000(AWTEvent)
IdentityArrayList.ensureCapacity(IdentityArrayList, int)
URLConnection.readBytes(int[], int, InputStream)
AWTEvent.access$002(AWTEvent, boolean)
DropTarget.clearAutoscroll(DropTarget)
Accessible.getAccessibleContext(Accessible)
ByteBuffer.getLong(ByteBuffer, int | ByteBuffer)
GraphicAttribute.getAdvance(GraphicAttribute)
Block.isLadder(Block, IBlockState, IBlockAccess, BlockPos, EntityLivingBase)
Calendar.isExternallySet(Calendar, int)
Container.getAccessibleChild(Container, int)
World.getCelestialAngleRadians(World, float)
EntityJumpHelper.doJump(EntityJumpHelper)
IChunkLoader.saveExtraChunkData(IChunkLoader, World, Chunk)
WriteBufferWaterMark.low(WriteBufferWaterMark)
URI.access$300(char, long, long)
TextureAtlasSprite.getOriginY(TextureAtlasSprite)
TextureAtlasSprite.getOriginX(TextureAtlasSprite)
PotionEffect.onUpdate(PotionEffect, EntityLivingBase)
Calendar.writeObject(Calendar, ObjectOutputStream)
OfInt.forEachRemaining(OfInt, Consumer | OfInt, Consumer | OfInt, Object | OfInt, IntConsumer | OfInt, IntConsumer | OfInt, Object)
Future.cancel(Future, boolean | Future, boolean)
RenderingHints.equals(RenderingHints, Object)
TextureManager.loadTexture(TextureManager, ResourceLocation, ITextureObject)
ChannelPipeline.addLast(ChannelPipeline, String, ChannelHandler | ChannelPipeline, EventExecutorGroup, ChannelHandler[] | ChannelPipeline, ChannelHandler[] | ChannelPipeline, EventExecutorGroup, String, ChannelHandler)
BigDecimal.intValueExact(BigDecimal)
StateImplementation.withMirror(StateImplementation, Mirror)
Tutorial.handleSetSlot(Tutorial, ItemStack)
LocalDateTime.withMinute(LocalDateTime, int)
EntityLivingBase.canBeHitWithPotion(EntityLivingBase)
Image.getScaledInstance(Image, int, int, int)
ItemStack.isStackable(ItemStack)
Attributes.containsKey(Attributes, Object)
StringBuilder.delete(StringBuilder, int, int | StringBuilder, int, int)
DoubleStream.findAny(DoubleStream)
RenderGlobal.hasCloudFog(RenderGlobal, double, double, double, float)
RenderLivingBase.handleRotationFloat(RenderLivingBase, EntityLivingBase, float)
Block.getTranslationKey(Block)
Font.hasLayoutAttributes(Font)
ByteBuf.getShort(ByteBuf, int)
Color.getColorSpace(Color)
SpanIterator.getNativeIterator(SpanIterator)
Entity.addTag(Entity, String)
FontRenderer.getFormatFromString(String)
BufferedImage.isAlphaPremultiplied(BufferedImage)
Class.getDeclaredAnnotationsByType(Class, Class)
Item.renderHelmetOverlay(Item, ItemStack, EntityPlayer, ScaledResolution, float)
FileLock.isValid(FileLock)
PathNavigate.getPath(PathNavigate)
MethodHandle.type(MethodHandle)
Unsafe.close(Unsafe, ChannelPromise)
LongStream.findAny(LongStream)
RenderItem.registerItems(RenderItem)
World.isAreaLoaded(World, BlockPos, int | World, StructureBoundingBox, boolean | World, BlockPos, BlockPos | World, StructureBoundingBox | World, BlockPos, BlockPos, boolean | World, int, int, int, int, int, int, boolean | World, BlockPos, int, boolean)
Entity.isRiding(Entity)
Raster.getWidth(Raster)
Vector3f.translate(Vector3f, float, float, float)
Long.toBinaryString(long)
Graphics.drawImage(Graphics, Image, int, int, Color, ImageObserver | Graphics, Image, int, int, int, int, Color, ImageObserver | Graphics, Image, int, int, int, int, int, int, int, int, Color, ImageObserver | Graphics, Image, int, int, int, int, int, int, int, int, ImageObserver | Graphics, Image, int, int, ImageObserver | Graphics, Image, int, int, int, int, ImageObserver)
Entity.onKillCommand(Entity)
Entity.setPositionNonDirty(Entity)
EnumFlowerType.getMeta(EnumFlowerType)
JsonElement.deepCopy(JsonElement)
ItemStack.setItemFrame(ItemStack, EntityItemFrame)
NetHandlerPlayClient.handlePlayerPosLook(NetHandlerPlayClient, SPacketPlayerPosLook)
URI.quote(String, long, long)
BigInteger.randomBits(int, Random)
Path.subpath(Path, int, int)
JsonPrimitive.getAsFloat(JsonPrimitive)
EntityPlayerMP.onFinishedPotionEffect(EntityPlayerMP, PotionEffect)
URI.writeObject(URI, ObjectOutputStream)
Invokers.invokeHandleForm(MethodType, boolean, int)
ByteBuffer.put(ByteBuffer, ByteBuffer | ByteBuffer, byte | ByteBuffer, byte[] | ByteBuffer, int, byte | ByteBuffer, byte[], int, int)
JsonPrimitive.getAsBigDecimal(JsonPrimitive)
AttributeSet.containsAttribute(AttributeSet, Object, Object)
Instant.writeExternal(Instant, DataOutput)
Logger.traceEntry(Logger, String, Object[] | Logger, Message | Logger, Supplier[] | Logger | Logger, String, Supplier[])
MobSpawnerBaseLogic.broadcastEvent(MobSpawnerBaseLogic, int)
Rectangle.reshape(Rectangle, int, int, int, int)
Toolkit.createMenuItem(Toolkit, MenuItem)
BasicFileAttributes.isSymbolicLink(BasicFileAttributes)
Calendar.getFirstDayOfWeek(Calendar)
ComponentPeer.getGraphics(ComponentPeer)
MemberName.getMethodType(MemberName)
EntityLiving.onUpdate(EntityLiving)
Method.isVarArgs(Method)
InputContext.isCompositionEnabled(InputContext)
Executable.getAllGenericParameterTypes(Executable)
Component.access$100(Component)
EntityLivingBase.hasCapability(EntityLivingBase, Capability, EnumFacing)
Scoreboard.getPlayersTeam(Scoreboard, String)
BufferBuilder.growBuffer(BufferBuilder, int)
Entity.setInWeb(Entity)
RenderItem.shouldRenderItemIn3D(RenderItem, ItemStack)
BigInteger.jacobiSymbol(int, BigInteger)
MethodHandle.internalProperties(MethodHandle)
Action.getCanonicalName(Action | Action)
Entity.addEntityCrashInfo(Entity, CrashReportCategory)
TileEntity.addInfoToCrashReport(TileEntity, CrashReportCategory)
ThreadGroup.activeGroupCount(ThreadGroup)
GenLayer.selectRandom(GenLayer, int[])
Component.isVisible(Component)
EntityItem.getAge(EntityItem)
AccessibleTable.setAccessibleCaption(AccessibleTable, Accessible)
ServerData.getResourceMode(ServerData)
ItemStack.isOnItemFrame(ItemStack)
CompositeByteBuf.setZero(CompositeByteBuf, int, int | CompositeByteBuf, int, int)
String.toCharArray(String)
Container.getBottommostComponentIndex(Container)
Period.getMonths(Period)
CharBuffer.asReadOnlyBuffer(CharBuffer)
AffineTransform.rotate270(AffineTransform)
PathNavigate.debugPathFinding(PathNavigate)
Class.getDeclaredClasses(Class)
Class.access$402(boolean)
ResourcePackRepository.downloadResourcePack(ResourcePackRepository, String, String)
ChannelMetadata.defaultMaxMessagesPerRead(ChannelMetadata)
PathPoint.isAssigned(PathPoint)
RenderItem.onResourceManagerReload(RenderItem, IResourceManager)
EntityMoveHelper.getSpeed(EntityMoveHelper)
LangReflectAccess.getConstructorParameterAnnotations(LangReflectAccess, Constructor)
ITextComponent.setStyle(ITextComponent, Style)
ItemColors.colorMultiplier(ItemColors, ItemStack, int)
Thread.start0(Thread)
EntityLivingBase.isPotionActive(EntityLivingBase, Potion)
MemberName.isPrivate(MemberName)
MinecraftServer.allowSpawnMonsters(MinecraftServer)
Minecraft.runGameLoop(Minecraft)
TileEntity.shouldRefresh(TileEntity, World, BlockPos, IBlockState, IBlockState)
CharSequence.toString(CharSequence)
InputEvent.isControlDown(InputEvent)
MouseInfoPeer.fillPointWithCoords(MouseInfoPeer, Point)
NBTTagList.tagCount(NBTTagList)
CollectorState.put(CollectorState, Object, Object, Object, BinaryOperator)
IdentityArrayList.get(IdentityArrayList, int)
Item.hasCustomEntity(Item, ItemStack)
EntityPlayer.isAllowEdit(EntityPlayer)
Component.getAlignmentX(Component)
Component.getAlignmentY(Component)
JsonElement.getAsBoolean(JsonElement)
Window.getShape(Window)
ISound.getAttenuationType(ISound)
Chunk.setTerrainPopulated(Chunk, boolean)
SoundRegistry.add(SoundRegistry, SoundEventAccessor)
MethodType.basicType(MethodType)
Style.getColor(Style)
URI.access$1700()
Item.getSubItems(Item, CreativeTabs, NonNullList)
EntityMinecart.setDisplayTileOffset(EntityMinecart, int)
EntityPlayerMP.addSelfToInternalCraftingInventory(EntityPlayerMP)
MapStorage.getUniqueDataId(MapStorage, String)
Graphics.drawLine(Graphics, int, int, int, int)
EntityLivingBase.onDeathUpdate(EntityLivingBase)
MapData.updateDecorations(MapData, Type, World, String, double, double, double)
HorseArmorType.values()
Container.reparentTraverse(Container, ContainerPeer, Container)
Stack.peek(Stack)
MethodHandle.invoke(MethodHandle, Object[])
Path.incrementPathIndex(Path)
Method.getGenericSignature(Method)
Vector3f.add(Vector3f, Vector3f, Vector3f)
DoubleBuffer.allocate(int)
Calendar.getInstance(TimeZone | Locale |  | TimeZone, Locale)
ComponentPeer.isReparentSupported(ComponentPeer)
ListenerListInst.register(ListenerListInst, EventPriority, IEventListener)
SoundHandler.unloadSounds(SoundHandler)
World.isBlockinHighHumidity(World, BlockPos)
ByteBuf.readShortLE(ByteBuf)
FileSystemProvider.getFileStore(FileSystemProvider, Path)
Integer.stringSize(int)
Axis.isVertical(Axis)
ImmutableSetMultimap.copyOf(Iterable | Multimap | Multimap, Comparator)
ImmutableSetMultimap.access$000(Multimap, Comparator)
URL.fabricateNewURL(URL)
Graphics.drawArc(Graphics, int, int, int, int, int, int)
BigDecimal.preAlign(BigDecimal, BigDecimal, BigDecimal, long, MathContext)
DoubleStream.peek(DoubleStream, DoubleConsumer)
MinecraftServer.setPlayerList(MinecraftServer, PlayerList)
SerializedForm.readResolve(SerializedForm)
Block.getFogColor(Block, World, BlockPos, IBlockState, Entity, Vec3d, float)
TextAreaPeer.getMinimumSize(TextAreaPeer, int, int)
FoodStats.getSaturationLevel(FoodStats)
ChronoLocalDateTime.hashCode(ChronoLocalDateTime)
ZoneRules.getValidOffsets(ZoneRules, LocalDateTime)
EntityPlayer.damageEntity(EntityPlayer, DamageSource, float)
Biome.plantFlower(Biome, World, Random, BlockPos)
Excluder.isValidUntil(Excluder, Until)
AttributeValues.getJustification(AttributeValues | Map)
Duration.minusNanos(Duration, long)
TimeZone.getTimeZone(String | String, boolean | ZoneId)
Wrapper.isPrimitiveType(Class)
Cell.equals(Cell, Object)
ArrayList.hugeCapacity(int)
LambdaForm.interpretWithArgumentsTracing(LambdaForm, Object[])
ByteBuf.unwrap(ByteBuf)
StateImplementation.isTopSolid(StateImplementation)
TextureManager.tick(TextureManager)
Name.lastUseIndex(Name, Name)
Class.checkMemberAccess(Class, int, Class, boolean)
NameService.getHostByAddr(NameService, byte[])
Constructor.getRawParameterAnnotations(Constructor)
ItemStack.addEnchantment(ItemStack, Enchantment, int)
DragGestureEvent.getComponent(DragGestureEvent)
ChannelConfig.setWriteBufferWaterMark(ChannelConfig, WriteBufferWaterMark)
PlayerChunkMapEntry.access$200(PlayerChunkMapEntry)
PlayerList.setWhiteListEnabled(PlayerList, boolean)
OffsetTime.getLong(OffsetTime, TemporalField)
SampleModel.createCompatibleSampleModel(SampleModel, int, int)
Particle.multipleParticleScaleBy(Particle, float)
IntSummaryStatistics.getSum(IntSummaryStatistics)
ChunkCompileTaskGenerator.setCompiledChunk(ChunkCompileTaskGenerator, CompiledChunk)
IntStream.reduce(IntStream, int, IntBinaryOperator | IntStream, IntBinaryOperator)
WorldServer.getStructureTemplateManager(WorldServer)
PlayerList.getViewDistance(PlayerList)
URLClassPath.checkURL(URLClassPath, URL)
Number.shortValue(Number)
ImmutableSet.construct(int, Object[])
UserPrincipalLookupService.lookupPrincipalByName(UserPrincipalLookupService, String)
WorldServer.init(WorldServer)
ChannelConfig.getWriteBufferHighWaterMark(ChannelConfig)
Path.getFileName(Path)
ChannelConfig.getRecvByteBufAllocator(ChannelConfig)
World.initialize(World, WorldSettings)
Duration.ofDays(long)
ByteBuf.forEachByteDesc(ByteBuf, ByteProcessor | ByteBuf, int, int, ByteProcessor)
OffsetDateTime.getNano(OffsetDateTime)
NBTTagCompound.getLong(NBTTagCompound, String)
BigInteger.clearBit(BigInteger, int)
World.calculateInitialSkylight(World)
Entry.getValue(Entry)
BigInteger.or(BigInteger, BigInteger)
Window.toFront_NoClientCode(Window)
TextureMap.getMissingSprite(TextureMap)
ItemStack.canEditBlocks(ItemStack)
IAttributeInstance.removeModifier(IAttributeInstance, AttributeModifier | IAttributeInstance, UUID)
ChannelHandlerContext.fireChannelRegistered(ChannelHandlerContext)
EnumBorderStatus.getColor(EnumBorderStatus)
BigInteger.divideAndRemainderKnuth(BigInteger, BigInteger)
AccessibleText.getCharCount(AccessibleText)
Font.getMissingGlyphCode(Font)
String.copyValueOf(char[], int, int | char[])
ClassLoader.findBuiltinLib(String)
Spliterator.tryAdvance(Spliterator, Consumer)
String.indexOf(char[], int, int, char[], int, int, int | char[], int, int, String, int | String, int | String, String, int | String, int, int | String, String)
EntityLivingBase.entityInit(EntityLivingBase)
PrintJob.lastPageFirst(PrintJob)
NetHandlerPlayClient.handleWorldBorder(NetHandlerPlayClient, SPacketWorldBorder)
BigDecimal.divideToIntegralValue(BigDecimal, BigDecimal, MathContext | BigDecimal, BigDecimal)
ClassLoader.loadLibrary0(Class, File)
MinecraftServer.getAdvancementManager(MinecraftServer)
World.getEntitiesWithinAABB(World, Class, AxisAlignedBB, Predicate | World, Class, AxisAlignedBB)
RenderManager.getEntityClassRenderObject(RenderManager, Class)
World.getCurrentMoonPhaseFactorBody(World)
Path.toAbsolutePath(Path)
EventQueue.dispatchEvent(EventQueue, AWTEvent)
Potion.renderInventoryEffect(Potion, PotionEffect, Gui, int, int, float | Potion, int, int, PotionEffect, Minecraft)
ZoneId.hashCode(ZoneId)
BlockFlower.getTypeProperty(BlockFlower)
SPacketUpdateTileEntity.getPos(SPacketUpdateTileEntity)
Team.isSameTeam(Team, Team)
URI.access$900()
Minecraft.getTutorial(Minecraft)
ShaderGroup.getFramebuffer(ShaderGroup, String)
Vector.sort(Vector, Comparator)
RenderChunk.finishCompileTask(RenderChunk)
ArrayList.calculateCapacity(Object[], int)
BufferedImage.getSubimage(BufferedImage, int, int, int, int)
Locale.getDefault( | Category)
GlyphMetrics.getAdvanceY(GlyphMetrics)
GlyphMetrics.getAdvanceX(GlyphMetrics)
InetAddress.getLoopbackAddress()
DragSourceContext.setCursor(DragSourceContext, Cursor)
MinecraftServer.getPlayerList(MinecraftServer)
Path.setCurrentPathIndex(Path, int)
CompositeByteBuf.resetReaderIndex(CompositeByteBuf | CompositeByteBuf)
JsonPrimitive.getAsBoolean(JsonPrimitive)
EntityPlayer.hasSpawnDimension(EntityPlayer)
GlyphVector.equals(GlyphVector, GlyphVector)
Graphics2D.setRenderingHint(Graphics2D, Key, Object)
Double.doubleValue(Double)
WorldServer.saveLevel(WorldServer)
Hashtable.getEnumeration(Hashtable, int)
Promise.addListener(Promise, GenericFutureListener)
Thread.stop0(Thread, Object)
GuiScreen.handleComponentClick(GuiScreen, ITextComponent)
NetHandlerPlayClient.handleUpdateTileEntity(NetHandlerPlayClient, SPacketUpdateTileEntity)
EntityLiving.canBeSteered(EntityLiving)
AttributeModifier.hashCode(AttributeModifier)
Minecraft.getGLMaximumTextureSize()
EntityPlayer.setDead(EntityPlayer)
RenderGlobal.isOutlineActive(RenderGlobal, Entity, Entity, ICamera)
Pair.toString(Pair | Pair, String)
ImmutableMultiset.of(Object, Object, Object |  | Object | Object, Object, Object, Object, Object, Object, Object[] | Object, Object | Object, Object, Object, Object | Object, Object, Object, Object, Object)
Window.initDeserializedWindow(Window)
DataSerializer.read(DataSerializer, PacketBuffer)
DisplayInfo.getTitle(DisplayInfo)
Range.access$100(Range, int)
LongStream.average(LongStream)
EntityRenderer.getMapItemRenderer(EntityRenderer)
OffsetDateTime.isSupported(OffsetDateTime, TemporalUnit | OffsetDateTime, TemporalField)
Block.getLocalizedName(Block)
Window.getIconImages(Window)
Vector.capacity(Vector)
MethodRepository.make(String, GenericsFactory)
ShaderGroup.parsePass(ShaderGroup, TextureManager, JsonElement)
EntityTracker.updateVisibility(EntityTracker, EntityPlayerMP)
LocalDate.getChronology(LocalDate | LocalDate)
FontLineMetrics.hashCode(FontLineMetrics)
ImageCapabilities.isTrueVolatile(ImageCapabilities)
ChunkPos.getXEnd(ChunkPos)
NetHandlerPlayClient.access$002(NetHandlerPlayClient, Minecraft)
NetHandlerPlayClient.access$000(NetHandlerPlayClient)
MinecraftServer.updateTimeLightAndEntities(MinecraftServer)
EnumBorderStatus.values()
GameProfile.equals(GameProfile, Object)
StateImplementation.getSelectedBoundingBox(StateImplementation, World, BlockPos)
MethodHandle.linkToStatic(Object[])
Village.getNearestTargetPlayer(Village, EntityLivingBase)
Class.isArray(Class)
AccessibleSelection.removeAccessibleSelection(AccessibleSelection, int)
World.updateAllPlayersSleepingFlag(World)
NodeProcessor.openPoint(NodeProcessor, int, int, int)
Float.setLocation(Float, double, double | Float, float, float)
EntityLivingBase.getItemStackFromSlot(EntityLivingBase, EntityEquipmentSlot)
OffsetTime.withSecond(OffsetTime, int)
MinecraftServer.getDifficulty(MinecraftServer)
ChronoLocalDate.isAfter(ChronoLocalDate, ChronoLocalDate)
Window.access$1102(Window, float)
Framebuffer.framebufferRenderExt(Framebuffer, int, int, boolean)
WorldInfo.setWorldTotalTime(WorldInfo, long)
Executable.sharedGetParameterAnnotations(Executable, Class[], byte[])
Item.isDamageable(Item)
Raster.getSample(Raster, int, int, int)
NetworkPlayerInfo.getLastHealthTime(NetworkPlayerInfo)
ClassLoader.getClassLoadingLock(ClassLoader, String)
NetHandlerPlayClient.handleSpawnPainting(NetHandlerPlayClient, SPacketSpawnPainting)
ScorePlayerTeam.getCollisionRule(ScorePlayerTeam)
CompositeByteBuf.writeZero(CompositeByteBuf, int | CompositeByteBuf, int)
AbstractStringBuilder.trimToSize(AbstractStringBuilder)
AWTEvent.get_InputEvent_CanAccessSystemClipboard()
EntityPlayerMP.hasDisconnected(EntityPlayerMP)
EntityPlayer.getDigSpeed(EntityPlayer, IBlockState, BlockPos | EntityPlayer, IBlockState)
Window.setIconImages(Window, List)
Window.setAlwaysOnTop(Window, boolean)
URLClassPath.getResource(URLClassPath, String, boolean | URLClassPath, String)
Type.getById(int)
LocalDate.plus(LocalDate, long, TemporalUnit | LocalDate, TemporalAmount | LocalDate, TemporalAmount | LocalDate, long, TemporalUnit | LocalDate, long, TemporalUnit | LocalDate, TemporalAmount)
LambdaFormBuffer.endEdit(LambdaFormBuffer)
EntityPlayer.getDisplayName(EntityPlayer)
SoundType.getStepSound(SoundType)
BlockPos.access$000()
Double.equals(Double, Object)
SoundManager.access$100(SoundManager)
Invokers.checkExactType(Object, Object)
SoundManager.access$102(SoundManager, SoundSystemStarterThread)
EntityPlayer.getSplashSound(EntityPlayer)
FieldRepository.make(String, GenericsFactory)
IBakedModel.handlePerspective(IBakedModel, TransformType)
Name.exprString(Name)
IntBuffer.order(IntBuffer)
AdvancementList.getRoots(AdvancementList)
NBTBase.read(NBTBase, DataInput, int, NBTSizeTracker)
BufferCapabilities.isMultiBufferAvailable(BufferCapabilities)
ReentrantLock.hasQueuedThread(ReentrantLock, Thread)
MinecraftServer.isServerStopped(MinecraftServer)
File.isInvalid(File)
World.notifyNeighborsOfStateChange(World, BlockPos, Block, boolean)
Excluder.excludeField(Excluder, Field, boolean)
BaseCalendar.getDayOfWeekFromFixedDate(long)
Component.addMouseListener(Component, MouseListener)
FoodStats.getFoodLevel(FoodStats)
NetHandlerPlayClient.handleEntityStatus(NetHandlerPlayClient, SPacketEntityStatus)
EntityLivingBase.setRotationYawHead(EntityLivingBase, float)
ChannelOutboundBuffer.bytesBeforeWritable(ChannelOutboundBuffer)
FileSystemProvider.copy(FileSystemProvider, Path, Path, CopyOption[])
IResourceManager.getAllResources(IResourceManager, ResourceLocation)
DropTarget.isActive(DropTarget)
Entity.getRecursivePassengersByType(Entity, Class, Set | Entity, Class)
ChronoLocalDate.isSupported(ChronoLocalDate, TemporalUnit | ChronoLocalDate, TemporalField)
Stream.builder()
MinecraftServer.setMOTD(MinecraftServer, String)
ChannelHandler.handlerAdded(ChannelHandler, ChannelHandlerContext)
GameType.isSurvivalOrAdventure(GameType)
ComponentPeer.handlesWheelScrolling(ComponentPeer)
Item.getXpRepairRatio(Item, ItemStack)
File.isDirectory(File)
Hashtable.keys(Hashtable)
DoubleStream.of(double[] | double)
AxisDirection.values()
VertexFormat.getElements(VertexFormat)
NBTTagCompound.getInteger(NBTTagCompound, String)
ModalExclusionType.valueOf(String)
WorldBorder.setDamageAmount(WorldBorder, double)
Component.updateGraphicsData(Component, GraphicsConfiguration)
EnumFacing.rotateAround(EnumFacing, Axis)
URLConnection.lookupContentHandlerClassFor(URLConnection, String)
IsoChronology.range(IsoChronology, ChronoField)
VillageCollection.addToVillagerPositionList(VillageCollection, BlockPos)
Container.setComponentZOrder(Container, Component, int)
Component.getCursor(Component)
ChunkCache.getBiome(ChunkCache, BlockPos)
GuiScreen.openWebLink(GuiScreen, URI)
CrashReportCategory.appendToStringBuilder(CrashReportCategory, StringBuilder)
World.getSaveHandler(World)
ICommandManager.getTabCompletions(ICommandManager, ICommandSender, String, BlockPos)
Thread.enumerate(Thread[])
Entity.shouldSetPosAfterLoading(Entity)
Graphics.drawOval(Graphics, int, int, int, int)
LocalTime.plusHours(LocalTime, long)
Entity.isNonBoss(Entity)
Calendar.after(Calendar, Object)
Name.replaceNames(Name, Name[], Name[], int, int)
FontRenderer.isFormatColor(char)
BigInteger.getToomSlice(BigInteger, int, int, int, int)
ChronoZonedDateTime.plus(ChronoZonedDateTime, TemporalAmount | ChronoZonedDateTime, long, TemporalUnit | ChronoZonedDateTime, TemporalAmount | ChronoZonedDateTime, long, TemporalUnit)
FontRenderer.renderStringAtPos(FontRenderer, String, boolean)
PlayerChunkMapEntry.sendToPlayer(PlayerChunkMapEntry, EntityPlayerMP)
MethodType.toString(MethodType)
NumericShaper.getKeyFromMask(int)
Region.contains(Region, int, int)
EntityPlayerMP.getNextWindowId(EntityPlayerMP)
URI.access$1200()
Period.minusYears(Period, long)
ByteBuf.getCharSequence(ByteBuf, int, int, Charset)
IAttribute.getName(IAttribute)
EntityMinecart.canBeCollidedWith(EntityMinecart)
EntityPlayer.isSpawnForced(EntityPlayer | EntityPlayer, int)
ScoreObjective.getCriteria(ScoreObjective)
Scoreboard.entityHasObjective(Scoreboard, String, ScoreObjective)
ISaveHandler.getPlayerNBTManager(ISaveHandler)
Component.findUnderMouseInWindow(Component, PointerInfo)
Chunk.lambda$null$0(Chunk, EntityPlayer)
URI.hashIgnoringCase(int, String)
ChannelOutboundBuffer.isFlushedEntry(ChannelOutboundBuffer, Entry)
Block.getDefaultState(Block)
Container.printHeavyweightComponents(Container, Graphics)
Thread.isDaemon(Thread)
URI.toASCIIString(URI)
Block.recolorBlock(Block, World, BlockPos, EnumFacing, EnumDyeColor)
Optional.ifPresent(Optional, Consumer)
ByteBuf.readUnsignedInt(ByteBuf)
ResourceLocation.toString(ResourceLocation)
ItemRenderer.rotateArm(ItemRenderer, float)
Render.renderShadowSingle(Render, IBlockState, double, double, double, BlockPos, float, float, double, double, double)
EntityLiving.replaceItemInInventory(EntityLiving, int, ItemStack)
Style.hashCode(Style)
RenderingHints.hashCode(RenderingHints)
Pair.equals(Pair, Object)
SpeciesData.fieldCount(SpeciesData)
GameSettings.setForgeKeybindProperties(GameSettings)
Executable.getGenericParameterTypes(Executable)
ItemRenderer.transformEatFirstPerson(ItemRenderer, float, EnumHandSide, ItemStack)
StateImplementation.getPropertiesWithValue(StateImplementation, IProperty, Comparable)
TextFormatting.values()
Control.getTimeToLive(Control, String, Locale)
EntityRenderer.updateCameraAndRender(EntityRenderer, float, long)
FoodStats.onUpdate(FoodStats, EntityPlayer)
ChannelHandlerContext.fireChannelInactive(ChannelHandlerContext)
Shape.contains(Shape, Point2D | Shape, double, double, double, double | Shape, Rectangle2D | Shape, double, double)
Component.getMaximumSize(Component)
ZonedDateTime.withFixedOffsetZone(ZonedDateTime)
CompositeByteBuf.order(CompositeByteBuf)
Component.setMaximumSize(Component, Dimension)
AbstractStringBuilder.delete(AbstractStringBuilder, int, int)
EntityLiving.setMoveForward(EntityLiving, float)
DayOfWeek.range(DayOfWeek, TemporalField)
FileTime.compareTo(FileTime, Object | FileTime, FileTime)
ByteBuf.getDouble(ByteBuf, int)
NBTTagCompound.setShort(NBTTagCompound, String, short)
ZonedDateTime.toString(ZonedDateTime)
ImmutableSet.builder()
ZoneOffset.ofHoursMinutesSeconds(int, int, int)
Collector.finisher(Collector)
RenderingHints.clear(RenderingHints)
EntityLiving.onLivingUpdate(EntityLiving)
Optional.presentInstances(Iterable)
Block.getItemDropped(Block, IBlockState, Random, int)
ZonedDateTime.getDayOfMonth(ZonedDateTime)
PlayerChunkMap.getIndex(int, int)
BasicType.basicTypesOrd(BasicType[])
AffineTransform.getRotateInstance(double | double, double, double | double, double | double, double, double, double)
EntityTracker.getTrackingPlayers(EntityTracker, Entity)
SoundHandler.getSoundMap(SoundHandler, InputStream)
Item.onLeftClickEntity(Item, ItemStack, EntityPlayer, Entity)
BaseCalendar.normalize(BaseCalendar, CalendarDate)
Particle.toString(Particle)
ImmutableTable.createCellSet(ImmutableTable | ImmutableTable)
BoundMethodHandle.checkCache(int, String)
EntityLiving.getEntitySenses(EntityLiving)
Rectangle.clip(double, boolean)
MemberName.clone(MemberName | MemberName)
ByteBuf.ensureWritable(ByteBuf, int | ByteBuf, int, boolean)
World.getBiomeProvider(World)
RenderChunk.needsUpdate(RenderChunk)
Entity.shouldRiderSit(Entity)
Block.getWeakChanges(Block, IBlockAccess, BlockPos)
LocalTime.parse(CharSequence | CharSequence, DateTimeFormatter)
Block.getMaterial(Block, IBlockState)
World.checkSessionLock(World)
Multiset.contains(Multiset, Object)
LongStream.of(long[] | long)
WorldServer.isBlockTickPending(WorldServer, BlockPos, Block)
World.isBlockPowered(World, BlockPos)
MethodHandle.linkToVirtual(Object[])
URI.access$2502(URI, int)
BigDecimal.needIncrement(MutableBigInteger, int, int, MutableBigInteger, MutableBigInteger | long, int, int, long, long | long, int, int, MutableBigInteger, long)
LocalDate.isAfter(LocalDate, ChronoLocalDate)
NetworkManager.getDirection(NetworkManager)
Instant.ofEpochMilli(long)
Graphics2D.addRenderingHints(Graphics2D, Map)
Chunk.getWorld(Chunk)
Transferable.getTransferData(Transferable, DataFlavor)
MethodType.equals(MethodType, MethodType | MethodType, Object)
Window.addToWindowList(Window)
DropTargetContext.isDataFlavorSupported(DropTargetContext, DataFlavor)
NamedFunction.resolvedHandle(NamedFunction)
Window.getOpacity(Window)
Graphics2D.fill(Graphics2D, Shape)
ValueRange.getMaximum(ValueRange)
EnumFacing.getAxisDirection(EnumFacing)
PlayerChunkMap.contains(PlayerChunkMap, int, int)
DialogPeer.setTitle(DialogPeer, String)
ShaderLoader.loadShader(IResourceManager, ShaderType, String)
RenderItem.registerItem(RenderItem, Item, String | RenderItem, Item, int, String)
EntityPlayer.getArmorInventoryList(EntityPlayer)
Entity.getMaxFallHeight(Entity)
WorldInfo.getBorderDamagePerBlock(WorldInfo)
VillageCollection.addDoorsAround(VillageCollection, BlockPos)
ChannelPipeline.addFirst(ChannelPipeline, EventExecutorGroup, ChannelHandler[] | ChannelPipeline, ChannelHandler[] | ChannelPipeline, String, ChannelHandler | ChannelPipeline, EventExecutorGroup, String, ChannelHandler)
ItemRenderer.renderItemInFirstPerson(ItemRenderer, AbstractClientPlayer, float, float, EnumHand, float, ItemStack, float | ItemRenderer, float)
BigInteger.hashCode(BigInteger)
PlatformLogger.redirectPlatformLoggers()
MemberName.referenceKindIsConsistent(MemberName)
CompositeByteBuf.discardReadComponents(CompositeByteBuf)
ScaledResolution.getScaledHeight(ScaledResolution)
AdvancementRewards.apply(AdvancementRewards, EntityPlayerMP)
World.getNearestPlayerNotCreative(World, Entity, double)
ZoneOffsetTransition.getValidOffsets(ZoneOffsetTransition)
EntityTracker.getPositionLong(double)
Wrapper.isConvertibleFrom(Wrapper, Wrapper)
ThreadLocalMap.expungeStaleEntry(ThreadLocalMap, int)
BufferedImage.getHeight(BufferedImage, ImageObserver | BufferedImage)
RenderGlobal.renderClouds(RenderGlobal, float, int, double, double, double)
Member.getName(Member)
CreativeTabs.createIcon(CreativeTabs)
MinecraftServer.getMinecraftSessionService(MinecraftServer)
BigInteger.multiply(BigInteger, BigInteger, boolean | BigInteger, BigInteger | BigInteger, long)
Dialog.setShape(Dialog, Shape)
ChronoPeriod.hashCode(ChronoPeriod)
WorldType.onGUICreateWorldPress(WorldType)
URLConnection.getOutputStream(URLConnection)
ClassLoader.access$000()
Component.mixOnReshaping(Component)
VolatileImage.getSource(VolatileImage)
JsonPrimitive.getAsShort(JsonPrimitive)
Method.isDefault(Method)
MinecraftServer.isHardcore(MinecraftServer)
MemberName.isStatic(MemberName)
Entity.getCollisionBoundingBox(Entity)
ColorModel.hashCode(ColorModel)
World.updateEntity(World, Entity)
Village.isAnnihilated(Village)
Level.getDeclaringClass(Level)
Toolkit.createPopupMenu(Toolkit, PopupMenu)
Dialog.isModal(Dialog)
Entity.setAlwaysRenderNameTag(Entity, boolean)
DragSource.getFlavorMap(DragSource)
Rectangle.getLocation(Rectangle)
EntityPlayerMP.isSpectator(EntityPlayerMP)
Field.set(Field, Object, Object)
OffsetTime.toLocalTime(OffsetTime)
Future.removeListeners(Future, GenericFutureListener[])
Resource.getInputStream(Resource)
WorldInfo.getBorderSize(WorldInfo)
StateImplementation.isOpaqueCube(StateImplementation)
RegionIterator.copyStateFrom(RegionIterator, RegionIterator)
Map.entrySet(Map)
Toolkit.getDefaultToolkit()
Font.getTransform(Font)
World.setData(World, String, WorldSavedData)
String.lastIndexOfSupplementary(String, int, int)
EntityPlayer.getPrefixes(EntityPlayer)
Calendar.getTimeZone(Calendar)
UserListIPBans.createEntry(UserListIPBans, JsonObject)
PropertyChangeSupport.fireIndexedPropertyChange(PropertyChangeSupport, String, int, int, int | PropertyChangeSupport, String, int, boolean, boolean | PropertyChangeSupport, String, int, Object, Object)
URLConnection.setAllowUserInteraction(URLConnection, boolean)
CompositeByteBuf.addComponent(CompositeByteBuf, boolean, ByteBuf | CompositeByteBuf, int, ByteBuf | CompositeByteBuf, ByteBuf | CompositeByteBuf, boolean, int, ByteBuf)
ByteBuffer.getFloat(ByteBuffer, int | ByteBuffer)
File.normalizedList(File)
PlayerChunkMap.tick(PlayerChunkMap)
ChunkPos.getBlock(ChunkPos, int, int, int)
Month.firstDayOfYear(Month, boolean)
EntityRenderer.renderHand(EntityRenderer, float, int)
MinecraftServer.getPlayerUsageSnooper(MinecraftServer)
PlayerProfileCache.isOnlineMode()
GuiScreen.handleComponentHover(GuiScreen, ITextComponent, int, int)
NBTTagCompound.isEmpty(NBTTagCompound)
WorldServer.getEntityTracker(WorldServer)
ImmutableMultiset.iterator(ImmutableMultiset | ImmutableMultiset)
DamageSource.causeArrowDamage(EntityArrow, Entity)
OffsetDateTime.getHour(OffsetDateTime)
URLConnection.getDate(URLConnection)
RenderGlobal.renderEntities(RenderGlobal, Entity, ICamera, float)
Entity.updatePassenger(Entity, Entity)
Field.toString(Field)
Window.getAllWindows()
BigInteger.getLower(BigInteger, int)
EntityPlayerMP.mountEntityAndWakeUp(EntityPlayerMP)
Cursor.getDefaultCursor()
Stream.count(Stream)
Potion.getIdFromPotion(Potion)
ComponentPeer.updateCursorImmediately(ComponentPeer)
PlayerChunkMapEntry.access$302(PlayerChunkMapEntry, boolean)
GlyphVector.getGlyphOutline(GlyphVector, int | GlyphVector, int, float, float)
ProgressivePromise.addListeners(ProgressivePromise, GenericFutureListener[])
NetworkPlayerInfo.hasLocationSkin(NetworkPlayerInfo)
EntityPlayerMP.openGuiHorseInventory(EntityPlayerMP, AbstractHorse, IInventory)
URI.parseServerAuthority(URI)
JsonReader.doPeek(JsonReader)
Logger.error(Logger, String, Object, Object, Object, Object, Object | Logger, String, Object[] | Logger, String, Object, Object, Object, Object, Object, Object | Logger, Marker, String, Object[] | Logger, String | Logger, Marker, String, Object, Object | Logger, Supplier | Logger, Marker, MessageSupplier | Logger, Marker, Supplier | Logger, Marker, CharSequence, Throwable | Logger, Marker, String, Object, Object, Object, Object | Logger, Marker, String, Throwable | Logger, Marker, String, Object, Object, Object, Object, Object, Object, Object, Object | Logger, Marker, String | Logger, String, Object, Object, Object, Object, Object, Object, Object, Object, Object | Logger, String, Object, Object, Object, Object, Object, Object, Object, Object | Logger, String, Object, Object, Object, Object | Logger, Marker, String, Object, Object, Object | Logger, MessageSupplier, Throwable | Logger, String, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object | Logger, Message, Throwable | Logger, Marker, Message, Throwable | Logger, String, Object, Object | Logger, Supplier, Throwable | Logger, Marker, MessageSupplier, Throwable | Logger, Object, Throwable | Logger, Marker, Object, Throwable | Logger, String, Throwable | Logger, MessageSupplier | Logger, Marker, String, Object, Object, Object, Object, Object, Object | Logger, Message | Logger, Marker, String, Supplier[] | Logger, Marker, Supplier, Throwable | Logger, Marker, String, Object | Logger, CharSequence | Logger, Marker, String, Object, Object, Object, Object, Object, Object, Object, Object, Object | Logger, CharSequence, Throwable | Logger, String, Object, Object, Object, Object, Object, Object, Object | Logger, Marker, String, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object | Logger, Marker, Object | Logger, String, Object, Object, Object | Logger, Marker, Message | Logger, String, Supplier[] | Logger, Marker, String, Object, Object, Object, Object, Object, Object, Object | Logger, Object | Logger, Marker, CharSequence | Logger, String, Object | Logger, Marker, String, Object, Object, Object, Object, Object)
LocalTime.query(LocalTime, TemporalQuery)
Period.get(Period, TemporalUnit)
LootTable.getPool(LootTable, String)
SoundHandler.playDelayedSound(SoundHandler, ISound, int)
Window.setModalExclusionType(Window, ModalExclusionType)
WorldType.setVersioned(WorldType)
Container.print(Container, Graphics)
Resource.getCodeSigners(Resource)
RenderItem.renderItemModel(RenderItem, ItemStack, IBakedModel, TransformType, boolean)
LongStream.boxed(LongStream)
List.clear(List)
AccessibleComponent.getBackground(AccessibleComponent)
Manifest.toLower(Manifest, int)
Path.toUri(Path)
JsonWriter.beforeValue(JsonWriter)
StateImplementation.getMaterial(StateImplementation)
Calendar.toInstant(Calendar)
Marker.setParents(Marker, Marker[])
World.playBroadcastSound(World, int, BlockPos, int)
TimeZone.parseCustomTimeZone(String)
NetHandlerPlayClient.handleEntityAttach(NetHandlerPlayClient, SPacketEntityAttach)
ThreadGroup.interrupt(ThreadGroup)
URL.openConnection(URL | URL, Proxy)
OffsetDateTime.plusHours(OffsetDateTime, long)
DisplayMode.getBitDepth(DisplayMode)
Calendar.aggregateStamp(int, int)
BigDecimal.toString(BigDecimal)
UUID.equals(UUID, Object)
NBTTagCompound.write(NBTTagCompound, DataOutput)
StringBuilder.indexOf(StringBuilder, String, int | StringBuilder, String)
ServerStatusResponse.invalidateJson(ServerStatusResponse)
AttributedCharacterIterator.getAttributes(AttributedCharacterIterator)
Vector.isEmpty(Vector)
JsonElement.getAsJsonArray(JsonElement)
ItemStack.onItemUseFinish(ItemStack, World, EntityLivingBase)
PlayerList.getWhitelistedPlayerNames(PlayerList)
ListenerListInst.getListeners(ListenerListInst, EventPriority | ListenerListInst)
Material.getCanBurn(Material)
AdvancementProgress.getRemaningCriteria(AdvancementProgress)
DragSource.addDragSourceListener(DragSource, DragSourceListener)
Period.isZero(Period)
LambdaFormEditor.bindArgumentType(LambdaFormEditor, BoundMethodHandle, int, BasicType)
Properties.enumerate(Properties, Hashtable)
Component.getMinimumSize(Component)
TextFormatting.fromColorIndex(int)
Entity.resetEntityId(Entity)
Locale.isUnicodeExtensionKey(String)
Condition.awaitNanos(Condition, long)
Lookup.accessFailedMessage(Lookup, Class, MemberName)
EnumOffsetType.valueOf(String)
URI.decode(String | char | char, char)
UserListEntry.getValue(UserListEntry)
Component.getInsets_NoClientCode(Component)
MappedByteBuffer.checkMapped(MappedByteBuffer)
AppContext.toString(AppContext)
FontMetrics.getMaxAdvance(FontMetrics)
DragSourceContext.updateCurrentCursor(DragSourceContext, int, int, int)
Future.cause(Future)
Entity.setUniqueId(Entity, UUID)
Range.access$200(Range)
SpeciesData.getterFunctions(SpeciesData)
EntityMinecart.moveAlongTrack(EntityMinecart, BlockPos, IBlockState)
Entity.playFlySound(Entity, float)
Locale.filterTags(List, Collection | List, Collection, FilteringMode)
Component.invalidate(Component)
BigDecimal.checkScaleNonZero(long)
JsonPrimitive.isBoolean(JsonPrimitive)
BlockStateContainer.onResize(BlockStateContainer, int, IBlockState)
World.getWorldType(World)
Entry.setValue(Entry, Object)
BufferBuilder.finishDrawing(BufferBuilder)
UUID.getLeastSignificantBits(UUID)
SoundManager.access$000()
ByteBuf.readBoolean(ByteBuf)
Potion.getAttributeModifierAmount(Potion, int, AttributeModifier)
Action.values( | )
Block.getBlockFaceShape(Block, IBlockAccess, IBlockState, BlockPos, EnumFacing)
StateImplementation.getValue(StateImplementation, IProperty)
IntBuffer.wrap(int[], int, int | int[])
Package.getSpecificationTitle(Package)
Block.getTickRandomly(Block)
IsoEra.valueOf(String)
IResourcePack.resourceExists(IResourcePack, ResourceLocation)
ConstructorRepository.getParameterTypes(ConstructorRepository)
Executable.getGenericExceptionTypes(Executable)
Entity.sendMessage(Entity, ITextComponent)
IBlockState.cycleProperty(IBlockState, IProperty)
Potion.getCurativeItems(Potion)
ZoneRules.getOffset(ZoneRules, LocalDateTime | ZoneRules, Instant)
EntityLivingBase.onEntityUpdate(EntityLivingBase)
FontMetrics.getFontRenderContext(FontMetrics)
Raster.createBandedRaster(int, int, int, int, int[], int[], Point | DataBuffer, int, int, int, int[], int[], Point | int, int, int, int, Point)
Attributes.keySet(Attributes)
FontMetrics.getMaxDecent(FontMetrics)
World.getVillageCollection(World)
Window.access$1200(Window, double, double, double, double)
Dimension.getHeight(Dimension)
MinecraftServer.createCommandManager(MinecraftServer)
ThreadLocal.withInitial(Supplier)
Component.addHierarchyListener(Component, HierarchyListener)
EntityRenderer.disableLightmap(EntityRenderer)
Region.dimAdd(int, int)
AccessibleRelationSet.addAll(AccessibleRelationSet, AccessibleRelation[])
Reference.enqueue(Reference)
MethodType.parameterCount(MethodType)
Class.getExecutableTypeAnnotationBytes(Executable)
IsoChronology.resolveYMD(IsoChronology, Map, ResolverStyle | IsoChronology, Map, ResolverStyle)
EnumFlowerType.getType(EnumFlowerColor, int)
Component.mixOnValidating(Component)
FontRenderer.sizeStringToWidth(FontRenderer, String, int)
PlayerChunkMap.access$000()
ItemStack.getMaxDamage(ItemStack)
LocalDateTime.hashCode(LocalDateTime)
JsonPrimitive.hashCode(JsonPrimitive)
Marker.getName(Marker)
Vector.elementData(Vector, int)
ListIterator.previous(ListIterator)
AffineTransform.setToQuadrantRotation(AffineTransform, int | AffineTransform, int, double, double)
GenericsFactory.makeVoid(GenericsFactory)
ChannelConfig.setAllocator(ChannelConfig, ByteBufAllocator)
AbstractStringBuilder.replace(AbstractStringBuilder, int, int, String)
MinecraftServer.getOpPermissionLevel(MinecraftServer)
Item.setMaxDamage(Item, int)
ResourceBundle.findBundleInCache(CacheKey, Control)
ValueRange.checkValidValue(ValueRange, long, TemporalField)
ChannelPipeline.fireChannelRead(ChannelPipeline, Object)
Minecraft.clickMouse(Minecraft)
Team.getNameTagVisibility(Team)
Hashtable.clear(Hashtable)
ChannelMetadata.hasDisconnect(ChannelMetadata)
ChannelPipeline.fireChannelWritabilityChanged(ChannelPipeline)
DoubleStream.concat(DoubleStream, DoubleStream)
EntityPlayerMP.canPlayersAttack(EntityPlayerMP)
Block.getStateFromMeta(Block, int)
ClientAdvancementManager.read(ClientAdvancementManager, SPacketAdvancementInfo)
Set.addAll(Set, Collection)
Message.getFormat(Message)
AccessibleComponent.isShowing(AccessibleComponent)
LocalDate.getLong(LocalDate, TemporalField)
TextHitInfo.afterOffset(int)
URI.access$1102(URI, String)
Block.getStateId(IBlockState)
WorldGenAbstractTree.generateSaplings(WorldGenAbstractTree, World, Random, BlockPos)
ZoneOffsetTransition.isOverlap(ZoneOffsetTransition)
VertexFormat.addElement(VertexFormat, VertexFormatElement)
MappedByteBuffer.force(MappedByteBuffer)
OffsetDateTime.equals(OffsetDateTime, Object)
BigInteger.intValue(BigInteger)
Logger.isTraceEnabled(Logger, Marker | Logger)
VolatileImage.getHeight(VolatileImage)
ImmutableList.set(ImmutableList, int, Object)
BufferBuilder.putNormal(BufferBuilder, float, float, float)
World.isChunkLoaded(World, int, int, boolean)
ByteBuf.memoryAddress(ByteBuf)
IntStream.mapToLong(IntStream, IntToLongFunction)
EntityLiving.setMoveStrafing(EntityLiving, float)
ImmutableMultimap.lambda$null$2(BiConsumer, Object, Object)
EntityPlayer.getDisplayNameString(EntityPlayer)
ServerData.getNBTCompound(ServerData)
Block.getBlockLiquidHeight(Block, World, BlockPos, IBlockState, Material)
URLConnection.guessContentTypeFromStream(InputStream)
Method.handleParameterNumberMismatch(Method, int, int)
MethodHandle.invokeExact(MethodHandle, Object[])
ImmutableMultimap.lambda$null$0(Object, Object)
IAttributeInstance.getBaseValue(IAttributeInstance)
Date.hit(Date, long | Date, int)
Image.getWidth(Image, ImageObserver)
TimeZone.getDSTSavings(TimeZone)
EntityPlayerMP.closeScreen(EntityPlayerMP)
EnumDifficulty.getTranslationKey(EnumDifficulty)
ClassLoader.findBootstrapClassOrNull(ClassLoader, String)
Material.setReplaceable(Material)
ChannelConfig.setMaxMessagesPerRead(ChannelConfig, int)
Comparator.comparingDouble(ToDoubleFunction)
Gson.getDelegateAdapter(Gson, TypeAdapterFactory, TypeToken)
ChronoPeriod.get(ChronoPeriod, TemporalUnit)
Vector.store(Vector, FloatBuffer)
EntityLivingBase.stopActiveHand(EntityLivingBase)
DropTargetContextPeer.dropComplete(DropTargetContextPeer, boolean)
ItemStack.setTagCompound(ItemStack, NBTTagCompound)
ColorModel.finalize(ColorModel)
URI.access$2402(URI, String)
Component.isCoalescingEnabled(Component)
RenderItem.lambda$renderItemAndEffectIntoGUI$0(ItemStack)
JsonPrimitive.isNumber(JsonPrimitive)
Font.canDisplayUpTo(Font, char[], int, int | Font, String | Font, CharacterIterator, int, int)
AttributeValues.setWeight(AttributeValues, float)
ImmutableMap.writeReplace(ImmutableMap)
DropTarget.setDefaultActions(DropTarget, int)
Instant.atOffset(Instant, ZoneOffset)
Entity.setNoGravity(Entity, boolean)
ByteBuf.array(ByteBuf)
EnumCreatureType.getMaxNumberOfCreature(EnumCreatureType)
ZonedDateTime.isSupported(ZonedDateTime, TemporalUnit | ZonedDateTime, TemporalField)
Range.access$300(Range)
Entity.equals(Entity, Object)
FileTime.hashCode(FileTime)
DamageSource.getDamageType(DamageSource)
AsynchronousFileChannel.lock(AsynchronousFileChannel, long, long, boolean | AsynchronousFileChannel, Object, CompletionHandler | AsynchronousFileChannel, long, long, boolean, Object, CompletionHandler | AsynchronousFileChannel)
ItemCameraTransforms.makeQuaternion(float, float, float)
MapItemRenderer.updateMapTexture(MapItemRenderer, MapData)
Biome.getSpawnableList(Biome, EnumCreatureType)
Instance.access$000(Instance)
AttributedCharacterIterator.getRunStart(AttributedCharacterIterator, Set | AttributedCharacterIterator | AttributedCharacterIterator, Attribute)
Throwable.writeObject(Throwable, ObjectOutputStream)
OfInt.trySplit(OfInt | OfInt | OfInt)
NBTBase.getId(NBTBase)
NetworkSystem.addEndpoint(NetworkSystem, InetAddress, int)
AbstractStringBuilder.lastIndexOf(AbstractStringBuilder, String | AbstractStringBuilder, String, int)
Container.locate(Container, int, int)
ImmutableSet.copyOfEnumSet(EnumSet)
Component.getInputMethodRequests(Component)
Component.setIgnoreRepaint(Component, boolean)
BufferedImage.toString(BufferedImage)
TileEntity.mirror(TileEntity, Mirror)
Window.removeFromWindowList(AppContext, WeakReference | Window)
VertexFormat.clear(VertexFormat)
SearchTreeManager.onResourceManagerReload(SearchTreeManager, IResourceManager)
ByteBuffer.arrayOffset(ByteBuffer)
Path.getClosedSet(Path)
RegionRenderCacheBuilder.getWorldRendererByLayer(RegionRenderCacheBuilder, BlockRenderLayer)
JsonToken.valueOf(String)
MinecraftServer.setGameType(MinecraftServer, GameType)
AnnotationType.retention(AnnotationType)
GraphicAttribute.getAlignment(GraphicAttribute)
WorldServer.adjustPosToNearbyEntity(WorldServer, BlockPos)
Minecraft.checkWindowResize(Minecraft)
ByteBuf.hasArray(ByteBuf)
Promise.sync(Promise)
PlayerChunkMap.getWorldServer(PlayerChunkMap)
ChannelConfig.setWriteBufferHighWaterMark(ChannelConfig, int)
Color.decode(String)
LambdaFormBuffer.noteDuplicate(LambdaFormBuffer, int, int)
NetHandlerPlayClient.handleTabComplete(NetHandlerPlayClient, SPacketTabComplete)
Entity.getDistance(Entity, Entity | Entity, double, double, double)
Block.getUseNeighborBrightness(Block, IBlockState)
World.getSkyColorBody(World, Entity, float)
IProperty.getName(IProperty | IProperty, Comparable)
Region.toString(Region)
SampleModel.getSampleDouble(SampleModel, int, int, int, DataBuffer)
MusicType.values()
ConstructorAccessor.newInstance(ConstructorAccessor, Object[])
URLConnection.getInputStream(URLConnection)
WorldServer.playerCheckLight(WorldServer)
BigInteger.divideAndRemainderBurnikelZiegler(BigInteger, BigInteger)
VillageDoorInfo.getLastActivityTimestamp(VillageDoorInfo)
ColorModel.getColorSpace(ColorModel)
WorldServer.addBlockEvent(WorldServer, BlockPos, Block, int, int)
Excluder.excludeFieldsWithoutExposeAnnotation(Excluder)
File.mkdirs(File)
ColorModel.isAlphaPremultiplied(ColorModel)
PlayerList.recreatePlayerEntity(PlayerList, EntityPlayerMP, int, boolean)
ServerStatusResponse.getServerDescription(ServerStatusResponse)
Collector.of(Supplier, BiConsumer, BinaryOperator, Function, Characteristics[] | Supplier, BiConsumer, BinaryOperator, Characteristics[])
BufferBuilder.putColorRGBA(BufferBuilder, int, int, int, int, int | BufferBuilder, int, int, int, int)
ChronoLocalDateTime.plus(ChronoLocalDateTime, long, TemporalUnit | ChronoLocalDateTime, TemporalAmount | ChronoLocalDateTime, long, TemporalUnit | ChronoLocalDateTime, TemporalAmount)
BufferBuilder.setTranslation(BufferBuilder, double, double, double)
Potion.getAttributeModifierMap(Potion)
DisplayInfo.getFrame(DisplayInfo)
Component.action(Component, Event, Object)
EntityPlayer.isWearing(EntityPlayer, EnumPlayerModelParts)
World.canBlockFreezeWater(World, BlockPos)
Permission.getActions(Permission)
MethodType.parameterSlotCount(MethodType)
Date.before(Date, Date)
Village.getNearestDoor(Village, BlockPos)
Resource.cachedInputStream(Resource)
AttributeKey.newInstance(String)
Unsafe.register(Unsafe, EventLoop, ChannelPromise)
ByteBuf.readDouble(ByteBuf)
ClassLoader.findLoadedClass(ClassLoader, String)
ImmutableSet.access$000(int, Object[])
Block.canSpawnInBlock(Block)
AccessibleRelationSet.size(AccessibleRelationSet)
Lookup.getDirectMethodNoSecurityManager(Lookup, byte, Class, MemberName, Class)
LocalDateTime.plusDays(LocalDateTime, long)
Window.setLayersOpaque(Component, boolean)
VillageCollection.checkDoorExistence(VillageCollection, BlockPos)
Entity.updateRidden(Entity)
VillageDoorInfo.getDistanceToInsideBlockSq(VillageDoorInfo, BlockPos)
Comparator.reversed(Comparator)
Component.isRecursivelyVisible(Component)
Long.hashCode(Long | long)
URLClassPath.knownToNotExist(URLClassPath, String)
Item.setContainerItem(Item, Item)
ItemRenderer.renderMapFirstPerson(ItemRenderer, float, float, float | ItemRenderer, ItemStack)
Container.setFocusCycleRoot(Container, boolean)
FileChannel.position(FileChannel, long | FileChannel, long | FileChannel)
Message.getParameters(Message)
EntityMinecart.getDisplayTileOffset(EntityMinecart)
ClassLoader.access$100()
ModelRenderer.render(ModelRenderer, float)
NumericShaper.writeObject(NumericShaper, ObjectOutputStream)
URLConnection.getDoInput(URLConnection)
TypeAdapter.write(TypeAdapter, JsonWriter, Object)
DragGestureRecognizer.addDragGestureListener(DragGestureRecognizer, DragGestureListener)
EntityRenderer.displayItemActivation(EntityRenderer, ItemStack)
Thread.getName(Thread)
CreativeTabs.hasScrollbar(CreativeTabs)
ArrayBasedBuilder.ensureCapacity(ArrayBasedBuilder, int)
CrashReport.getSectionsInStringBuilder(CrashReport, StringBuilder)
Component.setPreferredSize(Component, Dimension)
FontLineMetrics.getUnderlineThickness(FontLineMetrics)
OffsetTime.withOffsetSameLocal(OffsetTime, ZoneOffset)
PotionEffect.isCurativeItem(PotionEffect, ItemStack)
Class.getDeclaredField(Class, String)
World.scheduleBlockUpdate(World, BlockPos, Block, int, int)
Entity.getIsInvulnerable(Entity)
WorldInfo.setBorderSize(WorldInfo, double)
EntityPlayerMP.sendEndCombat(EntityPlayerMP)
EntityPlayerMP.onEnchant(EntityPlayerMP, ItemStack, int)
CompositeByteBuf._getInt(CompositeByteBuf, int)
Container.findComponentAt(Container, int, int, boolean | Container, int, int | Container, Point)
URL.toURI(URL)
Block.hasComparatorInputOverride(Block, IBlockState)
DoubleStream.parallel(DoubleStream | DoubleStream)
FontRenderer.loadGlyphTexture(FontRenderer, int)
AccessibleTable.getAccessibleColumnExtentAt(AccessibleTable, int, int)
Rectangle.getBounds(Rectangle)
Component.access$500(Class)
ImmutableSetMultimap.toImmutableSetMultimap(Function, Function)
EnumFacing.getIndex(EnumFacing)
CriterionProgress.isObtained(CriterionProgress)
ChannelHandlerContext.fireUserEventTriggered(ChannelHandlerContext, Object)
Number.floatValue(Number)
CharBuffer.getUnchecked(CharBuffer, int)
EntityMinecart.setCollisionHandler(IMinecartCollisionHandler)
EntityMinecart.onActivatorRailPass(EntityMinecart, int, int, int, boolean)
LineMetrics.getBaselineOffsets(LineMetrics)
URLClassPath.getLookupCacheForClassLoader(ClassLoader, String)
BigInteger.oddModPow(BigInteger, BigInteger, BigInteger)
StringBuilder.trimToSize(StringBuilder)
Hashtable.putAll(Hashtable, Map)
ImmutableMap.remove(ImmutableMap, Object | ImmutableMap, Object, Object)
Minecraft.setInitialDisplayMode(Minecraft)
Attributes.isEmpty(Attributes)
Region.getIntersectionXYWH(Region, int, int, int, int)
GraphicAttribute.getAscent(GraphicAttribute)
Packet.readPacketData(Packet, PacketBuffer)
StatisticsManagerServer.readStatFile(StatisticsManagerServer)
List.hashCode(List)
Future.await(Future, long, TimeUnit | Future | Future, long)
IdentityArrayList.indexOf(IdentityArrayList, Object)
NodeProcessor.getPathPointToCoords(NodeProcessor, double, double, double)
DisplayInfo.shouldAnnounceToChat(DisplayInfo)
Language.hashCode(Language)
MinecraftServer.addServerTypeToSnooper(MinecraftServer, Snooper)
WorldServer.isCallingFromMinecraftThread(WorldServer)
World.spawnAlwaysVisibleParticle(World, int, double, double, double, double, double, double, int[])
AppContext.removePropertyChangeListener(AppContext, String, PropertyChangeListener)
AccessibleText.getIndexAtPoint(AccessibleText, Point)
Component.postEvent(Component, Event)
GraphicAttribute.getJustificationInfo(GraphicAttribute)
ClassLoader.findBootstrapClass(ClassLoader, String)
Block.onBlockAdded(Block, World, BlockPos, IBlockState)
Component.isFocusOwner(Component)
Wrapper.makeArray(Wrapper, int)
LootTable.addPool(LootTable, LootPool)
WorldInfo.setAdditionalProperties(WorldInfo, Map)
Region.getIntersectionXYXY(Region, int, int, int, int)
AbstractStringBuilder.newCapacity(AbstractStringBuilder, int)
DisplayInfo.setPosition(DisplayInfo, float, float)
URL.getPath(URL)
Enum.finalize(Enum)
Style.getInsertion(Style)
EntityItem.dealFireDamage(EntityItem, int)
FunctionManager.update(FunctionManager)
MinecraftServer.getResourcePackHash(MinecraftServer)
Language.getLanguageCode(Language)
RegistryNamespaced.createUnderlyingMap(RegistryNamespaced)
MinecraftServer.canCreateBonusChest(MinecraftServer, boolean)
ItemStack.getItemUseAction(ItemStack)
Entity.setRotationYawHead(Entity, float)
TextureAtlasSprite.initSprite(TextureAtlasSprite, int, int, int, int, boolean)
BinaryOperator.minBy(Comparator)
ModelRenderer.setTextureOffset(ModelRenderer, int, int)
DomainCombiner.combine(DomainCombiner, ProtectionDomain[], ProtectionDomain[])
Village.getVillageRadius(Village)
Locale.toString(Locale)
AccessControlContext.checkPermission2(AccessControlContext, Permission)
Entity.getBrightness(Entity)
InputStream.mark(InputStream, int)
Instant.plusMillis(Instant, long)
Multiset.iterator(Multiset)
Template.addBlocksToWorld(Template, World, BlockPos, PlacementSettings, int | Template, World, BlockPos, PlacementSettings | Template, World, BlockPos, ITemplateProcessor, PlacementSettings, int)
Marker.hashCode(Marker)
List.indexOf(List, Object)
BlockStateMapper.registerBlockStateMapper(BlockStateMapper, Block, IStateMapper)
Biome.getRainfall(Biome)
DoubleSummaryStatistics.accept(DoubleSummaryStatistics, double)
GlyphMetrics.isLigature(GlyphMetrics)
URI.getPath(URI)
Duration.readObject(Duration, ObjectInputStream)
Rectangle2D.setRect(Rectangle2D, double, double, double, double | Rectangle2D, Rectangle2D)
ClickEvent.getAction(ClickEvent)
MethodHandle.internalForm(MethodHandle)
URLConnection.checkfpx(InputStream)
ShaderGroup.initTarget(ShaderGroup, JsonElement)
Dimension.getSize(Dimension)
PlayerList.getServerInstance(PlayerList)
Rectangle.setRect(Rectangle, double, double, double, double)
Component.isMixingNeeded(Component)
Snooper.getMinecraftStartTimeMillis(Snooper)
ColorSpace.toCIEXYZ(ColorSpace, float[])
Block.shouldSideBeRendered(Block, IBlockState, IBlockAccess, BlockPos, EnumFacing)
Block.eventReceived(Block, IBlockState, World, BlockPos, int, int)
AbstractStringBuilder.codePointAt(AbstractStringBuilder, int)
Dialog.blockWindow(Dialog, Window)
ComponentPeer.dispose(ComponentPeer)
AttributeValues.i_set(AttributeValues, EAttribute, Object | AttributeValues, EAttribute, AttributeValues)
Window.access$1300(Window)
IChunkProvider.makeString(IChunkProvider)
EntityLivingBase.getLastAttackedEntityTime(EntityLivingBase)
World.getTotalWorldTime(World)
Entity.doesEntityNotTriggerPressurePlate(Entity)
ITextComponent.getUnformattedComponentText(ITextComponent)
Package.defineSystemPackage(String, String)
World.getHeight(World | World, int, int | World, BlockPos)
Block.dropBlockAsItemWithChance(Block, World, BlockPos, IBlockState, float, int)
DoubleBuffer.equals(DoubleBuffer, Object | double, double)
RenderItem.renderItemModelIntoGUI(RenderItem, ItemStack, int, int, IBakedModel)
EntityLivingBase.playEquipSound(EntityLivingBase, ItemStack)
LambdaFormBuffer.ownedCount(LambdaFormBuffer)
PathPoint.distanceManhattan(PathPoint, PathPoint)
ResourceBundle.throwMissingResourceException(String, Locale, Throwable)
Block.onBlockHarvested(Block, World, BlockPos, IBlockState, EntityPlayer)
NetHandlerPlayClient.handleTimeUpdate(NetHandlerPlayClient, SPacketTimeUpdate)
URI.access$702(URI, String)
Entity.moveToBlockPosAndAngles(Entity, BlockPos, float, float)
CompositeByteBuf._getShortLE(CompositeByteBuf, int)
World.setBlockToAir(World, BlockPos)
Item.getArmorTexture(Item, ItemStack, Entity, EntityEquipmentSlot, String)
Block.onBlockPlacedBy(Block, World, BlockPos, IBlockState, EntityLivingBase, ItemStack)
ByteBuf.copy(ByteBuf, int, int | ByteBuf)
NetHandlerPlayClient.handleCooldown(NetHandlerPlayClient, SPacketCooldown)
FileSystemProvider.setAttribute(FileSystemProvider, Path, String, Object, LinkOption[])
ReflectionFactory.setMethodAccessor(ReflectionFactory, Method, MethodAccessor)
MethodHandle.internalMemberName(MethodHandle)
EntityLivingBase.dropFewItems(EntityLivingBase, boolean, int)
EntityLivingBase.knockBack(EntityLivingBase, Entity, float, double, double)
EntityMinecart.canUseRail(EntityMinecart)
Graphics2D.setTransform(Graphics2D, AffineTransform)
State.getRawBuffer(State)
ChronoLocalDate.compareTo(ChronoLocalDate, Object | ChronoLocalDate, ChronoLocalDate)
Set.iterator(Set)
Window.setLocation(Window, Point | Window, int, int)
Minecraft.addServerStatsToSnooper(Minecraft, Snooper)
ItemStack.onPlayerStoppedUsing(ItemStack, World, EntityLivingBase, int)
FontRenderer.getWordWrappedHeight(FontRenderer, String, int)
MinecraftServer.setResourcePack(MinecraftServer, String, String)
Window.setLocationByPlatform(Window, boolean)
BasicType.basicTypes(String | List)
Era.getValue(Era)
ByteBuffer.asCharBuffer(ByteBuffer)
AccessibleRelation.getKey(AccessibleRelation)
MemberName.isPackage(MemberName)
FontRenderContext.isTransformed(FontRenderContext)
SampleModel.setSample(SampleModel, int, int, int, int, DataBuffer | SampleModel, int, int, int, float, DataBuffer | SampleModel, int, int, int, double, DataBuffer)
Method.getAnnotation(Method, Class)
FieldAccessor.setLong(FieldAccessor, Object, long)
ArrayList.elementData(ArrayList, int)
RenderGlobal.createBindEntityOutlineFbs(RenderGlobal, int, int)
OffsetTime.minusSeconds(OffsetTime, long)
TextureMap.initMissingImage(TextureMap)
SampleModel.createSubsetSampleModel(SampleModel, int[])
Cell.getColumnKey(Cell)
Comparator.$deserializeLambda$(SerializedLambda)
EntityMinecart.moveDerailedMinecart(EntityMinecart)
Toolkit.getScreenSize(Toolkit)
InetAddress.init()
GuiButton.getHoverState(GuiButton, boolean)
ZoneRules.getOffsetInfo(ZoneRules, LocalDateTime)
URLConnection.getHeaderFieldInt(URLConnection, String, int)
AffineTransform.getShearInstance(double, double)
AccessibleEditableText.setTextContents(AccessibleEditableText, String)
BlockStateMapper.putAllStateModelLocations(BlockStateMapper)
JsonPrimitive.isString(JsonPrimitive)
RandomValueRange.access$000(RandomValueRange)
BufferStrategy.getCapabilities(BufferStrategy)
PotionEffect.deincrementDuration(PotionEffect)
TextFormatting.getColorIndex(TextFormatting)
BigDecimal.parseExp(char[], int, int)
Class.newReflectionData(Class, SoftReference, int)
LootPool.createLootRoll(LootPool, Collection, Random, LootContext)
Month.minLength(Month)
DoubleStream.generate(DoubleSupplier)
EntityMinecart.getMaxSpeedAirLateral(EntityMinecart)
MusicType.valueOf(String)
Teleporter.placeEntity(Teleporter, World, Entity, float)
MinecraftServer.getFile(MinecraftServer, String)
NetHandlerPlayClient.access$200(NetHandlerPlayClient)
WindowPeer.updateMinimumSize(WindowPeer)
Enum.hashCode(Enum)
PlayerChunkMap.addPlayer(PlayerChunkMap, EntityPlayerMP)
AbstractStringBuilder.ensureCapacityInternal(AbstractStringBuilder, int)
PlayerChunkMapEntry.removePlayer(PlayerChunkMapEntry, EntityPlayerMP)
ClassLoader.compareCerts(ClassLoader, Certificate[], Certificate[])
ChannelConfig.getWriteSpinCount(ChannelConfig)
CompositeByteBuf.hasArray(CompositeByteBuf)
Instance.access$100(Instance, boolean)
Pair.getRight(Pair)
PlayerAdvancements.checkForAutomaticTriggers(PlayerAdvancements)
AccessControlContext.combine(ProtectionDomain[], ProtectionDomain[])
Duration.toSeconds(Duration)
World.mayPlace(World, Block, BlockPos, boolean, EnumFacing, Entity)
JsonWriter.value(JsonWriter, Boolean | JsonWriter, boolean | JsonWriter, String | JsonWriter, double | JsonWriter, Number | JsonWriter, long)
BlockFaceShape.values()
PathNodeType.valueOf(String)
ResourcePackRepository.fixDirResourcepacks(ResourcePackRepository)
Font.getMaxCharBounds(Font, FontRenderContext)
EventExecutor.newProgressivePromise(EventExecutor)
DragGestureRecognizer.registerListeners(DragGestureRecognizer)
Entity.onStruckByLightning(Entity, EntityLightningBolt)
DragSource.processDragMouseMoved(DragSource, DragSourceDragEvent)
Path.compareTo(Path, Path | Path, Object)
RenderGlobal.playRecord(RenderGlobal, SoundEvent, BlockPos)
URLClassPath.knownToNotExist0(ClassLoader, String)
WorldInfo.setWorldName(WorldInfo, String)
LayoutManager.removeLayoutComponent(LayoutManager, Component)
TileEntity.canRenderBreaking(TileEntity)
Scoreboard.getDisplaySlotStrings()
ByteBuf.readSlice(ByteBuf, int)
SoundEvent.registerSounds()
IntStream.mapToObj(IntStream, IntFunction)
ChannelHandlerContext.executor(ChannelHandlerContext)
Template.getZeroPositionWithTransform(BlockPos, Mirror, Rotation, int, int | Template, BlockPos, Mirror, Rotation)
Integer.getChars(int, int, char[])
Result.values()
AttributeValues.updateDerivedTransforms(AttributeValues)
AttributeValues.getTracking(AttributeValues)
Throwable.getCause(Throwable)
ColorSpace.getInstance(int)
Integer.floatValue(Integer)
Chronology.ofLocale(Locale)
ChannelOutboundBuffer.totalPendingWriteBytes(ChannelOutboundBuffer)
AffineTransform.setToTranslation(AffineTransform, double, double)
Channel.eventLoop(Channel)
JsonObject.remove(JsonObject, String)
Period.writeReplace(Period)
LambdaFormBuffer.insertExpression(LambdaFormBuffer, int, Name)
EntityDataManager.getDirty(EntityDataManager)
Block.isAir(Block, IBlockState, IBlockAccess, BlockPos)
World.getCurrentMoonPhaseFactor(World)
ByteBuf.setInt(ByteBuf, int, int)
JsonReader.endObject(JsonReader)
BiomeProvider.getFixedBiome(BiomeProvider)
Date.setYear(Date, int)
IdentityArrayList.rangeCheck(IdentityArrayList, int)
URL.getURLStreamHandler(String)
Component.transferFocus(Component | Component, boolean)
LocaleExtensions.getUnicodeLocaleKeys(LocaleExtensions)
WorldBorder.getCenterZ(WorldBorder)
WorldBorder.getCenterX(WorldBorder)
AccessibleTable.getAccessibleColumnHeader(AccessibleTable)
BlockModelRenderer.renderModel(BlockModelRenderer, IBlockAccess, IBakedModel, IBlockState, BlockPos, BufferBuilder, boolean | BlockModelRenderer, IBlockAccess, IBakedModel, IBlockState, BlockPos, BufferBuilder, boolean, long)
EntityMinecart.canBePushed(EntityMinecart)
Toolkit.getFontList(Toolkit)
ItemCameraTransforms.getTransform(ItemCameraTransforms, TransformType)
TileEntity.restrictNBTCopy(TileEntity)
EntityPlayer.getRightShoulderEntity(EntityPlayer)
Block.isWood(Block, IBlockAccess, BlockPos)
Component.requestFocusHelper(Component, boolean, boolean, Cause | Component, boolean, boolean)
EntityLivingBase.canEntityBeSeen(EntityLivingBase, Entity)
EntityLivingBase.markPotionsDirty(EntityLivingBase)
StateImplementation.getComparatorInputOverride(StateImplementation, World, BlockPos)
URLConnection.getContentLength(URLConnection)
MemberName.isFieldOrMethod(MemberName)
AttributeValues.fromMap(Map, int | Map)
Style.access$702(Style, ClickEvent)
Style.access$700(Style)
EventQueue.setCurrentEventAndMostRecentTime(AWTEvent)
BigDecimal.make64(long, long)
Container.addImpl(Container, Component, Object, int)
Block.spawnAsEntity(World, BlockPos, ItemStack)
OffsetTime.truncatedTo(OffsetTime, TemporalUnit)
Font.getAttributes(Font)
ItemStack.setStackDisplayName(ItemStack, String)
ImmutableTable.access$000(Iterable)
ReflectionFactory.writeReplaceForSerialization(ReflectionFactory, Class)
Entity.playSound(Entity, SoundEvent, float, float)
Path.getFinalPathPoint(Path)
Component.updateCursorImmediately(Component)
MethodTypeForm.primitiveReturnCount(MethodTypeForm)
EntityPlayerMP.displayGui(EntityPlayerMP, IInteractionObject)
ThreadLocal.childValue(ThreadLocal, Object)
GenLayer.isBiomeOceanic(int)
ClassLoader.findNative(ClassLoader, String)
BigDecimal.compactValFor(BigInteger)
AbstractStringBuilder.codePointBefore(AbstractStringBuilder, int)
Long.divideUnsigned(long, long)
FontRenderer.renderSplitString(FontRenderer, String, int, int, int, boolean)
ExtendedBlockStorage.getSkyLight(ExtendedBlockStorage | ExtendedBlockStorage, int, int, int)
Type.getByName(String)
Block.isBedFoot(Block, IBlockAccess, BlockPos)
ThreadLocal.access$400(ThreadLocal)
Component.getFont(Component)
Entity.shouldDismountInWater(Entity, Entity)
Chronology.resolveDate(Chronology, Map, ResolverStyle)
ClassLoader.isAncestor(ClassLoader, ClassLoader)
Range.access$400(Range)
EventQueue.getNextEvent(EventQueue, int | EventQueue)
LootPool.getRolls(LootPool)
BufferBuilder.getVertexFormat(BufferBuilder)
Entity.isGlowing(Entity)
ISaveHandler.flush(ISaveHandler)
Class.isAnonymousClass(Class)
Minecraft.getSoundHandler(Minecraft)
Thread.getState(Thread)
ImmutableMultimap.containsKey(ImmutableMultimap, Object)
WorldServer.isChunkLoaded(WorldServer, int, int, boolean)
WorldInfo.getRainTime(WorldInfo)
ChannelOutboundBuffer.writabilityMask(int)
LineMetrics.getAscent(LineMetrics)
Locale.forLanguageTag(String)
IAttribute.getParent(IAttribute)
Optional.toJavaUtil(Optional | Optional)
AWTEvent.nativeSetSource(AWTEvent, ComponentPeer)
Style.getBold(Style)
Render.renderOffsetAABB(AxisAlignedBB, double, double, double)
Calendar.setFieldsNormalized(Calendar, int)
OffsetDateTime.withDayOfMonth(OffsetDateTime, int)
ChunkCache.getStrongPower(ChunkCache, BlockPos, EnumFacing)
UserListBans.getObjectKey(UserListBans, GameProfile | UserListBans, Object)
BigDecimal.bigTenToThe(int)
EntityMinecart.getCollisionBoundingBox(EntityMinecart)
Framebuffer.checkFramebufferComplete(Framebuffer)
RenderGlobal.onEntityRemoved(RenderGlobal, Entity)
Invokers.methodHandleInvokeLinkerMethod(String, MethodType, Object[])
GuiScreen.setClipboardString(String)
Throwable.getLocalizedMessage(Throwable)
URI.appendAuthority(URI, StringBuffer, String, String, String, int)
TimeZone.getRawOffset(TimeZone)
Rectangle2D.createIntersection(Rectangle2D, Rectangle2D)
World.isBlockTickPending(World, BlockPos, Block)
MessageSizeEstimator.newHandle(MessageSizeEstimator)
AnnotatedType.getType(AnnotatedType)
LocalDate.getMonthValue(LocalDate)
PlayerList.playerLoggedOut(PlayerList, EntityPlayerMP)
Random.internalNextDouble(Random, double, double)
DropTargetAutoScroller.actionPerformed(DropTargetAutoScroller, ActionEvent)
Date.getTimeImpl(Date)
CompositeByteBuf.writeShort(CompositeByteBuf, int | CompositeByteBuf, int)
AttributeValues.getNumericShaping(AttributeValues | Map)
LocalDateTime.minusMonths(LocalDateTime, long)
Minecraft.getCurrentServerData(Minecraft)
Minecraft.init(Minecraft)
ChunkCompileTaskGenerator.getLock(ChunkCompileTaskGenerator)
URLConnection.getUseCaches(URLConnection)
ReflectionFactory.langReflectAccess()
Marker.addParents(Marker, Marker[])
Duration.toString(Duration)
StrikeMetrics.convertToUserSpace(StrikeMetrics, AffineTransform)
Thread.setUncaughtExceptionHandler(Thread, UncaughtExceptionHandler)
BigInteger.andNot(BigInteger, BigInteger)
Image.getSource(Image)
MethodTypeForm.toString(MethodTypeForm)
EntityLookHelper.updateRotation(EntityLookHelper, float, float, float)
BasicType.access$100(BasicType)
ReflectionFactory.newOptionalDataExceptionForSerialization(ReflectionFactory, boolean)
LangReflectAccess.newField(LangReflectAccess, Class, String, Class, int, int, String, byte[])
FontLineMetrics.getLeading(FontLineMetrics)
URI.access$1402(URI, String)
MethodHandle.bindArgumentL(MethodHandle, int, Object)
Sound.isStreaming(Sound)
Block.isFlammable(Block, IBlockAccess, BlockPos, EnumFacing)
VertexFormat.getColorOffset(VertexFormat)
LambdaForm.contains(LambdaForm, Name)
Potion.getGuiSortColor(Potion, PotionEffect)
BoundMethodHandle.editor(BoundMethodHandle)
EventQueue.wakeup(EventQueue, boolean)
AxisAlignedBB.union(AxisAlignedBB, AxisAlignedBB)
DamageSource.setProjectile(DamageSource)
Dialog.checkShouldBeBlocked(Window)
Invokers.linkToCallSiteMethod(MethodType)
Month.length(Month, boolean)
ImmutableTable.builder()
ThreadGroup.resume(ThreadGroup)
ScorePlayerTeam.setNameTagVisibility(ScorePlayerTeam, EnumVisible)
AccessibleText.getSelectionEnd(AccessibleText)
GenLayer.getInts(GenLayer, int, int, int, int)
FontMetrics.getFont(FontMetrics)
FontStrike.getGlyphOutlineBounds(FontStrike, int)
DifficultyInstance.isHarderThan(DifficultyInstance, float)
DragSource.processDragEnter(DragSource, DragSourceDragEvent)
Enumeration.hasMoreElements(Enumeration)
LambdaFormEditor.spreadArgumentsForm(LambdaFormEditor, int, Class, int)
Path.getOpenSet(Path)
Font.equals(Font, Object)
EntityLivingBase.isServerWorld(EntityLivingBase)
MinecraftServer.setFolderName(MinecraftServer, String)
EntityTracker.track(EntityTracker, Entity | EntityTracker, Entity, int, int | EntityTracker, Entity, int, int, boolean)
Entity.handleWaterMovement(Entity)
RenderGlobal.fixTerrainFrustum(RenderGlobal, double, double, double)
ShortBuffer.duplicate(ShortBuffer)
ServerCommandManager.notifyListener(ServerCommandManager, ICommandSender, ICommand, int, String, Object[])
ChannelOutboundBuffer.addFlush(ChannelOutboundBuffer)
RecipeBookServer.sendPacket(RecipeBookServer, State, EntityPlayerMP, List)
URI.access$2700()
Item.getHarvestLevel(Item, ItemStack, String, EntityPlayer, IBlockState)
Container.mixOnValidating(Container)
RenderGlobal.renderEntityOutlineFramebuffer(RenderGlobal)
Wrapper.arrayType(Wrapper)
LongSummaryStatistics.getCount(LongSummaryStatistics)
RenderManager.setWorld(RenderManager, World)
CompositeByteBuf._setLongLE(CompositeByteBuf, int, long)
ItemRenderer.transformFirstPerson(ItemRenderer, EnumHandSide, float)
Entity.setPosition(Entity, double, double, double)
Container.remove(Container, int | Container, Component)
Block.getActualState(Block, IBlockState, IBlockAccess, BlockPos)
ExtendedBlockStorage.recalculateRefCounts(ExtendedBlockStorage)
EntityLivingBase.updateArmSwingProgress(EntityLivingBase)
File.slashify(String, boolean)
StateImplementation.withRotation(StateImplementation, Rotation)
AttributeValues.setLigatures(AttributeValues, int)
TileEntity.serializeNBT(TileEntity | TileEntity)
Vec3d.getIntermediateWithYValue(Vec3d, Vec3d, double)
OffsetDateTime.toLocalDate(OffsetDateTime)
LocalDateTime.minusHours(LocalDateTime, long)
Package.getImplementationVersion(Package)
ChronoZonedDateTime.query(ChronoZonedDateTime, TemporalQuery)
JsonWriter.setHtmlSafe(JsonWriter, boolean)
CharBuffer.toString(CharBuffer, int, int | CharBuffer)
ScorePlayerTeam.setCollisionRule(ScorePlayerTeam, CollisionRule)
Component.getColorModel(Component)
LongStream.limit(LongStream, long)
Minecraft.isGamePaused(Minecraft)
WatchKey.reset(WatchKey)
DoubleStream.summaryStatistics(DoubleStream)
Window.limit(double, double, double)
LambdaForm.interpretWithArguments(LambdaForm, Object[])
String.startsWith(String, String | String, String, int)
Entity.readEntityFromNBT(Entity, NBTTagCompound)
Excluder.isValidSince(Excluder, Since)
PlayerChunkMap.entryChanged(PlayerChunkMap, PlayerChunkMapEntry)
GenLayer.getModdedBiomeSize(WorldType, int)
Component.firePropertyChange(Component, String, char, char | Component, String, short, short | Component, String, double, double | Component, String, int, int | Component, String, byte, byte | Component, String, long, long | Component, String, Object, Object | Component, String, float, float | Component, String, boolean, boolean)
DragSourceContext.dragEnter(DragSourceContext, DragSourceDragEvent)
Item.setTileEntityItemStackRenderer(Item, TileEntityItemStackRenderer)
Container.reparentChild(Container, Component)
IsoChronology.getCalendarType(IsoChronology)
World.handleMaterialAcceleration(World, AxisAlignedBB, Material, Entity)
PathNavigate.noPath(PathNavigate)
MemberName.flagsMods(int, int, byte)
ImmutableMap.toString(ImmutableMap)
MemberName.access$300(MemberName)
EntityLivingBase.getHeldItemMainhand(EntityLivingBase)
Item.registerItems()
URLStreamHandler.getDefaultPort(URLStreamHandler)
TextHitInfo.getInsertionIndex(TextHitInfo)
EntityPlayer.getGameProfile(EntityPlayer)
ComponentPeer.requestFocus(ComponentPeer, Component, boolean, boolean, long, Cause)
Item.onCreated(Item, ItemStack, World, EntityPlayer)
EntityPlayerMP.onChangedPotionEffect(EntityPlayerMP, PotionEffect, boolean)
URLStreamHandler.getHostAddress(URLStreamHandler, URL)
DropTargetContextPeer.setTargetActions(DropTargetContextPeer, int)
StrikeMetrics.getMaxAdvance(StrikeMetrics)
ByteBuffer.compareTo(ByteBuffer, ByteBuffer | ByteBuffer, Object)
GuiScreen.isCtrlKeyDown()
LambdaFormBuffer.growNames(LambdaFormBuffer, int, int)
EntityPlayerMP.removeEntity(EntityPlayerMP, Entity)
AbstractStringBuilder.reverseAllValidSurrogatePairs(AbstractStringBuilder)
Entity.hasNoGravity(Entity)
Scoreboard.setObjectiveInDisplaySlot(Scoreboard, int, ScoreObjective)
ByteBuf.getUnsignedInt(ByteBuf, int)
Date.after(Date, Date)
GenericsFactory.makeParameterizedType(GenericsFactory, Type, Type[], Type)
WorldServer.saveAllChunks(WorldServer, boolean, IProgressUpdate)
Date.getJulianCalendar()
JsonReader.hasNext(JsonReader)
Locale.createConstant(String, String)
Invokers.spreadInvoker(Invokers, int)
ItemStack.copy(ItemStack)
GameSettings.getModelParts(GameSettings)
Rectangle.translate(Rectangle, int, int)
ByteBuffer.array(ByteBuffer | ByteBuffer)
Multimap.isEmpty(Multimap)
Component.reshape(Component, int, int, int, int)
State.values()
Lookup.getDirectMethodForConstant(Lookup, byte, Class, MemberName)
PlayerChunkMapEntry.sendToPlayers(PlayerChunkMapEntry)
ChannelOutboundBuffer.clearNioBuffers(ChannelOutboundBuffer)
EntityLivingBase.canBePushed(EntityLivingBase)
Render.renderEntityOnFire(Render, Entity, double, double, double, float)
URI.getRawQuery(URI)
FileSystemProvider.newDirectoryStream(FileSystemProvider, Path, Filter)
TemplateManager.readTemplateFromJar(TemplateManager, ResourceLocation)
Rectangle2D.contains(Rectangle2D, double, double | Rectangle2D, double, double, double, double)
BigInteger.bitCount(BigInteger)
ListPeer.getPreferredSize(ListPeer, int)
ZoneOffsetTransition.writeExternal(ZoneOffsetTransition, DataOutput)
LongSummaryStatistics.getSum(LongSummaryStatistics)
Method.toGenericString(Method)
UserListWhitelist.getByName(UserListWhitelist, String)
Chronology.range(Chronology, ChronoField)
Entry.getTexturePackDescription(Entry)
EntityPlayer.writeEntityToNBT(EntityPlayer, NBTTagCompound)
Lookup.checkUnprivilegedlookupClass(Class, int)
Enum.clone(Enum)
Scoreboard.getScores(Scoreboard)
Dialog.isResizable(Dialog)
IntegratedServer.finalTick(IntegratedServer, CrashReport)
RenderingHints.size(RenderingHints)
EntityLivingBase.setHeldItem(EntityLivingBase, EnumHand, ItemStack)
AttributeValues.applyIMHighlight(AttributeValues)
NumericShaper.getContextualShaper(int | int, int | Set | Set, Range)
RenderManager.isRenderShadow(RenderManager)
Component.containsFocus(Component)
RegistryNamespaced.getObjectById(RegistryNamespaced, int)
Gson.floatAdapter(Gson, boolean)
URI.access$800()
EntityLiving.getVerticalFaceSpeed(EntityLiving)
CompositeByteBuf.setBoolean(CompositeByteBuf, int, boolean | CompositeByteBuf, int, boolean)
ChunkCompileTaskGenerator.finish(ChunkCompileTaskGenerator)
MemberName.makeAccessException(MemberName, String, Object | MemberName)
PathIterator.getWindingRule(PathIterator)
AccessibleComponent.setBackground(AccessibleComponent, Color)
Shader.setProjectionMatrix(Shader, Matrix4f)
NBTTagList.hashCode(NBTTagList)
BigInteger.valueOf(long | int[])
Random.nextDouble(Random)
FileSystem.newWatchService(FileSystem)
NetHandlerPlayClient.access$100(NetHandlerPlayClient)
Item.onPlayerStoppedUsing(Item, ItemStack, World, EntityLivingBase, int)
ImmutableCollection.spliterator(ImmutableCollection)
TimeZone.setDefault(TimeZone)
Village.serializeNBT(Village | Village)
Container.containsFocus(Container)
Collection.addAll(Collection, Collection)
JsonArray.contains(JsonArray, JsonElement)
ConstantPool.getStringAt(ConstantPool, int)
EntityRenderer.setupFogColor(EntityRenderer, boolean)
OffsetTime.isAfter(OffsetTime, OffsetTime)
Loader.getResource(Loader, String, boolean | Loader, String)
AccessibleStateSet.contains(AccessibleStateSet, AccessibleState)
ShaderUniform.uploadInt(ShaderUniform)
ChunkProviderServer.makeString(ChunkProviderServer)
EntityLivingBase.getAttackingEntity(EntityLivingBase)
DragSource.createDefaultDragGestureRecognizer(DragSource, Component, int, DragGestureListener)
InputContext.dispatchEvent(InputContext, AWTEvent)
ZonedDateTime.resolveOffset(ZonedDateTime, ZoneOffset)
ISound.getVolume(ISound)
AccessibleContext.getAccessibleComponent(AccessibleContext)
Component.processInputMethodEvent(Component, InputMethodEvent)
Component.eventTypeEnabled(Component, int)
AnnotationType.memberTypes(AnnotationType)
CharSequence.chars(CharSequence)
BigInteger.mod2(BigInteger, int)
Enum.getDeclaringClass(Enum)
ValueRange.checkValidIntValue(ValueRange, long, TemporalField)
MethodHandle.invokeBasic(MethodHandle, Object[])
Region.intersectsQuickCheckXYXY(Region, int, int, int, int)
Month.query(Month, TemporalQuery)
DragGestureRecognizer.getSourceActions(DragGestureRecognizer)
ByteBuf.capacity(ByteBuf, int | ByteBuf)
EntityLiving.setLeftHanded(EntityLiving, boolean)
ComponentPeer.setBackground(ComponentPeer, Color)
LootPool.getName(LootPool)
ThreadLocalMap.resize(ThreadLocalMap)
CharBuffer.isDirect(CharBuffer)
ImmutableSetMultimap.writeObject(ImmutableSetMultimap, ObjectOutputStream)
LogBuilder.withMarker(LogBuilder, Marker)
FileChannel.write(FileChannel, ByteBuffer[], int, int | FileChannel, ByteBuffer | FileChannel, ByteBuffer[] | FileChannel, ByteBuffer, long)
EntityLivingBase.handleJumpLava(EntityLivingBase)
LootTable.isFrozen(LootTable)
Instant.isBefore(Instant, Instant)
GraphicsDevice.getFullScreenWindow(GraphicsDevice)
BaseStream.sequential(BaseStream)
ZoneRules.getTransitions(ZoneRules)
EntityLiving.playLivingSound(EntityLiving)
World.getRedstonePowerFromNeighbors(World, BlockPos)
Annotation.hashCode(Annotation)
PlayerList.createPlayerForUser(PlayerList, GameProfile)
EntityTracker.updateServerPosition(Entity, double, double, double)
EntityEquipmentSlot.getSlotIndex(EntityEquipmentSlot)
Cursor.getPredefinedCursor(int)
Block.addCollisionBoxToList(Block, IBlockState, World, BlockPos, AxisAlignedBB, List, Entity, boolean | BlockPos, AxisAlignedBB, List, AxisAlignedBB)
EntityPlayerMP.getServerWorld(EntityPlayerMP)
OptionalLong.orElseThrow(OptionalLong, Supplier)
Entity.newDoubleNBTList(Entity, double[])
CharSequence.lambda$chars$0(CharSequence)
Biome.ignorePlayerSpawnSuitability(Biome)
UserListOps.getPermissionLevel(UserListOps, GameProfile)
LocalDate.isBefore(LocalDate, ChronoLocalDate)
AttributeValues.setWidth(AttributeValues, float)
AccessControlContext.optimize(AccessControlContext)
Class.registerNatives()
NamedFunction.hashCode(NamedFunction)
Multiset.equals(Multiset, Object)
InputStream.markSupported(InputStream)
Class.getAnnotations(Class)
LocalDate.minusYears(LocalDate, long)
FileSystem.provider(FileSystem)
ImmutableSetMultimap.lambda$flatteningToImmutableSetMultimap$1(Function, Object)
Framebuffer.framebufferRender(Framebuffer, int, int)
ImmutableCollection.toArray(ImmutableCollection | ImmutableCollection, Object[])
FrameTimer.getIndex(FrameTimer)
AccessControlContext.getCombiner(AccessControlContext)
ImmutableSetMultimap.lambda$flatteningToImmutableSetMultimap$2(Function, Object)
EntityLivingBase.isMovementBlocked(EntityLivingBase)
NetHandlerPlayClient.handleEntityEquipment(NetHandlerPlayClient, SPacketEntityEquipment)
Thread.join(Thread, long | Thread | Thread, long, int)
DayOfWeek.of(int)
TemplateManager.remove(TemplateManager, ResourceLocation)
Font2D.getFontName(Font2D, Locale)
InputContext.setCompositionEnabled(InputContext, boolean)
LootTable.checkFrozen(LootTable)
Component.applyCurrentShapeBelowMe(Component)
Duration.isNegative(Duration)
Block.getBlockFromItem(Item)
Executable.getExceptionTypes(Executable)
EntityLivingBase.onItemUseFinish(EntityLivingBase)
Graphics2D.setStroke(Graphics2D, Stroke)
EntityItem.onCollideWithPlayer(EntityItem, EntityPlayer)
NetHandlerPlayClient.handleCustomPayload(NetHandlerPlayClient, SPacketCustomPayload)
Range.access$500(Range)
BinaryOperator.maxBy(Comparator)
URLConnection.getHeaderFieldKey(URLConnection, int)
Block.addRunningEffects(Block, IBlockState, World, BlockPos, Entity)
Executable.handleParameterNumberMismatch(Executable, int, int)
ByteBuf.readBytes(ByteBuf, ByteBuffer | ByteBuf, FileChannel, long, int | ByteBuf, GatheringByteChannel, int | ByteBuf, int | ByteBuf, OutputStream, int | ByteBuf, byte[] | ByteBuf, ByteBuf, int | ByteBuf, ByteBuf | ByteBuf, ByteBuf, int, int | ByteBuf, byte[], int, int)
AccessibleAction.getAccessibleActionDescription(AccessibleAction, int)
Thread.getThreadGroup(Thread)
TextureAtlasSprite.copyFrom(TextureAtlasSprite, TextureAtlasSprite)
VertexFormat.getSize(VertexFormat)
EntityLivingBase.getActivePotionEffects(EntityLivingBase)
AbstractStringBuilder.toString(AbstractStringBuilder)
Chronology.dateYearDay(Chronology, int, int | Chronology, Era, int, int)
ChannelPromise.removeListener(ChannelPromise, GenericFutureListener)
Color.getBlue(Color)
TextureMap.getMipmapLevels(TextureMap)
FontRenderer.bindTexture(FontRenderer, ResourceLocation)
Entity.doWaterSplashEffect(Entity)
Calendar.internalGet(Calendar, int)
StateImplementation.hasComparatorInputOverride(StateImplementation)
StateImplementation.canEntitySpawn(StateImplementation, Entity)
JsonWriter.jsonValue(JsonWriter, String)
MenuItemPeer.setEnabled(MenuItemPeer, boolean)
Thread.nextThreadNum()
MinecraftServer.isDedicatedServer(MinecraftServer)
URL.resetState(URL)
ListenerList.unregisterAll(int, IEventListener)
ClassRepository.getSuperclass(ClassRepository)
Clipboard.fireFlavorsChanged(Clipboard)
ProtectionDomain.access$100(ProtectionDomain)
ActionResult.newResult(EnumActionResult, Object)
Component.areFocusTraversalKeysSet(Component, int)
AccessibleRelation.setTarget(AccessibleRelation, Object | AccessibleRelation, Object[])
WorldServer.updateEntityWithOptionalForce(WorldServer, Entity, boolean)
BlockRenderLayer.valueOf(String)
NetworkPlayerInfo.getDisplayName(NetworkPlayerInfo)
Block.getOffsetType(Block)
URI.highMask(char, char | String)
EntityLiving.setItemStackToSlot(EntityLiving, EntityEquipmentSlot, ItemStack)
BigInteger.shiftRight(BigInteger, int)
ExtendedBlockStorage.set(ExtendedBlockStorage, int, int, int, IBlockState)
Action.getValueByCanonicalName(String | String)
ITextComponent.getSiblings(ITextComponent)
SpeciesData.getterHandles(SpeciesData)
ItemRenderer.renderOverlays(ItemRenderer, float)
ItemStack.getTagCompound(ItemStack)
Vector.ensureCapacityHelper(Vector, int)
URI.access$1300()
Component.getTraversalRoot(Component)
EntityLivingBase.getRNG(EntityLivingBase)
ChronoLocalDate.hashCode(ChronoLocalDate)
LootTable.generateLootForPools(LootTable, Random, LootContext)
Month.get(Month, TemporalField)
SoundManager.playDelayedSound(SoundManager, ISound, int)
LongSummaryStatistics.toString(LongSummaryStatistics)
EntityPlayer.setPrimaryHand(EntityPlayer, EnumHandSide)
Component.removeHierarchyBoundsListener(Component, HierarchyBoundsListener)
AccessibleValue.getMaximumAccessibleValue(AccessibleValue)
PlayerList.canSendCommands(PlayerList, GameProfile)
ChunkCache.withinBounds(ChunkCache, int, int)
LocaleExtensions.getExtensionValue(LocaleExtensions, Character)
Container.recursiveSubtractAndApplyShape(Container, Region, int | Container, Region, int, int | Container, Region)
BigInteger.floatValue(BigInteger)
EntityMinecart.getRollingAmplitude(EntityMinecart)
AttributeValues.setCharReplacement(AttributeValues, GraphicAttribute)
Style.access$802(Style, HoverEvent)
Style.access$800(Style)
Team.formatString(Team, String)
ByteBuf.isReadable(ByteBuf | ByteBuf, int)
Block.shouldCheckWeakPower(Block, IBlockState, IBlockAccess, BlockPos, EnumFacing)
ByteBuf.readMediumLE(ByteBuf)
Container.getComponent(Container, int)
Calendar.toString(Calendar)
Font.createFont(int, InputStream | int, File)
Properties.propertyNames(Properties)
GuiScreen.renderToolTip(GuiScreen, ItemStack, int, int)
Minecraft.getCurrentAction(Minecraft)
OptionalInt.empty()
NamedFunction.assertMemberIsConsistent(NamedFunction)
Field.getGenericSignature(Field)
Manifest.clear(Manifest)
FileSystem.getSeparator(FileSystem)
RenderChunk.setPosition(RenderChunk, int, int, int)
URI.access$2600()
ITextureObject.loadTexture(ITextureObject, IResourceManager)
Component.removeMouseMotionListener(Component, MouseMotionListener)
OffsetDateTime.getDayOfWeek(OffsetDateTime)
DropTargetContext.getCurrentDataFlavorsAsList(DropTargetContext)
ImmutableMap.keyIterator(ImmutableMap)
Vector.firstElement(Vector)
AccessibleComponent.setLocation(AccessibleComponent, Point)
TextureManager.loadTickableTexture(TextureManager, ResourceLocation, ITickableTextureObject)
Integer.toBinaryString(int)
MethodHandle.spreadArrayChecks(MethodHandle, Class, int)
PlayerChunkMap.removePlayer(PlayerChunkMap, EntityPlayerMP)
LongBuffer.slice(LongBuffer)
Component.getPropertyChangeListeners(Component, String | Component)
Block.collisionRayTrace(Block, IBlockState, World, BlockPos, Vec3d, Vec3d)
ShortBuffer.equals(ShortBuffer, Object | short, short)
FileSystemProvider.createSymbolicLink(FileSystemProvider, Path, Path, FileAttribute[])
AccessibleComponent.removeFocusListener(AccessibleComponent, FocusListener)
OffsetDateTime.withOffsetSameLocal(OffsetDateTime, ZoneOffset)
Chunk.setLastSaveTime(Chunk, long)
InetAddress.anyLocalAddress()
World.playRecord(World, BlockPos, SoundEvent)
ZonedDateTime.minusHours(ZonedDateTime, long)
LocalDate.withDayOfMonth(LocalDate, int)
OffsetDateTime.getMonthValue(OffsetDateTime)
Wrapper.isNumeric(Wrapper)
Thread.registerNatives()
FontRenderer.getStringWidth(FontRenderer, String)
Component.setFocusable(Component, boolean)
AdvancementProgress.fromNetwork(PacketBuffer)
DropTargetContext.dropComplete(DropTargetContext, boolean)
Container.getComponents_NoClientCode(Container)
ThreadLocalMap.replaceStaleEntry(ThreadLocalMap, ThreadLocal, Object, int)
FileTime.equals(FileTime, Object)
NamedFunction.equals(NamedFunction, Object)
World.canBlockFreezeNoWater(World, BlockPos)
EntityEquipmentSlot.getName(EntityEquipmentSlot)
Component.getComponentOrientation(Component)
Chunk.setSkylightUpdated(Chunk)
EnumChatVisibility.getEnumChatVisibility(int)
Lookup.canBeCached(Lookup, byte, Class, MemberName)
Duration.getSeconds(Duration)
Block.getBlockFromName(String)
Component.canBeFocusOwner(Component)
Class.getReflectionFactory()
EntityItem.setNoDespawn(EntityItem)
Window.getOwner_NoClientCode(Window)
Long.rotateLeft(long, int)
Particle.onUpdate(Particle)
Date.toString(Date)
Builder.add(Builder, Object[] | Builder, Object[] | Builder, Object | Builder, Object[] | Builder, Object | Builder, Object | Builder, Object[] | Builder, long | Builder, Object | Builder, Object[] | Builder, Object | Builder, int | Builder, Object | Builder, Object | Builder, double | Builder, Object | Builder, Object | Builder, Object | Builder, Object[] | Builder, Object[])
Multimap.forEach(Multimap, BiConsumer)
ZonedDateTime.toLocalDate(ZonedDateTime | ZonedDateTime)
AtomicInteger.intValue(AtomicInteger)
ItemStack.isItemEqualIgnoreDurability(ItemStack, ItemStack)
Thread.activeCount()
Chunk.needsSaving(Chunk, boolean)
VillageCollection.removeAnnihilatedVillages(VillageCollection)
BigInteger.longValueExact(BigInteger)
Chronology.hashCode(Chronology)
StandardLevel.values()
CombatEntry.getDamageAmount(CombatEntry)
Set.contains(Set, Object)
TextureManager.getDynamicTextureLocation(TextureManager, String, DynamicTexture)
ThreadGroup.getParent(ThreadGroup)
WorldServer.wakeAllPlayers(WorldServer)
SoundHandler.stop(SoundHandler, String, SoundCategory)
OffsetDateTime.minusDays(OffsetDateTime, long)
Block.registerBlocks()
Container.areFocusTraversalKeysSet(Container, int)
Font2D.hasSupplementaryChars(Font2D)
ZoneId.ofWithPrefix(String, int, boolean)
ThreadLocal.get(ThreadLocal)
URL.set(URL, String, String, int, String, String, String, String, String | URL, String, String, int, String, String)
Locale.filter(List, Collection | List, Collection, FilteringMode)
CodeSource.writeObject(CodeSource, ObjectOutputStream)
EntityDataManager.readEntries(PacketBuffer)
EntityMinecart.getMountedYOffset(EntityMinecart)
Instant.equals(Instant, Object)
NetHandlerPlayClient.CREATE(Minecraft, GuiScreen, NetworkManager, GameProfile)
CheckboxMenuItemPeer.CREATE()
RetentionPolicy[].CREATE()
DoubleStream.CREATE()
ChunkProviderServer.CREATE(WorldServer, IChunkLoader, IChunkGenerator)
Properties.CREATE( | Properties)
ActionResult.CREATE(EnumActionResult, Object)
URL.CREATE(String, String, int, String | URL, String, URLStreamHandler | URL, String | String, String, int, String, URLStreamHandler | String | String, String, String)
IllegalAccessException.CREATE(String | )
EnclosingMethodInfo.CREATE()
ClickEvent.CREATE(Action, String)
Multimap.CREATE()
Watchable.CREATE()
Axis[].CREATE()
FontMetrics.CREATE()
ZoneId.CREATE()
Rectangle2D.CREATE()
EnumFacing.CREATE()
LambdaFormBuffer.CREATE()
Window.CREATE(Window, GraphicsConfiguration | Frame | Window)
GlyphMetrics.CREATE(boolean, float, float, Rectangle2D, byte | float, Rectangle2D, byte)
BiomeProvider.CREATE(WorldInfo)
BoundMethodHandle.CREATE()
UnmodifiableListIterator.CREATE()
DataParameter.CREATE(int, DataSerializer)
double[].CREATE()
EventQueue.CREATE()
Method[].CREATE()
FileSystemProvider.CREATE()
LocalDate.CREATE()
LootEntry.CREATE()
EnumType.CREATE()
EnumAction[].CREATE()
Number.CREATE()
WriteBufferWaterMark.CREATE(int, int)
LambdaFormEditor.CREATE()
Month[].CREATE()
Factory.CREATE()
GameRules.CREATE()
Pair.CREATE()
ImmutableMapEntry[].CREATE()
ICommandManager.CREATE()
BasicFileAttributes.CREATE()
Class[].CREATE()
EntityLookHelper.CREATE(EntityLiving)
Future.CREATE()
Chunk.CREATE(World, int, int | World, ChunkPrimer, int, int)
DataFlavor[].CREATE()
LongSummaryStatistics.CREATE()
SoundCategory[].CREATE()
ServerStatusResponse.CREATE()
Calendar.CREATE()
CharSequence.CREATE()
Language.CREATE(String, String, String, boolean)
ItemStack.CREATE(Item, int, int | NBTTagCompound | Item, int, int, NBTTagCompound | Block, int, int | Item, int | Block, int | Block | Item)
InetAddress[].CREATE()
PrintJob.CREATE()
ChronoZonedDateTime.CREATE()
WindowFocusListener[].CREATE()
AttributeModifier.CREATE(UUID, String, double, int | String, double, int)
ClassInheritanceMultiMap[].CREATE()
ChronoLocalDate.CREATE()
PathNodeType[].CREATE()
ImmutableTable.CREATE()
ImmutableList.CREATE()
NamedFunction[].CREATE()
EntityLiving.CREATE(World)
MethodHandle[].CREATE()
PathFinder.CREATE(NodeProcessor)
ComponentListener[].CREATE()
Entity.CREATE(World)
Result[].CREATE()
Unsafe.CREATE()
Double.CREATE(String | double)
DomainCombiner.CREATE()
LambdaForm.CREATE()
TileEntity.CREATE()
AsynchronousFileChannel.CREATE()
TempCategory[].CREATE()
PlayerList.CREATE(MinecraftServer)
ChunkCompileTaskGenerator.CREATE(RenderChunk, Type, double)
Wrapper.CREATE()
Boolean.CREATE(boolean | String)
Vec3d.CREATE(Vec3i | double, double, double)
VertexBuffer.CREATE(VertexFormat)
URLClassPath.CREATE(URL[], AccessControlContext | URL[] | URL[], URLStreamHandlerFactory, AccessControlContext)
File[].CREATE()
ProfileEntry.CREATE()
DoubleBuffer.CREATE()
Vec3i.CREATE(double, double, double | int, int, int)
DataSerializer.CREATE()
EnumEnchantmentType[].CREATE()
LanguageManager.CREATE(MetadataSerializer, String)
UserPrincipalLookupService.CREATE()
DataBuffer.CREATE()
OfDouble.CREATE()
Insets.CREATE(int, int, int, int)
Window[].CREATE()
boolean.CREATE()
StrikeMetrics.CREATE()
Object[].CREATE()
Container.CREATE()
OffsetDateTime.CREATE()
Debug.CREATE()
EnumDifficulty[].CREATE()
AccessibleState[].CREATE()
FocusTraversalPolicy.CREATE()
ITextComponent.CREATE()
RenderChunk.CREATE(World, RenderGlobal, int)
Annotation[].CREATE()
DragSourceContextPeer.CREATE()
MethodHandleInfo.CREATE()
IndexOutOfBoundsException.CREATE( | String)
BufferedImage.CREATE(ColorModel, WritableRaster, boolean, Hashtable | int, int, int, IndexColorModel | int, int, int)
AccessibleRole.CREATE()
TemporalAccessor.CREATE()
AnnotationData.CREATE()
Version.CREATE(String, int)
SocketAddress.CREATE()
Reference.CREATE()
UserListWhitelist.CREATE(File)
VillageDoorInfo.CREATE(BlockPos, EnumFacing, int | BlockPos, int, int, int)
MapData.CREATE(String)
IRarity.CREATE()
ServerData.CREATE(String, String, boolean)
ListenableFuture.CREATE()
EntityMinecart.CREATE(World, double, double, double | World)
PublicKey.CREATE()
TempCategory.CREATE()
Spliterator.CREATE()
Wrapper[].CREATE()
ConstructorRepository.CREATE()
DirectoryStream.CREATE()
AttributeSet.CREATE()
EntityItemFrame.CREATE(World, BlockPos, EnumFacing | World)
OfInt.CREATE()
IntStream.CREATE()
EnumFlowerColor.CREATE()
SearchTreeManager.CREATE()
AccessibleComponent.CREATE()
IntegratedServer.CREATE(Minecraft, String, String, WorldSettings, YggdrasilAuthenticationService, MinecraftSessionService, GameProfileRepository, PlayerProfileCache)
DropTarget.CREATE( | Component, DropTargetListener | Component, int, DropTargetListener | Component, int, DropTargetListener, boolean, FlavorMap | Component, int, DropTargetListener, boolean)
Locale[].CREATE()
ScheduledFuture.CREATE()
AffineTransform.CREATE(float, float, float, float, float, float | AffineTransform | float[] |  | double, double, double, double, double, double | double[])
WorldServer.CREATE(MinecraftServer, ISaveHandler, WorldInfo, int, Profiler)
ChannelMetadata.CREATE(boolean, int | boolean)
ProgressivePromise.CREATE()
TimeZone.CREATE()
ClassSignature.CREATE()
StackTraceElement[][].CREATE()
Appendable.CREATE()
FrameType.CREATE()
AccessibleText.CREATE()
ValueRange.CREATE()
TypeVariable.CREATE()
AccessibleSelection.CREATE()
ReturnType.CREATE()
BlockColors.CREATE()
AccessibleValue.CREATE()
ListenerListInst.CREATE()
IProperty.CREATE()
HierarchyListener[].CREATE()
IPlayerFileData.CREATE()
EnumBorderStatus.CREATE()
MethodRepository.CREATE()
TypeAdapter.CREATE()
MessageFactory.CREATE()
VolatileImage.CREATE()
String[][].CREATE()
AttributeValues.CREATE()
EnumPacketDirection.CREATE()
OptionalDataException.CREATE()
FrameTimer.CREATE()
NetworkManager.CREATE(EnumPacketDirection)
Temporal.CREATE()
BiConsumer.CREATE()
TextHitInfo.CREATE()
ClientAdvancementManager.CREATE(Minecraft)
Builder.CREATE()
PropertyMap.CREATE()
Marker.CREATE()
Result.CREATE()
FwDispatcher.CREATE()
IsoEra[].CREATE()
Gson.CREATE()
Optional.CREATE()
EnumDifficulty.CREATE()
Font.CREATE(String, int, int | Map)
FileNameMap.CREATE()
CapabilityDispatcher.CREATE(Map, ICapabilityProvider | Map)
ScoreObjective.CREATE(Scoreboard, String, IScoreCriteria)
Iterator.CREATE()
JsonReader.CREATE(Reader)
BlockModelShapes.CREATE(ModelManager)
MethodType.CREATE()
CheckboxPeer.CREATE()
JsonArray.CREATE()
Package[].CREATE()
Potion.CREATE()
MethodHandle.CREATE()
FontRenderer.CREATE(GameSettings, ResourceLocation, TextureManager, boolean)
AccessibleRelation[].CREATE()
StatisticsManagerServer.CREATE(MinecraftServer, File)
BufferCapabilities.CREATE(ImageCapabilities, ImageCapabilities, FlipContents)
InputMethodListener[].CREATE()
FramePeer.CREATE()
Handle.CREATE()
WildcardType.CREATE()
ListIterator.CREATE()
JsonNull.CREATE()
EnumBlockRenderType[].CREATE()
EventExecutorGroup.CREATE()
URLStreamHandler.CREATE()
SpawnListEntry.CREATE(Class, int, int, int)
ShaderGroup.CREATE(TextureManager, IResourceManager, Framebuffer, ResourceLocation)
FontStrike.CREATE()
MenuBarPeer.CREATE()
HorseArmorType[].CREATE()
CombatEntry.CREATE(DamageSource, int, float, float, String, float)
Clipboard.CREATE(String)
UnmodifiableIterator.CREATE()
ZoneOffsetTransition.CREATE()
Attribute.CREATE()
CanvasPeer.CREATE()
ClassRepository.CREATE()
ConstantPool.CREATE()
WindowStateListener[].CREATE()
Component[].CREATE()
EnumRarity.CREATE()
ServerCommandManager.CREATE(MinecraftServer)
TextFormatting.CREATE()
Image.CREATE()
ITooltipFlag.CREATE()
Extension.CREATE()
ImmutableMultimap.CREATE()
Accessible.CREATE()
ChunkPos.CREATE(BlockPos | int, int)
ArrayList.CREATE(Collection |  | int)
ISaveHandler.CREATE()
LootTableManager.CREATE(File)
ClassLoader.CREATE()
RecvByteBufAllocator.CREATE()
Composite.CREATE()
ImmutableMap.CREATE()
PathPoint.CREATE(int, int, int)
AWTEventListener[].CREATE()
PaintContext.CREATE()
ModelBase.CREATE()
IdentityArrayList.CREATE( | Collection | int)
ElementType.CREATE()
Graphics2D.CREATE()
IChunkGenerator.CREATE()
Enumeration.CREATE()
ShaderManager.CREATE(IResourceManager, String)
GraphicsConfiguration.CREATE()
ITextureObject.CREATE()
ChronoLocalDateTime.CREATE()
InetAddressImpl.CREATE()
EntryMessage.CREATE()
ShaderUniform.CREATE(String, int, int, ShaderManager)
Name.CREATE()
IResourceManager.CREATE()
KeyPair.CREATE(PublicKey, PrivateKey)
MapStorage.CREATE(ISaveHandler)
ScrollbarPeer.CREATE()
Action[].CREATE()
BlockFaceShape.CREATE()
ClassCastException.CREATE( | String)
WatchKey.CREATE()
ScrollPanePeer.CREATE()
Score.CREATE(Scoreboard, ScoreObjective, String)
EntitySenses.CREATE(EntityLiving)
EventDispatchThread.CREATE()
Excluder.CREATE()
Parameter[].CREATE()
Message.CREATE()
IChunkProvider.CREATE()
long.CREATE()
WorldGenerator.CREATE( | boolean)
JsonPrimitive.CREATE(Boolean | String | Number | Character)
ChannelHandler.CREATE()
Duration.CREATE()
DragSourceListener[].CREATE()
LootPool.CREATE(LootEntry[], LootCondition[], RandomValueRange, RandomValueRange, String)
CollisionRule[].CREATE()
NBTTagList.CREATE()
ListenerList.CREATE( | ListenerList)
LocalTime.CREATE()
Level[].CREATE()
MethodTypeSignature.CREATE()
EntityDataManager.CREATE(Entity)
ISnooperInfo.CREATE()
AppContext.CREATE()
ImmutableCollection.CREATE()
PathMatcher.CREATE()
UserListIPBansEntry.CREATE(String | String, Date, String, Date, String | JsonObject)
FontPeer.CREATE()
Advancement.CREATE(ResourceLocation, Advancement, DisplayInfo, AdvancementRewards, Map, String[][])
ModalExclusionType[].CREATE()
DisplayMode.CREATE(int, int, int, int)
WatchService.CREATE()
Stream.CREATE()
EntityItem.CREATE(World | World, double, double, double | World, double, double, double, ItemStack)
AxisDirection.CREATE()
ContainerListener[].CREATE()
UserListEntry.CREATE(Object)
UserListOps.CREATE(File)
BigDecimal[].CREATE()
StringBuilder.CREATE(int | String |  | CharSequence)
PathNavigate.CREATE(EntityLiving, World)
Range.CREATE()
MapColor.CREATE()
Iterable.CREATE()
LangReflectAccess.CREATE()
ImmutableMultiset.CREATE()
CrashReport.CREATE(String, Throwable)
FrameType[].CREATE()
GameProfileRepository.CREATE()
Status[].CREATE()
Sound.CREATE(String, float, float, int, Type, boolean)
IntBuffer.CREATE()
AbstractStringBuilder.CREATE()
TextureMap.CREATE(String, boolean | String, ITextureMapPopulator, boolean | String, ITextureMapPopulator | String)
Float.CREATE( | float, float)
OptionalDouble.CREATE()
EnumRenderType.CREATE()
IBakedModel.CREATE()
PanelPeer.CREATE()
RenderManager.CREATE(TextureManager, RenderItem)
Minecraft.CREATE(GameConfiguration)
IAttributeInstance.CREATE()
MinecraftSessionService.CREATE()
GeneralPath.CREATE(int | Shape |  | int, int)
IMetadataSection.CREATE()
RenderLivingBase.CREATE(RenderManager, ModelBase, float)
ImmutableSetMultimap.CREATE()
Locale.CREATE(String | String, String | String, String, String)
Name[].CREATE()
DesktopPeer.CREATE()
int.CREATE()
IResource.CREATE()
Point2D.CREATE()
Block.CREATE(Material, MapColor | Material)
Thread[].CREATE()
BlockRenderLayer[].CREATE()
Throwable[].CREATE()
ReentrantLock.CREATE(boolean | )
ServerResourceMode[].CREATE()
ChronoPeriod.CREATE()
AWTEvent.CREATE(Event | Object, int)
ItemColors.CREATE()
JsonToken[].CREATE()
Method.CREATE()
UserPrincipal.CREATE()
Era.CREATE()
ItemOverrideList.CREATE(List)
double.CREATE()
ClassTypeSignature.CREATE()
char[].CREATE()
FunctionObject.CREATE(Entry[])
EnumType[].CREATE()
EnumFlowerType[].CREATE()
Stack.CREATE()
StateImplementation.CREATE()
MouseMotionListener[].CREATE()
EventExecutor.CREATE()
ZonedDateTime.CREATE()
InputContext.CREATE()
Void.CREATE()
GlyphVector.CREATE()
ReflectiveOperationException.CREATE( | String | Throwable | String, Throwable)
FileSystem.CREATE()
ChannelFuture.CREATE()
Template.CREATE()
EnumBlockRenderType.CREATE()
EnumOffsetType[].CREATE()
ImageProducer.CREATE()
GlyphJustificationInfo.CREATE(float, boolean, int, float, float, boolean, int, float, float)
Raster.CREATE()
IOException.CREATE(String, Throwable |  | String | Throwable)
SPacketUpdateTileEntity.CREATE(BlockPos, int, NBTTagCompound | )
AWTEventListener.CREATE()
EnumHand.CREATE()
Vec2f.CREATE(float, float)
Loader.CREATE()
MinecraftServer.CREATE(File, Proxy, DataFixer, YggdrasilAuthenticationService, MinecraftSessionService, GameProfileRepository, PlayerProfileCache)
BaseLocale.CREATE()
EnumFlowerColor[].CREATE()
ModalExclusionType.CREATE()
NBTBase.CREATE()
Exception.CREATE(Throwable |  | String, Throwable | String)
Font2DHandle.CREATE(Font2D)
ItemTransformVec3f.CREATE(Vector3f, Vector3f, Vector3f)
OfPrimitive.CREATE()
BlockRenderLayer.CREATE()
IsoChronology.CREATE()
EventLoop.CREATE()
BlockFlower.CREATE()
CombatTracker.CREATE(EntityLivingBase)
URL[].CREATE()
Instance.CREATE()
ThreadLocal.CREATE()
BasicType.CREATE()
AdvancementList.CREATE()
IResourcePack.CREATE()
Predicate.CREATE()
LightweightPeer.CREATE()
AccessControlContext.CREATE(AccessControlContext, DomainCombiner | ProtectionDomain[])
GameProfile[].CREATE()
Visibility.CREATE()
ElementType[].CREATE()
ImageCapabilities.CREATE(boolean)
Tree.CREATE()
GameProfile.CREATE(UUID, String)
long[].CREATE()
Shader.CREATE(IResourceManager, String, Framebuffer, Framebuffer)
WorldGenAbstractTree.CREATE(boolean)
ResourceLocation.CREATE(String, String | String)
ChannelPipeline.CREATE()
Framebuffer.CREATE(int, int, boolean)
IAttribute.CREATE()
Cell.CREATE()
GraphicsDevice.CREATE()
TextureManager.CREATE(IResourceManager)
TypeSignature[].CREATE()
NonNullList.CREATE()
ImmutableSet.CREATE()
EnumChatVisibility[].CREATE()
BinaryOperator.CREATE()
TemplateManager.CREATE(String, DataFixer)
BufferBuilder.CREATE(int)
ScorePlayerTeam.CREATE(Scoreboard, String)
Snooper.CREATE(String, ISnooperInfo, long)
Stroke.CREATE()
IItemPropertyGetter.CREATE()
ChannelConfig.CREATE()
DoubleSummaryStatistics.CREATE()
AnnotatedType[].CREATE()
EnumVisible[].CREATE()
MessageSizeEstimator.CREATE()
OptionalLong.CREATE()
Path.CREATE(PathPoint[])
World.CREATE()
SpeciesData.CREATE()
BaselineResizeBehavior[].CREATE()
AdvancementProgress.CREATE()
ResourcePackRepository.CREATE(File, File, IResourcePack, MetadataSerializer, GameSettings)
SkinManager.CREATE(TextureManager, File, MinecraftSessionService)
RegionRenderCacheBuilder.CREATE()
AccessibleStateSet.CREATE( | AccessibleState[])
ItemCameraTransforms.CREATE(ItemCameraTransforms | ItemTransformVec3f, ItemTransformVec3f, ItemTransformVec3f, ItemTransformVec3f, ItemTransformVec3f, ItemTransformVec3f, ItemTransformVec3f, ItemTransformVec3f)
StandardLevel[].CREATE()
Status.CREATE()
FocusListener[].CREATE()
IEventListener[].CREATE()
Paint.CREATE()
TextFormatting[].CREATE()
Visibility[].CREATE()
Hashtable.CREATE(int, float |  | Map | int)
EnumHandSide[].CREATE()
NetworkSystem.CREATE(MinecraftServer)
ZoneOffsetTransition[].CREATE()
HoverEvent.CREATE(Action, ITextComponent)
PlayerAdvancements.CREATE(MinecraftServer, File, EntityPlayerMP)
AxisAlignedBB.CREATE(BlockPos, BlockPos | double, double, double, double, double, double | Vec3d, Vec3d | BlockPos)
SoundEventAccessor.CREATE(ResourceLocation, String)
RandomValueRange.CREATE(float, float | float)
LabelPeer.CREATE()
InputStream.CREATE()
JsonObject.CREATE()
Tutorial.CREATE(Minecraft)
void.CREATE()
AttributedCharacterIterator.CREATE()
TextFieldPeer.CREATE()
ChoicePeer.CREATE()
BlockModelRenderer.CREATE(BlockColors)
Multiset.CREATE()
Constructor.CREATE()
List.CREATE()
FileAttributeView.CREATE()
Collector.CREATE()
AssertionStatusDirectives.CREATE()
MouseWheelListener[].CREATE()
IToast.CREATE()
EnumBorderStatus[].CREATE()
SoundCategory.CREATE()
Attribute[].CREATE()
ProtectionDomain.CREATE(CodeSource, PermissionCollection | CodeSource, PermissionCollection, ClassLoader, Principal[])
EnumCreatureAttribute.CREATE()
PrivateKey.CREATE()
PermissionCollection.CREATE()
NibbleArray.CREATE(byte[] | )
MobSpawnerBaseLogic.CREATE()
DropTargetAutoScroller.CREATE()
GraphicAttribute.CREATE()
Range[].CREATE()
String.CREATE(StringBuilder | char[] | String | byte[], int, int | int[], int, int | byte[] | byte[], String | byte[], int, int, String | byte[], int, int, int |  | StringBuffer | byte[], int, int, Charset | byte[], int | byte[], Charset | char[], int, int)
EntityLivingBase.CREATE(World)
State.CREATE(BufferBuilder, int[], VertexFormat)
Package.CREATE()
Rectangle.CREATE(Point, Dimension | Point | int, int | int, int, int, int | Dimension | Rectangle | )
EnumCreatureType[].CREATE()
ItemModelMesher.CREATE(ModelManager)
ParameterizedType.CREATE()
BasicType[].CREATE()
BlockFaceShape[].CREATE()
DragGestureEvent.CREATE(DragGestureRecognizer, int, Point, List)
GameSettings.CREATE(Minecraft, File | )
EnumVisible.CREATE()
CreativeTabs[].CREATE()
FontLineMetrics.CREATE(int, CoreMetrics, FontRenderContext)
LocaleExtensions.CREATE()
TextureOffset.CREATE(int, int)
GroupPrincipal.CREATE()
IntSummaryStatistics.CREATE()
MemberName[].CREATE()
AnnotationType.CREATE()
GuiButton.CREATE(int, int, int, String | int, int, int, int, int, String)
SoundType.CREATE(float, float, SoundEvent, SoundEvent, SoundEvent, SoundEvent, SoundEvent)
CodeSigner[].CREATE()
Entity[].CREATE()
Team.CREATE()
AccessibleEditableText.CREATE()
GameType[].CREATE()
Manifest.CREATE(Manifest | InputStream | )
Render.CREATE()
ResourceBundle.CREATE()
AccessibleAction.CREATE()
EntityRenderer.CREATE(Minecraft, IResourceManager)
Color.CREATE(int, boolean | int | float, float, float | float, float, float, float | int, int, int, int | ColorSpace, float[], float | int, int, int)
Level.CREATE()
Permission.CREATE(String)
EnumAction.CREATE()
NodeProcessor.CREATE()
BaseStream.CREATE()
BlockStateMapper.CREATE()
IEntityLivingData.CREATE()
Component.CREATE()
Plane[].CREATE()
WrongMethodTypeException.CREATE( | String)
Axis.CREATE()
RegistryNamespaced.CREATE()
WorldBorder.CREATE()
GenericDeclaration.CREATE()
EnumUsage[].CREATE()
EntityEquipmentSlot.CREATE()
Vector3f.CREATE(ReadableVector3f |  | float, float, float)
ClassTypeSignature[].CREATE()
SoundSystemStarterThread.CREATE()
BiomeDecorator.CREATE()
short[].CREATE()
ConstructorAccessor.CREATE()
DragSourceMotionListener[].CREATE()
Toolkit.CREATE()
TypeSignature.CREATE()
DamageSource.CREATE(String)
ModelRenderer.CREATE(ModelBase | ModelBase, String | ModelBase, int, int)
Vector.CREATE()
EnumCreatureAttribute[].CREATE()
Condition.CREATE()
AtomicInteger.CREATE( | int)
String[].CREATE()
Particle.CREATE(World, double, double, double, double, double, double)
Long.CREATE(long | String)
AttenuationType.CREATE()
FloatBuffer.CREATE()
FileDialogPeer.CREATE()
Logger.CREATE()
Entry.CREATE()
DialogPeer.CREATE()
Cursor.CREATE(int)
ISaveFormat.CREATE()
Integer.CREATE(int | String)
JsonElement.CREATE()
Type[].CREATE()
AnnotatedType.CREATE()
MenuPeer.CREATE()
AttributeKey.CREATE()
LongBuffer.CREATE()
EventLoopGroup.CREATE()
CrashReportCategory.CREATE(CrashReport, String)
MapInfo.CREATE(MapData, EntityPlayer)
Field[].CREATE()
AccessibleRelation.CREATE(String, Object[] | String, Object | String)
InventoryEnderChest.CREATE()
FieldRepository.CREATE()
TypeVariable[].CREATE()
Dialog.CREATE(Dialog, String, boolean, GraphicsConfiguration | Window | Window, String, ModalityType | Frame, String | Frame, String, boolean, GraphicsConfiguration | Dialog, String, boolean | Window, String, ModalityType, GraphicsConfiguration | Dialog | Frame, String, boolean | Frame | Frame, boolean | Dialog, String | Window, String | Window, ModalityType)
CreativeTabs.CREATE(int, String | String)
EnumFacing[].CREATE()
Instant.CREATE()
MappedByteBuffer.CREATE()
EventListener[].CREATE()
FutureCallback.CREATE()
DropTargetContextPeer.CREATE()
ModelManager.CREATE(TextureMap)
FoodStats.CREATE()
char.CREATE()
IsoEra.CREATE()
Control.CREATE()
Material.CREATE(MapColor)
EntityBodyHelper.CREATE(EntityLivingBase)
ModalityType.CREATE()
UncaughtExceptionHandler.CREATE()
OutputStream.CREATE()
float[].CREATE()
SoundEvent.CREATE(ResourceLocation)
Annotation[][].CREATE()
LayoutManager.CREATE()
GraphicsConfiguration[].CREATE()
MusicType[].CREATE()
SoundManager.CREATE(SoundHandler, GameSettings)
Type.CREATE()
PathPoint[].CREATE()
ChunkCache.CREATE(World, BlockPos, BlockPos, int)
PlayerChunkMapEntry.CREATE(PlayerChunkMap, int, int)
NamedFunction.CREATE()
AccessibleIcon[].CREATE()
SortedSet.CREATE()
PlayerChunkMap.CREATE(WorldServer)
Intrinsic.CREATE()
FunctionManager.CREATE(File, MinecraftServer)
ScaledResolution.CREATE(Minecraft)
ProtectionDomain[].CREATE()
URLConnection.CREATE()
EnumPacketDirection[].CREATE()
GenericsFactory.CREATE()
SampleModel.CREATE(int, int, int, int)
Intrinsic[].CREATE()
OptionalInt.CREATE()
Action.CREATE()
EnumActionResult.CREATE()
byte.CREATE()
Region.CREATE()
FontRenderContext.CREATE(AffineTransform, boolean, boolean | AffineTransform, Object, Object)
TextAreaPeer.CREATE()
RetentionPolicy.CREATE()
short.CREATE()
ComponentOrientation.CREATE()
JavaSecurityAccess.CREATE()
FieldTypeSignature[].CREATE()
ByteOrder.CREATE()
MouseListener[].CREATE()
ExtendedBlockStorage[].CREATE()
int[][].CREATE()
EntityJumpHelper.CREATE(EntityLiving)
ReferenceCounted.CREATE()
Teleporter.CREATE(WorldServer)
PropertyChangeListener[].CREATE()
ColorModel.CREATE(int)
ReflectionData.CREATE()
ItemRenderer.CREATE(Minecraft)
FormalTypeParameter[].CREATE()
ZoneOffset.CREATE()
GuiScreen.CREATE()
CompiledChunk.CREATE()
RenderingHints.CREATE(Key, Object | Map)
WorldType.CREATE(String)
RenderGlobal.CREATE(Minecraft)
EnumOffsetType.CREATE()
EnumPushReaction.CREATE()
Biome.CREATE(BiomeProperties)
FileStore.CREATE()
AbstractAttributeMap.CREATE()
OffsetTime.CREATE()
SleepResult.CREATE()
CommandResultStats.CREATE()
PotionEffect.CREATE(Potion, int, int | Potion | Potion, int, int, boolean, boolean | PotionEffect | Potion, int)
FlipContents.CREATE()
Point[].CREATE()
Period.CREATE()
Transferable.CREATE()
HorseArmorType.CREATE()
UserListBans.CREATE(File)
BufferStrategy.CREATE()
Font2D.CREATE()
EnumChatVisibility.CREATE()
EnumRenderType[].CREATE()
JsonToken.CREATE()
Map.CREATE()
INetHandler.CREATE()
UUID.CREATE(long, long)
Function.CREATE()
Point.CREATE( | int, int | Point)
ChannelHandlerContext.CREATE()
BlockPos.CREATE(double, double, double | Vec3d | int, int, int | Vec3i | Entity)
EntityEquipmentSlot[].CREATE()
Set.CREATE()
Enum.CREATE()
FileStoreAttributeView.CREATE()
WorldInfo.CREATE(WorldSettings, String | NBTTagCompound | WorldInfo)
Month.CREATE()
Invokers.CREATE()
EnumRarity[].CREATE()
EntityPlayerMP.CREATE(MinecraftServer, WorldServer, GameProfile, PlayerInteractionManager)
BaselineResizeBehavior.CREATE()
OfLong.CREATE()
Object.CREATE()
NetworkPlayerInfo.CREATE(GameProfile | AddPlayerData)
AxisDirection[].CREATE()
WorldSavedData.CREATE(String)
Session.CREATE(String, String, String, String)
FieldAccessor.CREATE()
AccessibleRelationSet.CREATE(AccessibleRelation[] | )
EnumPushReaction[].CREATE()
MapItemRenderer.CREATE(TextureManager)
byte[].CREATE()
StackTraceElement[].CREATE()
GameType.CREATE()
CompositeContext.CREATE()
DragGestureRecognizer.CREATE()
WeakReference.CREATE(Object | Object, ReferenceQueue)
State[].CREATE()
HierarchyBoundsListener[].CREATE()
FlavorMap.CREATE()
Shape.CREATE()
Resource.CREATE()
ReflectionFactory.CREATE()
ImmutableMapEntry.CREATE()
Side.CREATE()
Style.CREATE()
FileTime.CREATE()
StackTraceElement.CREATE(String, String, String, int)
UserListIPBans.CREATE(File)
Constructor[].CREATE()
LogBuilder.CREATE()
EnumUsage.CREATE()
InputMethodRequests.CREATE()
ThreadGroup.CREATE(String | ThreadGroup, String)
MusicTicker.CREATE(Minecraft)
DayOfWeek[].CREATE()
RegionIterator.CREATE()
TileEntityItemStackRenderer.CREATE()
Side[].CREATE()
BigInteger.CREATE(int, int, Random | String | String, int | int, byte[] | byte[] | int, Random)
GenLayer[].CREATE()
EnumHand[].CREATE()
Thread.CREATE(ThreadGroup, Runnable, String, long | ThreadGroup, Runnable, String | Runnable, String | ThreadGroup, Runnable | Runnable | String | ThreadGroup, String | )
EnumCreatureType.CREATE()
ByteBuf.CREATE()
ISound.CREATE()
ChannelId.CREATE()
Certificate[].CREATE()
Principal[].CREATE()
DisplayInfo.CREATE(ItemStack, ITextComponent, ITextComponent, ResourceLocation, FrameType, boolean, boolean, boolean)
FieldNamingStrategy.CREATE()
Supplier.CREATE()
BlockStateContainer.CREATE(Block, IProperty[])
BigInteger[].CREATE()
Item.CREATE()
LootTable.CREATE(LootPool[])
Village.CREATE(World | )
ICapabilityProvider.CREATE()
IScoreCriteria.CREATE()
Players.CREATE(int, int)
ServerResourceMode.CREATE()
SecondaryLoop.CREATE()
Collection.CREATE()
ReferenceQueue.CREATE()
PathNodeType.CREATE()
EntityPlayer.CREATE(World, GameProfile)
IMinecartCollisionHandler.CREATE()
ComponentPeer.CREATE()
ExtendedBlockStorage.CREATE(int, boolean)
VertexFormat.CREATE(VertexFormat | )
SoundHandler.CREATE(IResourceManager, GameSettings)
Date.CREATE(int, int, int, int, int, int |  | long | int, int, int | int, int, int, int, int | String)
CollisionRule.CREATE()
WindowPeer.CREATE()
ShortBuffer.CREATE()
Event.CREATE(Object, long, int, int, int, int, int, Object | Object, int, Object | Object, long, int, int, int, int, int)
BlockRendererDispatcher.CREATE(BlockModelShapes, BlockColors)
ISearchTree.CREATE()
Plane.CREATE()
Comparable.CREATE()
StandardLevel.CREATE()
KeyListener[].CREATE()
ThreadLocalMap.CREATE()
InputEvent.CREATE()
DataEntry.CREATE(DataParameter, Object)
AccessibleTable.CREATE()
MouseInfoPeer.CREATE()
Proxy.CREATE(Type, SocketAddress)
PropertyChangeSupport.CREATE(Object)
CriterionProgress.CREATE(AdvancementProgress)
RayTraceResult.CREATE(Entity | Vec3d, EnumFacing, BlockPos | Type, Vec3d, EnumFacing, BlockPos | Vec3d, EnumFacing | Entity, Vec3d)
Quaternion.CREATE(float, float, float, float | ReadableVector4f | )
TextureAtlasSprite.CREATE()
URI.CREATE(String, String, String, String | String, String, String | String, String, String, int, String, String, String | String, String, String, String, String | String)
ChannelPromise.CREATE()
ButtonPeer.CREATE()
WindowListener[].CREATE()
SleepResult[].CREATE()
AttenuationType[].CREATE()
CodeSource.CREATE(URL, Certificate[] | URL, CodeSigner[])
float.CREATE()
CompositeByteBuf.CREATE(ByteBufAllocator, boolean, int | ByteBufAllocator, boolean, int, ByteBuf[] | ByteBufAllocator, boolean, int, Iterable)
DisplayMode[].CREATE()
Comparator.CREATE()
Graphics.CREATE()
LongStream.CREATE()
ZoneRules.CREATE()
CharToGlyphMapper.CREATE()
RecipeBookServer.CREATE()
Channel.CREATE()
PopupMenuPeer.CREATE()
EntityTracker.CREATE(WorldServer)
FileChannel.CREATE()
RuntimeException.CREATE( | String | Throwable | String, Throwable)
Entry[].CREATE()
DifficultyInstance.CREATE(EnumDifficulty, long, long, float)
File.CREATE(URI | String, String | String | File, String)
PlatformLogger.CREATE()
DropTargetContext.CREATE()
InetAddress.CREATE()
Biome[].CREATE()
Class.CREATE()
CharBuffer.CREATE()
LineMetrics.CREATE()
DragSourceContext.CREATE(DragSourceContextPeer, DragGestureEvent, Cursor, Image, Point, Transferable, DragSourceListener)
EnumFlowerType.CREATE()
Scoreboard.CREATE()
PaintEvent.CREATE(Component, int, Rectangle)
SeekableByteChannel.CREATE()
MenuItemPeer.CREATE()
InetAddressHolder.CREATE()
CollectorState.CREATE()
IBlockState.CREATE()
ByteBuffer[].CREATE()
VillageCollection.CREATE(String | World)
IChunkLoader.CREATE()
PlayerProfileCache.CREATE(GameProfileRepository, File)
MemberName.CREATE(Field | Method, boolean | Field, boolean | Class, String, MethodType, byte | Class | Class, String, Class, byte | Constructor | byte, Class, String, Object | Method)
Chronology.CREATE()
ShaderLoader.CREATE()
Promise.CREATE()
Member.CREATE()
PathIterator.CREATE()
VertexFormatElement.CREATE(int, EnumType, EnumUsage, int)
ArrayBasedBuilder.CREATE()
EnumHandSide.CREATE()
DayOfWeek.CREATE()
Field.CREATE()
LocalDateTime.CREATE()
int[].CREATE()
GenLayer.CREATE(long)
MethodAccessor.CREATE()
Dimension.CREATE(Dimension | int, int | )
JsonWriter.CREATE(Writer)
CooldownTracker.CREATE()
Random.CREATE( | long)
SerializedForm.CREATE()
DragSource.CREATE()
Throwable.CREATE(String, Throwable | String | Throwable | )
RenderItem.CREATE(TextureManager, ModelManager, ItemColors)
NBTTagCompound.CREATE()
MusicType.CREATE()
ChannelOutboundBuffer.CREATE()
NumericShaper.CREATE()
ContentHandler.CREATE()
AdvancementRewards.CREATE(int, ResourceLocation[], ResourceLocation[], CacheableFunction)
SoundRegistry.CREATE()
WritableRaster.CREATE()
Lookup.CREATE()
Explosion.CREATE(World, Entity, double, double, double, float, boolean, boolean, List | World, Entity, double, double, double, float, boolean, boolean | World, Entity, double, double, double, float, List)
GuiToast.CREATE(Minecraft)
Marker[].CREATE()
SpanIterator.CREATE()
ListPeer.CREATE()
Annotation.CREATE()
FileLock.CREATE()
NameService.CREATE()
EntityMoveHelper.CREATE(EntityLiving)
BaseCalendar.CREATE()
ColorSpace.CREATE()
Executable.CREATE()
ModalityType[].CREATE()
EnumActionResult[].CREATE()
ByteBufAllocator.CREATE()
FlavorListener[].CREATE()
Packet.CREATE()
MethodTypeForm.CREATE()
ByteBuffer.CREATE()
DataFixer.CREATE(int)
AccessibleContext.CREATE()
AdvancementManager.CREATE(File)
BigDecimal.CREATE(double | BigInteger, int, MathContext | char[], MathContext | BigInteger, MathContext | int, MathContext | long | double, MathContext | int | char[], int, int, MathContext | BigInteger | long, MathContext | String, MathContext | char[], int, int | BigInteger, int | char[] | String)
Attributes.CREATE(Attributes | int | )
ModelBiped.CREATE(float | float, float, int, int | )
addIntsaddStringsprintnotaddFloatsdelayaddDoublesrepeatequalsdoifaddInts(Integer, Integer)
addStrings(String, String)
print(Object)
not(boolean)
addFloats(Float, Float)
delay(List)
addDoubles(Double, Double)
repeat(Integer, Object)
equals(boolean, boolean)
do(List)
if(boolean, Object)
PlayerDropsEvent
PlayerFlyableFallEvent
PlayerInteractEvent
PlayerPickupXpEvent
PlayerSleepInBedEvent
EntityItemPickupEvent
FillBucketEvent
ItemTooltipEvent
PlayerDestroyItemEvent
BiomeEvent.GetGrassColor
BiomeEvent.GetFoliageColor
BiomeEvent.GetWaterColor
DecorateBiomeEvent.Pre
DecorateBiomeEvent.Post
UseHoeEvent
BiomeEvent.CreateDecorator
BiomeEvent.BiomeColor
BiomeEvent.GetVillageBlockID
MinecartUpdateEvent
PlayerEvent.HarvestCheck
PlayerEvent.BreakSpeed
PlayerEvent.NameFormat
PlayerEvent.Clone
LivingSpawnEvent.AllowDespawn
ZombieEvent.SummonAidEvent
MinecartCollisionEvent
MinecartInteractEvent
ArrowLooseEvent
ArrowNockEvent
AttackEntityEvent
BonemealEvent
PlayerInteractEvent.EntityInteract
PlayerEvent.StartTracking
PlayerEvent.StopTracking
PlayerEvent.LoadFromFile
PlayerEvent.SaveToFile
WorldEvent.Load
WorldEvent.Unload
WorldEvent.Save
WorldEvent.PotentialSpawns
FluidEvent.FluidMotionEvent
ChunkWatchEvent.Watch
ChunkWatchEvent.UnWatch
NoteBlockEvent.Play
NoteBlockEvent.Change
OreDictionary.OreRegisterEvent
RenderItemInFrameEvent
ConfigChangedEvent.OnConfigChangedEvent
ConfigChangedEvent.PostConfigChangedEvent
LivingSpawnEvent.SpecialSpawn
FluidEvent.FluidFillingEvent
FluidEvent.FluidDrainingEvent
FluidEvent.FluidSpilledEvent
FluidRegistry.FluidRegisterEvent
OreGenEvent.Post
OreGenEvent.GenerateMinable
PopulateChunkEvent.Pre
PopulateChunkEvent.Post
PopulateChunkEvent.Populate
DecorateBiomeEvent.Decorate
InitMapGenEvent
InitNoiseGensEvent
OreGenEvent.Pre
BlockEvent.BreakEvent
ChunkDataEvent.Load
ChunkEvent.Unload
ChunkEvent.Load
SaplingGrowTreeEvent
WorldTypeEvent.BiomeSize
WorldTypeEvent.InitBiomeGens
BlockEvent.HarvestDropsEvent
DrawScreenEvent.Pre
DrawScreenEvent.Post
ActionPerformedEvent.Pre
ActionPerformedEvent.Post
MouseEvent
EntityViewRenderEvent.FogColors
FOVUpdateEvent
GuiOpenEvent
InitGuiEvent.Pre
RenderHandEvent
RenderLivingEvent.Pre
RenderLivingEvent.Post
Specials.Pre
Specials.Post
RenderGameOverlayEvent.Pre
RenderGameOverlayEvent.Post
RenderGameOverlayEvent.Text
RenderGameOverlayEvent.Chat
PlayerEvent.PlayerLoggedInEvent
PlayerEvent.PlayerLoggedOutEvent
PlayerEvent.PlayerRespawnEvent
PlayerEvent.PlayerChangedDimensionEvent
FMLNetworkEvent.ClientConnectedToServerEvent
InputEvent.KeyInputEvent
PlayerEvent.ItemPickupEvent
PlayerEvent.ItemCraftedEvent
PlayerEvent.ItemSmeltedEvent
FMLNetworkEvent.ClientCustomPacketEvent
FMLNetworkEvent.ServerCustomPacketEvent
FMLNetworkEvent.CustomNetworkEvent
ClientChatReceivedEvent
EntityViewRenderEvent.FogDensity
FMLNetworkEvent.ServerConnectionFromClientEvent
FMLNetworkEvent.ServerDisconnectionFromClientEvent
FMLNetworkEvent.ClientDisconnectionFromServerEvent
FMLNetworkEvent.CustomPacketRegistrationEvent
EntityStruckByLightningEvent
PlaySoundAtEntityEvent
ItemExpireEvent
ItemTossEvent
EnderTeleportEvent
EntityEvent.EnteringChunk
LivingEvent.LivingUpdateEvent
LivingEvent.LivingJumpEvent
EntityJoinWorldEvent
LivingHurtEvent
LivingPackSizeEvent
LivingSetAttackTargetEvent
LivingSpawnEvent.CheckSpawn
InputEvent.MouseInputEvent
LivingAttackEvent
LivingDeathEvent
LivingDropsEvent
LivingFallEvent
PlayStreamingSourceEvent
ForgeChunkManager.ForceChunkEvent
ForgeChunkManager.UnforceChunkEvent
TickEvent.ServerTickEvent
TickEvent.ClientTickEvent
RenderWorldLastEvent
TextureStitchEvent.Pre
TextureStitchEvent.Post
PlaySoundSourceEvent
ServerChatEvent
PotionBrewEvent
EntityEvent.EntityConstructing
EntityEvent.CanUpdate
TickEvent.WorldTickEvent
TickEvent.PlayerTickEvent
TickEvent.RenderTickEvent
AnvilUpdateEvent
long
int
long
Object
